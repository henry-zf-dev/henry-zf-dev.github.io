{"meta":{"title":"HenryV2进阶中…","subtitle":"","description":"","author":"Henry","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2020-05-08T10:40:26.940Z","updated":"2020-01-25T10:13:40.861Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"项目","date":"2020-05-08T10:40:26.941Z","updated":"2020-01-25T10:13:40.851Z","comments":true,"path":"project/index.html","permalink":"http://yoursite.com/project/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-01-22T12:48:22.000Z","updated":"2020-02-01T11:56:49.689Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-08T10:40:26.941Z","updated":"2020-01-25T10:13:40.863Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"二叉树的先中后序遍历（递归+非递归 JS 实现）","slug":"tech/dataStructuresAlgorithms/binary-tree-traversal","date":"2020-07-19T07:35:01.000Z","updated":"2020-08-21T12:56:22.623Z","comments":true,"path":"2020/07/19/tech/dataStructuresAlgorithms/binary-tree-traversal/","link":"","permalink":"http://yoursite.com/2020/07/19/tech/dataStructuresAlgorithms/binary-tree-traversal/","excerpt":"","text":"JavaScript 中没有树这种数据结构，但可以用 Object 和 Array 来构建树。二叉树是指，树中每个节点最多只能有两个子节点，分别为左节点、右节点，通常使用 Object 模拟二叉树。二叉树的先中后序遍历一般可以用递归来完成，也可以利用栈实现非递归的方式实现。 数据源： 1234567891011121314151617181920212223242526272829const bt = &#123; val: 1, left: &#123; val: 2, left: &#123; val: 4, left: null, right: null &#125;, right: &#123; val: 5, left: null, right: null &#125; &#125;, right: &#123; val: 3, left: &#123; val: 6, left: null, right: null &#125;, right: &#123; val: 7, left: null, right: null &#125; &#125;&#125;; 先序遍历 根-左-右：先访问根节点，再对根节点的左子树进行先序遍历，最后对根节点的右子树进行先序遍历 递归 123456const preorder = (root) =&gt; &#123; if (!root) return; preorder(root.left); preorder(root.right);&#125;;preorder(bt); 非递归 123456789101112const preorder = (root) =&gt; &#123; if (!root) return; const stack = [root]; while (stack.length) &#123; const n = stack.pop(); console.log(n.val); // 由于栈先进后出的特性，所有先 push right，再 push left if (n.right) stack.push(n.right); if (n.left) stack.push(n.left); &#125;&#125;;preorder(bt); output: 1 2 4 5 3 6 7 中序遍历 左-根-右：先对根节点的左子树进行中序遍历，再访问根节点，最后对根节点的右子树中序遍历 递归 1234567const inorder = (root) =&gt; &#123; if (!root) return; inorder(root.left); console.log(root.val); inorder(root.right);&#125;;inorder(bt); 非递归 123456789101112131415161718const inorder = (root) =&gt; &#123; if (!root) return; const stack = []; let p = root; while (stack.length || p) &#123; // 类似于遍历链表，把当前根节点的所有左节点 push 到 stack 中 while (p) &#123; stack.push(p); p = p.left; &#125; // 访问最底层的左节点 const n = stack.pop(); console.log(n.val); // 然后将指针指向当前根节点的右节点，以该右节点作为根节点继续下轮的遍历 p = n.right; &#125;&#125;;inorder(bt); output: 4 2 5 1 6 3 7 后序遍历 左-右-根：先对根节点的左子树进行后序遍历，再对根节点的右子树进行后序遍历，最后访问根节点 递归 1234567const postorder = (root) =&gt; &#123; if (!root) return; postorder(root.left); postorder(root.right); console.log(root.val);&#125;;postorder(bt); 非递归 12345678910111213141516171819202122// 先将后序遍历取反变为类似于先序遍历，即：左-右-根 =&gt; 根-右-左// 再利用栈先进后出特性，把先序遍历的结果取反，遍历访问就是后序遍历的结果const postorder = (root) =&gt; &#123; if (!root) return; const outputStack = []; // 最终用来倒序输出的栈 const stack = [root]; // 用来先序遍历的栈 while (stack.length) &#123; const n = stack.pop(); // 将 n push 到 outputStack 中 outputStack.push(n); // 因为和现需遍历不完全一样，先序遍历：根-左-右，此时为：根-右-左 // 所以此时先 push left，再 push right if (n.left) stack.push(n.left); if (n.right) stack.push(n.right); &#125; // 最终遍历 pop outputStack 的所有元素输出，即为后序遍历的结果 while (outputStack.length) &#123; const n = outputStack.pop(); console.log(n.val); &#125;&#125;;postorder(bt); output: 4 5 2 6 7 3 1","categories":[],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"JavaScript 原生进阶学习-上","slug":"tech/javaScript/js-fighting-1","date":"2020-06-10T05:23:11.000Z","updated":"2020-08-21T12:56:22.600Z","comments":true,"path":"2020/06/10/tech/javaScript/js-fighting-1/","link":"","permalink":"http://yoursite.com/2020/06/10/tech/javaScript/js-fighting-1/","excerpt":"","text":"原文链接：原生JS灵魂之问-上 第一篇：JS 数据类型–概念篇JS 原始数据类型有哪些？引用数据类型有哪些？在 JS 中，存在 7 种原始数据类型，分别是： boolean null undefined number string symbol bigint 引用数据类型：对象，包含： 普通对象 Object 数组对象 Array 正则对象 RegExp 日期对象 Date 数学函数 Math 函数对象 Function 说出下面运行结果，解释原因1234567891011121314151617function test(person) &#123; person.age = 26; person = &#123; name: 'henry', age: 18 &#125;; return person&#125;const p1 = &#123; name: 'devon', age: 19&#125;;const p2 = test(p1);console.log(p1);console.log(p2); 结果： 12p1: &#123;name: &quot;devon&quot;, age: 26&#125;p2: &#123;name: &quot;henry&quot;, age: 18&#125; 原因：在函数传参的时候，传递的是对象在堆中的内存地址值，test 函数中的实参 person 是 p1 对象的内存地址，通过调用person.age = 26确实改变了 p1 的值，但随后 person 被赋值成为另一块内存空间的地址，并且在最后将这另外一份内存空间的地址返回，赋值给了 p2 null 是对象吗？为什么？结论：null 不是对象 解释：虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑，使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object。 ‘1’.toString() 为什么可以调用？其实在这个语句运行的过程中，做了这样几件事情： 123var s = new Object('1');s.toString();s = null; 第一步：创建Object类实例。注意为什么不是String？原因是：Symbol和BigInt的出现，对它们调用new都会报错，目前 ES6 规范也不建议用new来创建基本类型的包装类 第二步：调用实例方法 第三步：执行完方法立即销毁这个实例 整个过程体现了基本包装类型的性质，而基本包装类型恰恰属于基本数据类型，包括Boolean、Number和String 参考：《JavaScript 高级程序设计(第三版)》P118 0.1+0.2 为什么 !== 0.3 ?0.1 和 0.2 在转换成二进制后悔无限循环，由于标准位数的限制后面多余的位数会被截掉，此时就已经出现了精度的损失，相加后因浮点数小数位的限制，而截断的二进制数字再转换为十进制就会变成 0.30000000000000004 如何理解 BigInt ？什么是 BigInt？ BigInt 是一种新的数据类型，用于当整数值大于 Number 数据类型支持的范围时。这种数据类型允许我们安全地对大整数执行算术操作，表示高分辨率的时间戳，使用大整数 id，等等，而不需要使用库 为什么需要 BigInt？ 在 JS 中，所有的数字都以双精度64位浮点格式表示，那这会带来什么问题呢？ 这导致 JS 中的 Number 无法精确表示非常大的整数，它会将非常大的整数四舍五入，确切地说，JS 中的 Number类型只能安全地表示-90071992547409919007199254740991之间的整数，即2^53-12^-53-1，任何超出此范围的整数值都可能失去精度 1console.log(999999999999999); // =&gt; 10000000000000000 同时也会有一定的安全性问题： 19007199254740992 &#x3D;&#x3D;&#x3D; 9007199254740993; &#x2F;&#x2F; &#x3D;&gt; true 如何创建并使用 BigInt？ 要创建 BigInt，只需要在数字末尾追加n即可 12console.log(9007199254740995n); // =&gt; 9007199254740995nconsole.log(9007199254740995); // =&gt; 9007199254740996 另一种创建 BigInt 的方法是用 BigInt() 构造函数 1BigInt(\"9007199254740995\"); // =&gt; 9007199254740994n 简单使用如下： 1234567891011121310n + 20n; &#x2F;&#x2F; &#x3D;&gt; 30n10n - 20n; &#x2F;&#x2F; &#x3D;&gt; -10n+10n; &#x2F;&#x2F; &#x3D;&gt; TypeError: Cannot convert a BigInt value to a number-10n; &#x2F;&#x2F; &#x3D;&gt; -10n10n * 20n; &#x2F;&#x2F; &#x3D;&gt; 200n20n &#x2F; 10n; &#x2F;&#x2F; &#x3D;&gt; 2n23n % 10n; &#x2F;&#x2F; &#x3D;&gt; 3n10n ** 3n; &#x2F;&#x2F; &#x3D;&gt; 1000nconst x &#x3D; 10n;++x; &#x2F;&#x2F; &#x3D;&gt; 11n--x; &#x2F;&#x2F; &#x3D;&gt; 9nconsole.log(typeof x); &#x2F;&#x2F; &#x3D;&gt; &quot;bigint&quot; 值得警惕的点 BigInt 不支持一元加号运算符，这可能是某些程序依赖于+始终生成 Number 的不变量，或者抛出异常。另外，更改+的行为也会破坏ams.js代码 因为隐氏烈性转换可能丢失信息，所以不允许在 BitInt 和 Number 之间进行混合操作，当混合使用大整数和浮点数时，结果值可能无法由 BigInt 或 Number 精确表示 110 + 10n; &#x2F;&#x2F; &#x3D;&gt; TypeError 不能将 BigInt 传递给 Web api 和内置的 JS 函数，这些函数需要一个 Number 类型的数字，尝试这样做会报 TypeError 错误 1Math.max(2n, 4n, 6n); &#x2F;&#x2F; TypeError 当 Boolean 类型与 BitInt 类型相遇时，BigInt 的处理方式与 Number 类似，换句话说，只要不是 0n，BigInt 就被视为 truth 的值 123456if (0n) &#123; // 条件判断为 false&#125;if (3n) &#123; // 条件判断为 true&#125; 元素都为 BigInt 的数字可以进行 sort BigInt 可以正常地进行位运算，如|``&amp;``&lt;&lt;``&gt;&gt;``^ 浏览器兼容性 其实现在的兼容性并不怎么好，只有chrome67、Firefox、Opera这些主流浏览器，要正式成为规范，其实还有很长的路要走，期待 BigInt 的光明前途 第二篇：JS 数据类型–检测篇typeof 是否能正确判断类型？对于原始类型来说，除了 null 都可以调用 typeof 显示正确的类型 12345typeof 1 &#x2F;&#x2F; &#x3D;&gt; &#39;number&#39;typeof &#39;1&#39; &#x2F;&#x2F; &#x3D;&gt; &#39;string&#39;typeof undefined &#x2F;&#x2F; &#x3D;&gt; &#39;undefined&#39;typeof true &#x2F;&#x2F; &#x3D;&gt; &#39;boolean&#39;typeof Symbol() &#x2F;&#x2F; &#x3D;&gt; &#39;symbol&#39; 但对于引用数据类型，除了函数之外，都会显示object 123typeof [] &#x2F;&#x2F; &#x3D;&gt; &#39;object&#39;typeof &#123;&#125; &#x2F;&#x2F; &#x3D;&gt; &#39;object&#39;typeof console.log &#x2F;&#x2F; &#39;function&#39; 因此采用typeof判断对象类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true 123456789101112131415const Person = function() &#123;&#125;;const p1 = new Person();if (p1 instanceof Person) &#123; // =&gt; true&#125;const str1 = 'hello world';if (str1 instanceof String) &#123; // =&gt; true&#125;const str2 = new String('hello world');if (str2 instanceof String) &#123; // =&gt; true&#125; instanceof 能否判断基本数据类型？能，比如下面这种方式： 1234567class PrimitiveNumber &#123; static [Symbol.hasInstance](x) &#123; return typeof x === 'number' &#125;&#125;console.log(111 instanceof PrimitiveNumber) // =&gt; true MDN 上关于 hasInstance 的解释 其实就是自定义 instanceof 行为的一种凡是，这里将原有的 instanceof 方法重定义，换成了 typeof，因此能够判断基本数据类型 能不能手动实现一下 instanceof 的功能？核心：原型链的向上查找 12345678910111213141516function myInstanceof(left, right) &#123; // 基本数据类型直接返回 false if (typeof left !== 'object' || left === null) return false; // getPrototypeof 是 Object 对象自带的一个方法，能够拿到参数的原型对象 let proto = Object.getPrototypeOf(left); while (true) &#123; // 查找到尽头，还没找到 if (proto === null) return false; // 找到相同的原型对象 if (proto === right.prototype) return true; proto = Object.getPrototypeOf(proto); &#125;&#125;console.log(myInstanceof('111', String)); // =&gt; trueconsole.log(myInstanceof(new String('111'), String)); // =&gt; true Object.is 和 === 的区别是什么？Object 在严格等于的基础上修复了一些特殊情况下的失误，具体来说就是+0 和 -0、NaN 和 NaN，JS中 +0 === -0，NaN !== Nan，用一下方式规避这两个特殊情况的问题 源码如下： 123456789function is(x, y) &#123; if (x === y) &#123; // 运行到 1/x === 1/y 的时候，x 和 y 都为 0，但是 1/+0 = +Infinity，1/-0 = -Infinity，是不一样的 return x !== 0 || y !== 0 || 1 / x === 1 / y; &#125; else &#123; // NaN === NaN 是 false，这是不对的，我们这里做一个拦截，x !== x，那么一定是 NaN，y 同理，两个都是 NaN 的时候，返回 true return x !== x &amp;&amp; y !== y; &#125;&#125; 第三篇：JS 数据类型–转换篇[] == ![] 结果是什么？为什么？==判断过程中，左右两边都需要转换为数字然后进行比较。[]转换位数字为 0，[]首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true，因此![]为false，进而在转换成数字后也为 0。所以0 == 0，结果为true JS 中类型转换有哪几种？JS 中类型转换只有三种： 转换成数字 转换成布尔值 转换成字符串 转换具体规则如下： 注意 “Boolean 转字符串” 这行结果指的是 true 转字符串的例子 == 和 === 有什么区别？ === 叫做严格相等，是指：左右两边不仅值要相等，类型也要相等，例如 ‘1’ === 1 的结果是 false，因为一边是 String，另一边是 Number ==不像===那样严格，对于一般情况，只要值相等，就返回true，但==还涉及到一些类型转换，它的转换规则如下： 两边的类型是否相同，相同的话就比较值的大小，例如1 == 2返回false 判断的是否是null和undefined，是的话就返回true 判断的类型是否是String和Number，是的话就先把String转换成Number，在进行比较 判断其中一方是否是Boolean，是的话就先把Boolean转换成Number，在进行比较 判断其中一方是否是Object，且另一方是String、Number或Symbol，是的话就先把Object转换为String，在进行比较 12console.log(&#123;a: 1&#125; == true); // =&gt; falseconsole.log(&#123;a: 1&#125; == \"[object Object]\"); // =&gt; true 对象转原始类型是根据什么流程运行的？对象转原始类型，会调用内置的[ToPrimitive]函数，对该函数而言，其逻辑如下： 如果有 Symbol.toPrimitive() 方法，优先调用再返回 调用 valueOf()，如果转换为原始类型，则返回 调用 toString()，如果转换为原始类型，则返回 如果都没有返回原始类型，会报错 1234567891011121314const obj = &#123; value: 3, valueOf() &#123; return 4 &#125;, toString() &#123; return '5' &#125;, [Symbol.toPrimitive]() &#123; return 6 &#125;&#125;;console.log(obj + 1); // =&gt; 7 如何让 if(a == 1 &amp;&amp; a == 2) 条件成立？123456789const a = &#123; value: 0, valueOf: function() &#123; this.value++; return this.value &#125;&#125;;console.log(a == 1 &amp;&amp; a == 2); // =&gt; true 第四篇：谈谈对闭包的理解什么是闭包？ 红宝书(p178)上对于闭包的定义：闭包是指有权访问另一个函数作用域中的变量的函数。 MDN 对闭包的定义为：闭包是指那些能够访问自由变量的函数。（其中自由变量，指在函数中使用的，但既不是函数参数 arguments，也不是函数的局部变量的变量，其实就是另一个函数作用域中的变量）。 闭包产生的原因？首先要明白作用域链的概念，其实很简单，在ES5中存在两种作用域–全局作用域和函数作用域。当访问一个变量时，解释器会首先在当前作用域查找标识符，如果没有找到，就去父作用域找，直到找到该变量的标识符或者不在父作用域中，这就是作用域链。值得注意的是，每一个子函数都会拷贝上级的作用域，形成一个作用域链条，比如： 12345678var a = 1;function f1() &#123; var a = 2; function f2() &#123; var a = 3; console.log(a); // =&gt; 3 &#125;&#125; 在这段代码中，f1的作用域指向全局作用域window和它本身，而f2的作用域指向全局作用域window、f1和它本身。而且作用域是从最底层向上找，直到找到全局作用域window为止，如果全局还没找到就会报错。就这么简单一件事情！ 闭包产生的本质就是，当前环境中存在指向父级作用域的引用。还是上面的例子： 12345678910function f1() &#123; var a = 2; function f2() &#123; console.log(a); // =&gt; 2 &#125; return f2;&#125;var x = f1();x(); 这里x会拿到父级作用域中的变量，输出2。因为在当前环境中，含有对f2的引用，f2恰恰引用了window、f1和f2的作用域。因此f2可以访问到f1中作用域中的变量a 那是不是只有返回函数才算是产生了闭包呢？ 回到闭包的本质，我们只需要让父级作用域的引用存在即可，因此我们还可以这样做： 12345678910var f3;function f1() &#123; var a = 2; f3 = function() &#123; console.log(a); &#125;&#125;f1();f3(); 让f1执行，给f3赋值后，等于说限制f3 拥有了 window、f1和f3本身这几个作用域的访问权限，还是自底向上查找，最近是在 f1中找到了a，因此输出2 在这里是外面的变量f3 存在着父级作用域的引用，因此产生了闭包，形式变了，本质没有改变 闭包有哪些表现形式？如何解决下面的循环输出问题？ 第五篇：谈谈对原型链的理解原型对象和构造函数有何关系？能不能描述一下原型链？ 第六篇：JS 实现继承第一种：借助 call第二种：借助原型链第三种：将前两种组合第四种：组合继承的优化1第五种：组合继承的优化2ES6 的 extends 被编译后的 JavaScript 代码从设计思想上谈谈继承本身的问题","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"ElementUI 树形组件懒加载","slug":"tech/vue/vue-element-tree-lazy-load","date":"2020-05-16T05:23:11.000Z","updated":"2020-05-17T13:18:09.265Z","comments":true,"path":"2020/05/16/tech/vue/vue-element-tree-lazy-load/","link":"","permalink":"http://yoursite.com/2020/05/16/tech/vue/vue-element-tree-lazy-load/","excerpt":"","text":"总结一下在使用ElementUI 组件实现节点懒加载时遇到的问题和解决方法 最终大致效果截图： 页面涉及到的页面展示和用户操作有：树形组件的节点懒加载渲染，在某个节点下新增子层、新增房间、设置管理员、重命名、删除节点，解析 URL 中的当前选中的节点 id，使&lt;el-tree/&gt;组件自动展开到该节点。 历史背景之前由于总总原因，区域树实现的程度是：后台返回所有区域的平层数据结构，数组元素间通过pid进行关联，前台拿到所有区域数据后，根据pid组装成&lt;el-tree/&gt;组件需要的节点递归结构，所以前台组好数据后以:data=&quot;srcData&quot;传入即可。当用户对节点进行增删改操作后，前台会重新请求新的数据，再将以上处理重新进行一遍，从而刷新整个区域树。 现有需求后台不再将所有的区域一次性返回给前台，而是用户在展开节点后，再以点击的节点的 id 作为父节点 pid，请求其子层中第一层的区域数据，然后前台将请求到的数据载入到该节点。并且对区域的增删改操作成功后，不再是重新请求所有的数据，而是根据 id 更新指定的某个节点。 解决办法 懒加载 &lt;el-tree/&gt; 组件其实本身就支持懒加载，用法也很简单： 初始化组件时，设置:lazy=&quot;true&quot;，并自定义load方法即可 对节点的增删改 节点新增：在新增子层接口返回成功后，将返回的 resp.data 通过&lt;el-tree/&gt;组件自带的append方法，将新数据追加在当前节点中 与新增同理，节点删除： 节点更改：在&lt;el-tree/&gt;组件的node-click事件回调中，前两个参数会返回该节点的数据源以及该节点对象本身：其中对该节点的Node()对象的data进行操作，则页面会根据最新的数据源进行重新渲染（注：直接对 nodeData进行更改，不会触发页面的重新渲染）所以当节点更改接口返回成功后，用返回的新数据更新node.data即可实现页面的动态刷新 自动展开到指定的节点 首先从 URL 中取当前需要展开节点的全路径信息，用它更新&lt;el-tree/&gt;组件的default-expanded-keys属性，这样区域树就会展开至指定的节点此处需要设置全路径的原因是：在懒加载模式下&lt;el-tree/&gt;组件的auto-expand-parent是无效的 还存在一个问题是，我们不仅要展开需要默认展开的节点，还要给当前正在操作的节点赋值，即全路径中最后一个id所对应的节点。&lt;el-tree/&gt;组件提供了setCurrentKey方法，即根据传入的key,将该key所对应的节点设置为选中状态，我们刚好可以利用这个方法。但由于每一节点的数据是异步请求而来的，所以如果将该方法的调用放在上图的方法中，可能会造成节点数据还没加载好，就给组件设置了当前选中的节点，导致设置不成功 解决这个问题的办法是，将setCurrentKey的调用放在自定义load方法的成功回调中： 这样就可以保证节点数据已经加载完成了，再去设置当前选中的节点 补充：&lt;el-tree/&gt;组件的全选/半选问题 在角色管理中，给某个角色设置其拥有的权限项，使用到了&lt;el-tree/&gt;组件的选择功能：但是遇到一个问题：当前台把已选的权限项提交给后台保存成功后，需要在查询该角色的权限项时，将权限项设置给&lt;el-tree/&gt;组件进行显示，但是前台是需要将所有选择的节点(不管是全选还是办选)的 id 都提交到后台，所以前台拿到的新数据也是全量的，而且无法区分是全选还是半选。这样会造成，只要提交时父节点被选择（不论全选/半选），在给组件设置选中值时，它的子节点会全被选中 解决办法是： 在组件mounted后，手动设置&lt;el-tree/&gt;组件的选中值，首先遍历selectData，通过getNode方法拿到所有需要选中的节点对象，然后判断其是否为叶子节点，如果是，则使用setChecked方法将其状态设置为选中；而非叶子节点会自动根据其所有叶子节点的选中状态，决定其本身的全选或半选状态 总结以上就是区域树组件改造过程中遇到的问题，以及一些解决思路。ElementUI作为最受欢迎的Vue组件库，它在提供丰富的既有功能的同时，也提供了很多可以灵活运用的API。本身自己能力有限，不能说别人造的轮子无法很好的满足自己的需求，就去想着改别人的源码，我们在自定义组件时，可以多进行尝试，在现有的基础上寻找最佳的方案来满足需求。","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"互联网本质的一点讨论","slug":"thinking/20200306","date":"2020-03-06T12:47:46.087Z","updated":"2020-03-06T12:47:46.087Z","comments":true,"path":"2020/03/06/thinking/20200306/","link":"","permalink":"http://yoursite.com/2020/03/06/thinking/20200306/","excerpt":"","text":"今天 Jerry 请我吃麦当劳，顺便陪他去充电桩充电，路上一起讨论了互联网本质的一些东西，感觉 Jerry 总结的很有道理，我准备记录一下，希望以后自己也能对一些事物做出自己的判断 互联网本质讨论的三个结论 客户：相对不是很富裕的人群 服务：让相对高质量的服务廉价化 成本：用空间成本换时间成本 例子：互联网健身房和传统健身房的区别 传统健身房盈利主要靠的是前期会员加入的会员卡费，以及会员购买私教授课的费用，其中会员卡费一般是一次性付完，私教课则按照课时收费。而且相对私教课程，会员费要低很多，市面上普通健身房一年的会员卡费大概在1500-3000之间，而一节私教费就在300~700之间（和城市/地段有关）。而为什么私教课很贵，先不看私教老师本身的专业性、口碑等价值，有一个本质原因是：私教授课过程中，他的时间只能被一个或者少量的人所占用，其时间成本是很高的。而同时教授的人越多，每个人所分担的费用也会相对更少。 另一方面，传统健身房的私教的主要收入也依赖于他所在健身房的客源，所以其价值在一定程度上是被限制的。而诸如超级猩猩这类互联网健身房，由互联网提供的平台，让更多的人不需要办健身房的会员卡，就能有机会接触到更多的优秀私教。相对的，私教也不会受限于他所在健身房的固定圈子，能有更多的机会授课。同时报名私教课的人所要分担的费用也会被平均下来，变得更低，而且也不用办长周期的会员卡绑定消费，所有他们要承担的风险变小，使得更多的人接受这种模式。 互联网让原本相对高质量的私教健身服务，变得廉价，让原本没有太好经济基础的人也能享受到，即使这种模式下的健身私教服务相对于传统的一对一服务，会打折扣，但对于很多人来讲，这已经满足他们的需求了。而对于经济基础很好的人，比如一些明星，肯定就不会接受这种模式，他们追求的就是更专业，更高质量，长期且稳定的服务，对成本的顾虑不在他们考量的第一位。 最后希望自己慢慢变成一个有思想的人，哈哈","categories":[],"tags":[{"name":"随想","slug":"随想","permalink":"http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"春节随想","slug":"thinking/20200125","date":"2020-03-06T12:41:00.665Z","updated":"2020-03-06T12:41:00.665Z","comments":true,"path":"2020/03/06/thinking/20200125/","link":"","permalink":"http://yoursite.com/2020/03/06/thinking/20200125/","excerpt":"","text":"今年因为武汉肺炎的原因，没有回家过年，又一次错失了和家人吃团圆饭的机会，但是有失也有得，我把春节期间自己的所见所想记录在这里，这些都是自己的收获。 峰哥家的团圆饭算来这是第二次在峰哥家吃年饭，因为都是湖北人，饭菜都很合胃口。饭桌上峰哥和我讲了很多比较抽象的东西，还是向来的风格，哈哈。一些道理我可以理解，但一些更深的东西，现阶段的我还无法真正有所体会，阅历不够，思想高度也达不到，也许可以通过多看书来慢慢补上吧。总之，希望自己在技-&gt;术-&gt;通-&gt;道的路上越走越好吧。 和Jerry在公园漫步今天看望了Kim姐和’小朱朱’，小宝贝睡相很可爱，哈哈。吃完午饭就和Jerry还有Jerry老爸老妈在附近的公园转了好大一圈。一路上主要和Jerry聊了不少，以下是对聊天内容的记录和总结。 城市规划和软件产品开发的联系不管是哪个城市，在建设发展中，不可避免地会经历规划、建设、改造、重建等过程，深圳这座发达又年轻的城市也不例外。就拿离我很近的大沙河水质治理为例，深圳到处都能看到对老旧楼宇、基础公共设施的翻新或者重建，城市管理者对城市规划的理解会随着时代变迁而变化，也许这个变迁只需要短短几年。而软件产品的开发也是一样，在最开始，没有人能够完全规划好所有的东西，只能在当前有限的时间、成本、开发人员能力的前提下，做到最好。而随着迭代的进行，客户需求的累计或变更，一定会暴露越来越多的问题，代码的维护性、扩展性、复用性、性能、安全等等，就像房子翻新和重建，我们也需要对代码做优化甚至重构。而这也一样需要考虑当前情况下的时间、成本以及开发人员能力，产品迭代本身就是个动态的过程，把握住一种动态平衡可能就是管理的一部分吧。 对产品开发和客户需求悖论的思考首先闭门造车地开发产品肯定是无法经受时间和实践考验的，这个毋庸置疑。我们需要客户在需求输入端的不断input，但是在产品前期，往往客户并没有想清楚要什么，真正的痛点描述不够准确，而且客户需求转化成产品需求，再到技术需求，到最终实现，这个流程中，最后能产生什么程度的output，往往会和预期存在偏差。我想这个偏差也是一个管理者需要时刻关注的，对偏差进行分析，找到产生的原因，并且有优先级地进行调整，通过不断地迭代，产品才能逐渐迎合越来越多客户的需求，解决客户的问题。 对ezCloud产品定位的理解我的理解是，产品内在价值，是通过软件服务，解决客户在会议室场景下会议室的控、管、维、用相关的问题，降低客户成本。然后基于内在价值，促进公司自研设备和代理设备的推广和销售。然而对于第二点，我以前的理解是，有了ezCloud软件上的支持，肯定会提高公司硬件产品的销售，但是就目前而言，其实ezCloud只是一个加分项而已，而且在整套解决方案中占比很少，是充分不必要条件。ezCloud在项目中的迭代打磨会让它越来越能符合更多客户的需求，但是这个本身不会直接增加硬件的销售。该如何破题，就需要设备库、分控、总控和其他自研硬件，在自检、联检、告警核心业务方向上，相互配合，一步步完善，能真正解决客户问题了。我们现在只能适配别人的设备，等客户多起来，通过我们和客户的推动，带动其他代理厂商对我们进行适配，这样ezCloud的影响力才能逐渐提升，价值也会逐渐体现。现阶段，ezCloud产品还在很初期的阶段，设备库、分控、总控也还有很多不足，我们自研硬件也还只是处在OEM的阶段，总之真的还任重道远。 鲶鱼效应鲶鱼效应是指鲶鱼在搅动小鱼生存环境的同时，也激活了小鱼的求生能力。鲶鱼效应是采取一种手段或措施，刺激一些企业活跃起来投入到市场中积极参与竞争，从而激活市场中的同行业企业。而在一个团队中，通过小数主动的人行动上的正向刺激，潜移默化地带动其他相对被动的人，不管是对个人还是对团队，都能向着更好的方向发展。但是我存在一个疑问，对于相对被动的员工来说，那些积极主动员工的作为或者存在，是不是本身就是一种威胁或者说利益冲突，毕竟鲶鱼对于其他小鱼来说是捕食者和被捕食者的关系。我自己工作经历有限，还没遇到过这种情况，但如果一个团队真的出现这种情况，那肯定是有问题的。然后如果我是那条鲶鱼，该怎么做好呢？怎么能在他人不抵触的前提下，正向地影响更多的人呢？如何提升思维的柔度，是需要自己慢慢思考的东西。 饭桌上的畅谈中午很有幸和Jerry和Jerry老爸老妈一起吃饭。Jerry老爸是个很健谈的人，既有北方人的豪爽，又有南方人的细致，给人第一印象是，一位知识渊博而又畅谈的老先生。Jerry妈妈给人印象就是知性，稳重，又平易近人，给人一种安全感，虽然言语不多，但让人觉得很亲切。Jerry的老爸老妈都很厉害，令人敬佩，不知道Jerry有这么优秀的爸妈，会不会觉得压力很大，哈哈。和Jerry老爸的聊天过程中，我觉得有两点我需要在这里记录一下，一个是如果有能力，帮人要帮到点上，小恩小惠没有什么用，雪中送炭才有意义。我想到的是，以我现在的能力，能够帮助他人帮到点上吗，然后长久以来，有哪些人为我雪中送过炭呢，需要我记住心里。第二点就是，人是很复杂的，看人需要看多面，而且要看多次，我觉得很有道理。 一点总结在回家的路上，我想了一个很简单就能问出来的问题：Jerry为什么要和我说这么多东西呢？我给自己的答案：希望我能有所回应，不管是技术上还是管理上（我觉得Jerry更关心的是我在管理方向的能力发展）。但我现在回应的还不够好，这段时间自己渐渐笃定的职业发展规划，在这个阶段是否是最优的选择？或者说，我该在技术和管理两方面找到平衡？然后Jerry对Cuzz问的三个问题：想要什么？想成为什么？如何达到？我想也是问给我的。这些也都是要自己琢磨的问题…… 从小生活武汉，但一直以来对武汉印象都不太好，虽然家就在那，却总觉得对武汉没什么感情，这也许是我一直学不会武汉话的原因吧。今天听到Jerry老爸一口地道的武汉话，我的第一感觉却是无比的亲切和怀念。人真是种复杂的生物。","categories":[],"tags":[{"name":"随想","slug":"随想","permalink":"http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"Vue 核心 API 学习笔记","slug":"tech/vue/vue-core-api","date":"2020-03-05T13:54:30.430Z","updated":"2020-08-21T12:56:22.595Z","comments":true,"path":"2020/03/05/tech/vue/vue-core-api/","link":"","permalink":"http://yoursite.com/2020/03/05/tech/vue/vue-core-api/","excerpt":"","text":"Demo 地址：Vue 进阶学习 1. Vue 实例实例：对某个类，通过 new ClassA() 初始化而来的对象，叫做实例。对象初始化参考 初始化对象的几种方式 1234const app = new Vue(&#123; el: '#root', template: '&lt;div&gt;This is content&lt;/div&gt;'&#125;); 通过 new Vue(options) 初始化的 Vue 实例，最终会通过 render function 将 template 的内容挂载到 #root 根节点上，在页面中展示，而且挂载的方式是使用 template render 生成的新节点，替换掉 指定的 #root 节点，正式这个原因，如果在 template 中存在多个根节点，Vue 会报一个警告： 注：如果 options 传入了 template，则将 template 编译到 render 函数中去，否则会将 el 外部的 html 作为 template 进行编译 [Vue warn]: Error compiling template:Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead. 因为 Vue 不知道用哪个节点替换指定的根节点。 不仅仅可以通过 options.el 指定要挂载的根节点，还可以手动进行挂载： 1app.$mount('#root'); 在 webpack 配置中，通过插件，可以指定以某个文件为模板，生成最终的 html 页面： 123new HTMLPlugin(&#123; template: path.join(__dirname, 'index.html')&#125;); 初始化 Vue 传入的 options 会与默认的初始化参数结合起来，最终产生 Vue 实例，而且 options 中的属性可以通过 app.$[attr] 访问，如： app.$el、app.$root、app.$options、app.$data、app.$props、app.$children、app.$refs、app.$slots 等等 app.$el 是对最终挂载生成 html 节点的引用 app.$root 是整个 Vue 树状结构的根节点，也是 Vue 实例，是对 app 的引用，即：app.$root === app app.$options 是初始化 Vue 实例所有的参数，$options 中也可以看到诸如 data、props、watch 等属性，但不是对 app.$[attr] 的引用，所以如果更改 app.$options.data 的值，页面是不会响应式变化的，直接更改 app.$data 才有效 app.$data 定义在 data 对象中的属性，Vue 会复制一份引用到 app 层，即 app.[attr] 和 app.$data[attr] 访问到的是同一份地址， 定义在打 data 中的全局属性，如果不对属性进行字面量声明，则在 Vue 初始化完成之后，给 data 对象增加属性，或修改属性值，Vue 不会对这个对象做响应式处理，所以即使该对象的属性值变化了，也不会响应式地重新渲染 但可以通过 $set 方法给在初始化完成之后再给 data 增加或修改属性，而且也是响应式的 1app.$set(app.obj, 'a', 'foo'); 另外，也删除某个属性，同时会解除对该属性的响应式处理 1app.$delete(app.obj, 'a'); 强制组件重新渲染一次，也可以在没有字面量定义 data 属性时，页面重新渲染（尽量不使用这个方法） 1app.$forceUpdate(); app.$refs 用于快速定位到模板的某个 html 节点，或某个组件实例 app.$isServer 用于服务端渲染判断 app.$watch 一下写法和在 options 中定义 watch 都可以监听到 foo 的变化： 1234const unWatch = app.$watch('foo', (newVal, oldVal) =&gt; &#123; console.log('newVal: ', newVal); console.log('oldVal: ', oldVal);&#125;) 区别在于，通过 app.$watch 定义，需要手动进行销毁（比如路由跳转后），该方法回调一个 unWatch 方法，用于手动回收： 1unWatch(); 而定义在 options 中，Vue 会自动回收销毁 app.$on app.$emit app.$once app.$on 和 app.$emit 都只能同时作用于一个 Vue 对象，才会生效，Vue 对象 app 监听了 test 事件，那么必须由对象 app 自己触发事件 test，才会被监听到，而且不会像 dom 事件一样冒泡 1234app.$on('test', (a, b) =&gt; &#123; console.log('$on test emitted: ', a, b);&#125;);app.$emit('test', 1, 2); app.$once 只会触发一次 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899 app.$once('test', (a, b) =&gt; &#123; console.log('$once test emitted', a, b); &#125;) ``` #### 2. Vue 的生命周期方法![vue-lifecycle](vue-core-api/component-lifecycle.png)* `beforeCreate` 和 `created` beforeCreate、created 方法在 new Vue(`options`) 的过程中一定会被执行，而且 beforeCreate、created 两个生命周期中都不能进行 dom 操作，因为这时 Vue 还没有生成最终的根节点，一般操作 dom 相关的动作，要放在 mounted 中。操作数据相关的动作一般放在 created 中，但不要放在 beforeCreate 中，因为 beforeCreate 还没有进行数据的 reactive 响应式相关的初始化 * `beforeMount` 和 `mounted` mounted 之后会把当前 Vue 生成的 html 挂载到 dom 上，即：把生成的 html 把 `&lt;div id=\"root\"&gt;&lt;/div&gt;` 替换掉。如果在 options 中不指定 el，则不会执行 beforeMount、mounted。在 mounted 之后，所有生命周期中拿到的根节点，都是 mounted 之后产生的节点 beforeCreate、created、beforeMount、mounted 在整个组件生命周期中只会被调用一次，而且 beforeMount、mounted 在服务端渲染中不会被调用，因为这两个生命周期都和操作 dom 有关 * `beforeUpdate` 和 `updated` 只要响应式处理过的数据有变化，页面就会响应重新渲染，这两个方法也都会被重复调用 * `activated` 和 `deactivated` 与组件的 keep-alive 相关* `beforeDestroy` 和 `destroyed` beforeDestroy 中会解除所有事件监听以及所有的 watch 监听 * `render` render 方法第一次将在 beforeMount 和 mounted 之间执行，之后都将在 beforeUpdate 和 updated 之间执行 * `renderError` 只有在开发环境才会触发，并且只能用于当前组件，它的子组件的错误无法捕获到 * `errorCaptured` 不管是开发环境还是正式环境，只要捕获到当前组件，或者它的子组件渲染发生错误时，都会触发，除非子组件阻止了事件冒泡#### 3. Vue 的数据绑定```javascriptimport Vue from 'vue';var globalVar = '111'; // eslint-disable-linenew Vue(&#123; el: '#root', template: ` &lt;div :id=\"id\" :class=\"activeClass\" @click=\"handleClick\"&gt; &lt;div :class=\"&#123;active: isActive&#125;\"&gt; 模板中只能做用一行语句就能有结果的表达式 &#123;&#123;isActive ? \"active\" : \"not active\"&#125;&#125; &lt;/div&gt; &lt;div :class=\"[&#123;active: isActive&#125;, inactiveClass]\"&gt; 模板中可以访问 Vue 默认的全局变量白名单，但自己定义的全局变量不能访问（如 globalVar） &#123;&#123;Date.now()&#125;&#125; &lt;/div&gt; &lt;div :style=\"[activeStyle, inactiveStyle]\"&gt; 对 data 中定义的 HTML，Vue 会自动进行转移成纯的字符串，为了防止注入攻击 要以 v-html 方式使用 &lt;div v-html=\"html\"&gt;&lt;/div&gt; &lt;div&gt;&#123;&#123;getJoinedArr(arr)&#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; `, data: &#123; id: 'aaa', activeClass: 'active', inactiveClass: 'inactive', activeStyle: &#123; color: 'red', // Vue 会给需要加前缀的样式属性名自动加上前缀 // 该属性用于消除浏览默认样式 appearance: 'none' &#125;, inactiveStyle: &#123; // html 中所写样式的 '-' 分隔符格式转化成驼峰格式 fontSize: '15px' &#125;, isActive: true, arr: [1, 2, 3], html: '&lt;span&gt;123&lt;/span&gt;' &#125;, methods: &#123; handleClick () &#123; console.log('##### handleClick #####'); &#125;, // 建议这种情况使用 computed， // 因为 computed 会先判断数据源是否有变化，再来渲染页面，效率会更高 getJoinedArr (arr = []) &#123; return arr.join('、'); &#125; &#125;&#125;); 4. computed 和 watch computed: 定义在 computed 中的方法，可以像访问变量的属性一样去调用，这是因为 Vue 会对 fullName 声明 get 和 set 方法，并且会对计算的结果做缓存，只有当 computed 中所依赖的响应式变量（即：firstName 或 lastName）发生变化，才会重新计算。而如果是在 methods 中做同样的逻辑计算，那么只要 data 或者 props 中任何一个属性有变化，都会重新渲染页面，从而重新调用 methods 中的方法。所有定义在 computed 中性能消耗会更小，特别是计算的逻辑很复杂的情况 12345const computed = &#123; fullName () &#123; return `$&#123;this.firstName&#125; $&#123;this.lastName&#125;`; &#125;&#125;; 也可以通过显示地定义 get 和 set 方法来定义 computed get: 获取 fullName 的值时会做哪些计算set: 给 fullName 赋值时会做哪些计算。不建议使用 set，因为将多个值通过计算组装成一个值很简单，但把一个值拆解成多个值是很麻烦的，而且很容易出问题，造成死循环 123456789101112const computed = &#123; fullName: &#123; get () &#123; return `$&#123;this.firstName&#125; $&#123;this.lastName&#125;`; &#125;, set (val) &#123; const names = val.split(' '); this.firstName = names[0]; this.lastName = names[1]; &#125; &#125;&#125;; watch: watch 中可以对 data props computed 中的响应式变量进行监听，只要其发生变化，就执行一些逻辑处理 只有当 data.age 发生变化才会执行 age 方法中的逻辑 12345const watch = &#123; age (newVal, oldVal) &#123; this.notYoung = newVal &gt;= 30; &#125;&#125; 也可以通过以下方式定义 watch： immediate：表示是否立即执行 作用：如果 age 的初始值本身已经大于 30，那么按照上面👆的形式定义 watch，第一次 handler 方法是不会执行的，只有当 age 再次发生变化才会执行，而 immediate 就是用来解决这个问题的 12345678const watch = &#123; age: &#123; handler (newVal, oldVal) &#123; this.notYoung = newVal &gt;= 30; &#125;, immediate: true &#125;&#125;; deep：深度观察 作用：如果 other 是一个对象，那么只是修改 other 中属性的值，而不是直接给 other 重新赋值，那么按照上面👆的形式定义 watch，handle 方法也是不会执行的。但如果设置 deep: true，那么 other 不管哪个属性变化，handle 方法都会执行 原理：Vue 会逐层遍历 other 所有的属性，并为每个属性增加一个响应式监听，所有只要 other 任何层级的任何属性发生变化，都会执行 handle 方法 12345678const watch = &#123; other: &#123; handler (newVal, oldVal) &#123; console.log('other changed'); &#125;, deep: true &#125;&#125;; 但这种写法对性能开销较大，建议使用以下👇写法 12345const watch = &#123; 'other.hobby' () &#123; console.log('other.hobby changed'); &#125;&#125;; 5. Vue 的原生指令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596import Vue from 'vue';new Vue(&#123; el: '#root', template: ` &lt;div&gt; &lt;div&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt; &lt;div v-text=\"text\"&gt;aaa&lt;/div&gt; &lt;div v-html=\"html\"&gt;aaa&lt;/div&gt; &lt;div&gt;类似于 dom 的 innerText 和 innerHtml&lt;/div&gt; &lt;br/&gt; &lt;div v-pre&gt;将内容当做纯文本显示: &#123;&#123;text&#125;&#125;&lt;/div&gt; &lt;br/&gt; &lt;div v-once=\"text\"&gt; &lt;div&gt;数据绑定的内容只执行一次，之后数据变化后也不会随之变化，&lt;/div&gt; &lt;div&gt;用处：展示静态内容时，通过声明 v-once 减少性能开销，&lt;/div&gt; &lt;div&gt;v-once 中的所有节点，Vue 都不会将其和虚拟 dom 进行检测对比，从而减少重新渲染的开销。&lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div v-show=\"active\"&gt;根据 show 的值，给 div 增加 display 的样式&lt;/div&gt; &lt;div v-if=\"active\"&gt;根据 show 的值，决定是否把 div 添加到 dom 流中&lt;/div&gt; &lt;div v-else&gt;else content&lt;/div&gt; &lt;div&gt;如果只是单纯想控制元素的显示和隐藏，那么最好使用 v-show，&lt;/div&gt; &lt;div&gt;因为 v-if 会对 dom 节点进行增删操作，导致重绘和重新排版，有性能的影响。&lt;/div&gt; &lt;br/&gt; &lt;div&gt;v-for 中的 key 是用来做数据缓存的，需要保证唯一，&lt;/div&gt; &lt;div&gt;当数据源发生变化时，Vue 会根据每个 item 的 key 在缓存中寻找，是否已经存在 key，&lt;/div&gt; &lt;div&gt;如果已经存在，则直接在缓存中复用 item 的 dom 节点，而不重新创建新的 dom 节点，提高渲染性能。&lt;/div&gt; &lt;div&gt;注：不要用 idx 作为 key，因为数组元素的顺序和具体值没有什么直接关系，&lt;/div&gt; &lt;div&gt;用 idx 作为 key，在数据源发生增、删之后，可能会导致产生错误的缓存。&lt;/div&gt; &lt;ul&gt; &lt;li v-for=\"(item, idx) in arr\" :key=\"item\"&gt;index: &#123;&#123;idx&#125;&#125;, value: &#123;&#123;item&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li v-for=\"(val, key, idx) in obj\"&gt;key: &#123;&#123;key&#125;&#125;, value: &#123;&#123;val&#125;&#125;, index: &#123;&#123;idx&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; &lt;div v-on:click=\"divClicked\"&gt; &lt;div&gt;v-on 做的事情是：&lt;/div&gt; &lt;div&gt;如果 v-on 加在普通的 dom 节点元素上，则会通过 document.addEventListener 给该节点增加事件监听&lt;/div&gt; &lt;div&gt;如果 v-on 加在 Vue 组件上，实际上是在 Vue 对象实例上绑定一个事件&lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div&gt; &lt;input type=\"text\" v-model=\"text\"&gt; &lt;input type=\"text\" v-model.number=\"number\"&gt; &lt;input type=\"text\" v-model.trim=\"text\"&gt; &lt;input type=\"text\" v-model.lazy=\"text\"&gt; &lt;input type=\"checkbox\" v-model=\"active\"&gt; &lt;/div&gt; &lt;br/&gt; &lt;div&gt; &lt;div&gt;每个 checkbox 所绑定的值是固定的，checkbox 的 active/inactive 变化后:&lt;/div&gt; &lt;div&gt;active -&gt; inactive: 数据移除值为当前 checkbox 所绑定值的元素&lt;/div&gt; &lt;div&gt;inactive -&gt; active: 数据 push 一个值为当前 checkbox 所绑定值的元素&lt;/div&gt; &lt;input type=\"checkbox\" value=\"a\" v-model=\"arr\"&gt; &lt;input type=\"checkbox\" value=\"b\" v-model=\"arr\"&gt; &lt;input type=\"checkbox\" value=\"c\" v-model=\"arr\"&gt; &lt;/div&gt; &lt;br/&gt; &lt;div&gt; &lt;input type=\"radio\" value=\"one\" v-model=\"picked\"&gt; &lt;input type=\"radio\" value=\"two\" v-model=\"picked\"&gt; &lt;/div&gt; &lt;/div&gt; `, data: &#123; text: 'text', number: 0, html: '&lt;span&gt;html&lt;/span&gt;', active: true, arr: ['a', 'b', 'c'], obj: &#123; a: 'a', b: 'b', c: 'c' &#125;, picked: 'one' &#125;, watch: &#123; text () &#123; console.log('##### text changed #####', this.text); &#125;, arr () &#123; console.log('##### arr changed #####', this.arr); &#125;, picked () &#123; console.log('##### arr picked #####', this.picked); &#125; &#125;, methods: &#123; divClicked () &#123; console.log('##### divClicked #####'); &#125; &#125;&#125;); 6. Vue 组件6.1 组件的定义 组件的全局注册和局部注册 123456789101112const component = &#123; template: `&lt;div&gt;This is a component&lt;/div&gt;`&#125;;// 全局注册：Vue.component('CompOne', component); // 组件名称命名规则：大驼峰命名法（因为 component 本身也是一个 Vue 的 class）// 局部注册new Vue(&#123; component: &#123;CompOne: component&#125;, template: `&lt;comp-one&gt;&lt;/comp-one&gt;` // 组件使用命名规则：全小写 '-' 分割&#125;); 组件 data 定义： 不是通过 new Vue({options}) 创建的组件，data 必须以 function 形式返回，否则当一个父组件有多个相同类型的子组件时，所有的子组件都会引用同一份数据源，并且 Vue 会报警告： [Vue warn]: The “data” option should be a function that returns a per-instance value in component definitions. 12345678const component = &#123; template: `&lt;div&gt;This is a component&lt;/div&gt;`, data () &#123; return &#123; a: 'foo' &#125; &#125; &#125;; 组件 props 定义： 1234567891011121314151617181920212223242526272829303132const component = &#123; template: `&lt;div @click=\"handleChange\"&gt;This is a component&lt;/div&gt;`, props: &#123; active: &#123; type: Boolean, // 类型 required: true, // 是否必填 default: true, // 默认值 validator (val) &#123; // 自定义校验 return typeof val === 'boolean' &#125; &#125;, propOne: Number, // 属性命名规则：小驼峰命名法 // 如果是对象，则必须以 function 形式返回一个对象 // 原因和不是通过 new Vue() 创建的组件，data 必须以 function 形式返回一样 // 即当两个相同类型的子组件的一个对象 props 引用了父组件的同一个值，那么就会相互影响 obj () &#123; return &#123; default: &#123;a: 'foo'&#125; &#125; &#125; &#125;, // 也可以通过数组定义 props，但相对不严谨 // props: ['active', 'propOne'], // mounted () &#123; // this.propOne = 1; // &#125;, methods: &#123; handleChange () &#123; this.$emit('change') &#125; &#125; &#125;; Vue 不推荐在子组件中更改 props 的值，如果直接更改，会报警告： [Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “propOne” 如果要更改，可以通过子组件 $emit 事件，回调到父组件进行更改 1234567891011121314151617181920new Vue(&#123; el: '#root', components: &#123; Comp: component &#125;, template: ` &lt;div&gt; // 传递 props 时，使用全小写 '-' 分割 &lt;comp :active=\"true\" :prop-one=\"propA\" @change=\"handleChange\"&gt;&lt;/comp&gt; &lt;/div&gt; `, data: &#123; propA: 1 &#125;, methods: &#123; handleChange () &#123; this.propA += 1; &#125; &#125;&#125;); 6.2 组件的继承1234567891011121314151617181920212223242526const component = &#123; template: ` &lt;div&gt; &lt;input type=\"text\" v-model=\"text\"&gt; &lt;span v-show=\"active\"&gt;show if active&lt;/span&gt; &lt;span @click=\"handleChange\"&gt;&#123;&#123;propOne&#125;&#125;&lt;/span&gt; &lt;/div&gt; `, props: &#123; active: Boolean, propOne: String &#125;, data () &#123; return &#123; text: 0 &#125;; &#125;, mounted () &#123; console.log('##### component mounted #####'); &#125;, methods: &#123; handleChange () &#123; this.$emit('change'); &#125; &#125;&#125;; 以上 component 配置只是一个普通的 object，如何让配置生成 Vue 对象，除了通过 new Vue({component: {Comp: component}}) 以外，还可以对 Vue 进行继承，生成 Vue 对象： 12345678910111213141516171819202122232425import Vue from 'vue';const CompVue = Vue.extend(component);new CompVue(&#123; el: '#root', // 通过 props 无法将外部属性传入 // props: &#123; // propOne: 'props 1' // &#125;, // 需要通过 propsData 传入 propsData: &#123; propOne: 'propsData 1' &#125;, // 可以传入 data 与 CompVue 默认的 data 合并覆盖 data () &#123; return &#123; text: 3 &#125;; &#125;, // 生命周期方法执行顺序：先执行 CompVue 默认配置中的生命周期方法，再执行 CompVue 实例中的生命周期方法 mounted () &#123; console.log('##### instance mounted #####'); &#125;&#125;); CompVue 是 Vue 的一个子类，通过 new Vue(options) 初始化而来 Vue 对象，是默认内置配置下生成的，没有 data、props 等相关配置，通过 new CompVue() 生成的 Vue 对象会默认带有 data、props、methods 配置 也可以通过以下这种方式实现对 component 的继承： 123456789101112131415161718192021import Vue from 'vue';const component2 = &#123; extends: component, data () &#123; return &#123; text: 1 &#125;; &#125;, mounted () &#123; console.log('##### instance mounted #####'); &#125;&#125;;new Vue(&#123; el: '#root', components: &#123; Comp: component2 &#125;, template: `&lt;comp prop-one=\"123\"&gt;&lt;/comp&gt;`&#125;); 使用场景：当我们开发好一个组件，可能比较公用，很多项目都会用到，而且功能描述比较泛，使用起来需要传入很多的配置项，而在某个具体项目中，很多参数都使用它的默认值，不需要传入，或者需要在原有基础上扩展一些特定的属性，这时候就可以通过 extend 的方式，在原有组件基础上，继承扩展出我们需要的组件，而不需要从头开始写一个新的组件 6.3 组件自定义绑定1234567891011121314151617181920212223242526272829303132333435import Vue from 'vue';// 通过 v-model 实现父子组件的双向绑定const component = &#123; template: ` &lt;div&gt; &lt;input type=\"text\" :value=\"value1\" @input=\"handleInput\"&gt; &lt;/div&gt; `, model: &#123; prop: 'value1', // 指定双向绑定 prop 的 key event: 'change' // 指定回调时间的方法名 &#125;, props: ['value', 'value1'], methods: &#123; handleInput (event) &#123; // this.$emit('input', event.target.value); this.$emit('change', event.target.value); &#125; &#125;&#125;;new Vue(&#123; el: '#root', components: &#123; Comp: component &#125;, // template: `&lt;comp :value=\"value\" @input=\"value = arguments[0]\"&gt;&lt;/comp&gt;`, template: `&lt;comp v-model=\"value\"&gt;&lt;/comp&gt;`, data () &#123; return &#123; value: '123' &#125;; &#125;&#125;); 6.4 组件高级属性 slot 和 slot-scope 在子组件中可以通过指定不同插槽名，定义多个插槽： 1234567891011121314151617181920212223242526import Vue from 'vue';const component = &#123; template: ` &lt;div :style=\"style\"&gt; &lt;div class=\"header\"&gt; &lt;slot name=\"header\"&gt;&lt;/slot&gt; &lt;/div&gt; &lt;div class=\"body\"&gt; &lt;slot name=\"body\"&gt;&lt;/slot&gt; &lt;/div&gt; &lt;div class=\"footer\"&gt; &lt;slot name=\"footer\"&gt;&lt;/slot&gt; &lt;/div&gt; &lt;/div&gt; `, data () &#123; return &#123; style: &#123; width: '200px', height: '200px', border: '1px solid #aaa' &#125; &#125;; &#125;&#125;; 在父组件中根据插槽名传入不同的插槽： 1234567891011121314151617import Vue from 'vue';new Vue(&#123; el: '#root', components: &#123; CompOne: component &#125;, template: ` &lt;div&gt; &lt;comp-one&gt; &lt;div slot=\"header\"&gt;slot header&lt;/div&gt; &lt;div slot=\"body\"&gt;slot body&lt;/div&gt; &lt;div slot=\"footer\"&gt;slot footer&lt;/div&gt; &lt;/comp-one&gt; &lt;/div&gt; ` &#125;); 带作用域的插槽：在子组件插槽中定义内部属性，父组件通过 slot-scop 可以访问到子组件的属性： 12345678910111213141516171819202122import Vue from 'vue';const component = &#123; template: ` &lt;div :style=\"style\"&gt; &lt;slot :slotValue1=\"slotProp\" :slotValue2=\"slotData\"&gt;&lt;/slot&gt; &lt;/div&gt; `, props: &#123; slotProp: String &#125;, data () &#123; return &#123; style: &#123; width: '200px', height: '200px', border: '1px solid #aaa' &#125;, slotData: 'abc' &#125;; &#125;&#125;; 通过指定 “props” 作为 key，将插槽中的属性包装成 object，这样父组件就可以通过 props[key] 来访问插槽中的属性 12345678910111213141516171819202122232425import Vue from 'vue';new Vue(&#123; el: '#root', components: &#123; CompOne: component &#125;, template: ` &lt;div&gt; &lt;comp-one :slot-prop=\"value1\"&gt; &lt;div slot-scope=\"props\"&gt; &lt;div&gt;slotValue1: &#123;&#123;props.slotValue1&#125;&#125;&lt;/div&gt; &lt;div&gt;slotValue2: &#123;&#123;props.slotValue2&#125;&#125;&lt;/div&gt; &lt;div&gt;selfValue: &#123;&#123;value2&#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/comp-one&gt; &lt;/div&gt; `, data () &#123; return &#123; value1: 'def', value2: 'ijk' &#125;; &#125;&#125;); provide 和 inject 对于跨多级的组件中，父组件和子组件的参数传递，可以通过在父组件中定义 provide，子组件中定义 inject 来实现 孙组件： 123456789const GrandsonComponent = &#123; template: '&lt;div&gt;child component&lt;/div&gt;', inject: ['const', 'grandparent', 'value'], mounted () &#123; console.log('##### const #####', this.const); // xyz console.log('##### grandparent #####', this.grandparent); // undefined console.log('##### value #####', this.value); // 在父组件中报错 &#125;&#125;; 子组件： 12345678const ChildComponent = &#123; components: &#123; GrandsonComponent &#125;, template: ` &lt;grandson-component&gt;&lt;/grandson-component&gt; `&#125;; 父组件： 通过 provide: {} 的方式定义 provide，在子孙组件中是拿不到父组件的 this 的，只能接收到传入的常量，因为这样初始化 provide 对象，其实 Vue 本身还没有初始化完成，所有访问不了 this 123456789101112131415161718192021import Vue from 'vue';new Vue(&#123; el: '#root', components: &#123; ChildComponent &#125;, provide: &#123; const: 'xyz', grandparent: this, value: this.value // 报错 &#125;, template: ` &lt;child-component&gt;&lt;/child-component&gt; `, data () &#123; return &#123; value: 'abc' &#125;; &#125;&#125;); 孙组件： 123456789const GrandsonComponent = &#123; template: '&lt;div&gt;child component: &#123;&#123;value&#125;&#125;&lt;/div&gt;', inject: ['const', 'grandparent', 'value'], mounted () &#123; console.log('##### const #####', this.const); // xyz console.log('##### grandparent #####', this.grandparent); // 父组件 Vue 实例 console.log('##### value #####', this.value); // abc &#125;&#125;; 父组件： 通过方法返回定义 provide，才子孙组件中接收到父组件的 this，但是父组件中的响应式变量，不会在子孙组件中响应式地变化 1234567891011121314151617181920212223import Vue from 'vue';new Vue(&#123; el: '#root', components: &#123; ChildComponent &#125;, provide () &#123; return &#123; const: 'xyz', grandparent: this, value: this.value &#125;; &#125;, template: ` &lt;child-component&gt;&lt;/child-component&gt; `, data () &#123; return &#123; value: 'abc' &#125;; &#125;&#125;); 孙组件： 123456789const GrandsonComponent = &#123; template: '&lt;div&gt;child component: &#123;&#123;value&#125;&#125;&lt;/div&gt;', inject: ['const', 'grandparent', 'data'], mounted () &#123; console.log('##### const #####', this.const); // xyz console.log('##### grandparent #####', this.grandparent); // 父组件 Vue 实例 console.log('##### value #####', this.data); // &#123;value: 父组件的 value&#125; &#125;&#125;; 父组件： 只有在 provide 中重定义 get() 方法，让子孙组件每次获取到的 value 都是其最新值，从而实现响应式。这也是 Vue 实现响应式的最基本原理 1234567891011121314151617181920212223242526272829import Vue from 'vue';new Vue(&#123; el: '#root', components: &#123; ChildComponent &#125;, provide () &#123; const data = &#123;&#125;; Object.defineProperty(data, 'value', &#123; get: () =&gt; this.value, enumerable: true &#125;); return &#123; const: 'xyz', grandparent: this, data &#125;; &#125;, template: ` &lt;child-component&gt;&lt;/child-component&gt; &lt;input type=\"text\" v-model=\"value\"/&gt; `, data () &#123; return &#123; value: 'abc' &#125;; &#125;&#125;); 6.5 组件 render function","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"Vue 配置 ESLint 规则","slug":"tech/vue/vue-eslint","date":"2020-02-10T15:56:02.016Z","updated":"2020-05-16T02:59:30.087Z","comments":true,"path":"2020/02/10/tech/vue/vue-eslint/","link":"","permalink":"http://yoursite.com/2020/02/10/tech/vue/vue-eslint/","excerpt":"","text":"安装必要依赖包12345npm install eslint --save-devnpm install babel-eslint --save-devnpm install eslint-friendly-formatter --save-dev &#x2F;&#x2F; 指定错误报告的格式规范插件npm install eslint-loader --save-dev &#x2F;&#x2F; 启动 Vue cli 时就可以检测npm install eslint-plugin-vue --save-dev &#x2F;&#x2F; 符合 Vue 项目推荐的代码风格 .eslintrc.js 文件在项目根目录下创建规则验证文件 .eslintrc.js，以下为 Vue 推荐规则配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192module.exports = &#123; root: true, // 根文件，不会往上一层查找 parserOptions: &#123; parser: 'babel-eslint', sourceType: 'module' &#125;, env: &#123; browser: true, node: true, es6: true, &#125;, extends: ['plugin:vue/recommended', 'eslint:recommended'], // add your custom rules here //it is base on https://github.com/vuejs/eslint-config-vue rules: &#123; \"vue/max-attributes-per-line\": [2, &#123; \"singleline\": 10, \"multiline\": &#123; \"max\": 1, \"allowFirstLine\": false &#125; &#125;], \"vue/name-property-casing\": [\"error\", \"PascalCase\"], 'accessor-pairs': 2, 'arrow-spacing': [2, &#123; 'before': true, 'after': true &#125;], 'block-spacing': [2, 'always'], 'brace-style': [2, '1tbs', &#123; 'allowSingleLine': true &#125;], 'camelcase': [0, &#123; 'properties': 'always' &#125;], 'comma-dangle': [2, 'never'], 'comma-spacing': [2, &#123; 'before': false, 'after': true &#125;], 'comma-style': [2, 'last'], 'constructor-super': 2, 'curly': [2, 'multi-line'], 'dot-location': [2, 'property'], 'eol-last': 2, 'eqeqeq': [2, 'allow-null'], 'generator-star-spacing': [2, &#123; 'before': true, 'after': true &#125;], 'handle-callback-err': [2, '^(err|error)$'], 'indent': [2, 2, &#123; 'SwitchCase': 1 &#125;], 'jsx-quotes': [2, 'prefer-single'], 'key-spacing': [2, &#123; 'beforeColon': false, 'afterColon': true &#125;], 'keyword-spacing': [2, &#123; 'before': true, 'after': true &#125;], 'new-cap': [2, &#123; 'newIsCap': true, 'capIsNew': false &#125;], 'new-parens': 2, 'no-array-constructor': 2, 'no-caller': 2, 'no-console': 'off', 'no-class-assign': 2, 'no-cond-assign': 2, 'no-const-assign': 2, 'no-control-regex': 0, 'no-delete-var': 2, 'no-dupe-args': 2, 'no-dupe-class-members': 2, 'no-dupe-keys': 2, 'no-duplicate-case': 2, 'no-empty-character-class': 2, 'no-empty-pattern': 2, 'no-eval': 2, 'no-ex-assign': 2, 'no-extend-native': 2, 'no-extra-bind': 2, 'no-extra-boolean-cast': 2, 'no-extra-parens': [2, 'functions'], 'no-fallthrough': 2, 'no-floating-decimal': 2, 'no-func-assign': 2, 'no-implied-eval': 2, 'no-inner-declarations': [2, 'functions'], 'no-invalid-regexp': 2, 'no-irregular-whitespace': 2, 'no-iterator': 2, 'no-label-var': 2, 'no-labels': [2, &#123; 'allowLoop': false, 'allowSwitch': false &#125;], 'no-lone-blocks': 2, 'no-mixed-spaces-and-tabs': 2, 'no-multi-spaces': 2, 'no-multi-str': 2, 'no-multiple-empty-lines': [2, &#123; 'max': 1 &#125;], 'no-native-reassign': 2, 'no-negated-in-lhs': 2, 'no-new-object': 2, 'no-new-require': 2, 'no-new-symbol': 2, 'no-new-wrappers': 2, 'no-obj-calls': 2, 'no-octal': 2, 'no-octal-escape': 2, 'no-path-concat': 2, 'no-proto': 2, 'no-redeclare': 2, 'no-regex-spaces': 2, 'no-return-assign': [2, 'except-parens'], 'no-self-assign': 2, 'no-self-compare': 2, 'no-sequences': 2, 'no-shadow-restricted-names': 2, 'no-spaced-func': 2, 'no-sparse-arrays': 2, 'no-this-before-super': 2, 'no-throw-literal': 2, 'no-trailing-spaces': 2, 'no-undef': 0, 'no-undef-init': 2, 'no-unexpected-multiline': 2, 'no-unmodified-loop-condition': 2, 'no-unneeded-ternary': [2, &#123; 'defaultAssignment': false &#125;], 'no-unreachable': 2, 'no-unsafe-finally': 2, 'no-unused-vars': 0, 'no-useless-call': 2, 'no-useless-computed-key': 2, 'no-useless-constructor': 2, 'no-useless-escape': 0, 'no-whitespace-before-property': 2, 'no-with': 2, 'one-var': [2, &#123; 'initialized': 'never' &#125;], 'operator-linebreak': [2, 'after', &#123; 'overrides': &#123; '?': 'before', ':': 'before' &#125; &#125;], 'padded-blocks': [2, 'never'], 'quotes': [2, 'single', &#123; 'avoidEscape': true, 'allowTemplateLiterals': true &#125;], 'semi': [2, 'never'], 'semi-spacing': [2, &#123; 'before': false, 'after': true &#125;], 'space-before-blocks': [2, 'always'], 'space-before-function-paren': [2, 'never'], 'space-in-parens': [2, 'never'], 'space-infix-ops': 2, 'space-unary-ops': [2, &#123; 'words': true, 'nonwords': false &#125;], 'spaced-comment': [2, 'always', &#123; 'markers': ['global', 'globals', 'eslint', 'eslint-disable', '*package', '!', ','] &#125;], 'template-curly-spacing': [2, 'never'], 'use-isnan': 2, 'valid-typeof': 2, 'wrap-iife': [2, 'any'], 'yield-star-spacing': [2, 'both'], 'yoda': [2, 'never'], 'prefer-const': 2, 'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0, 'object-curly-spacing': [2, 'always', &#123; objectsInObjects: false &#125;], 'array-bracket-spacing': [2, 'never'] &#125;&#125; .eslintignore 文件根目录下创建 .eslintignore 文件，添加规则忽略验证的文件配置 123456&#x2F;build&#x2F;&#x2F;config&#x2F;&#x2F;node_modules&#x2F;&#x2F;dist&#x2F;&#x2F;*.js&#x2F;test&#x2F;unit&#x2F;coverage&#x2F; 添加 webpack 配置webpack.base.config.js 中添加规则： 1234567891011121314rules:[ &#x2F;&#x2F; 加到最前面 &#123; test: &#x2F;\\.(js|vue)$&#x2F;, loader: &#39;eslint-loader&#39;, enforce: &#39;pre&#39;, include: [resolve(&#39;src&#39;)], options: &#123; formatter: require(&#39;eslint-friendly-formatter&#39;), emitWarning: true &#125; &#125;, ....] 在 IDE 中开启 ESLint ESLint 规则级别 off 或者 0：不启用这个规则 warn 或者 1：校验不通过会报警告 error 或者 2：校验不通过会报错 ESLint 规则屏蔽123456// 下面的代码会关闭所有规则/* eslint-disable */ console.log('foo'); /* eslint-enable */ 12345// 下面的代码会关闭某一行的所有规则console.log('foo'); // eslint-disable-line // eslint-disable-next-lineconsole.log('foo'); 12345// 下面的代码在某一行关闭指定的规则console.log('foo'); // eslint-disable-line no-alert // eslint-disable-next-line no-alertconsole.log('foo'); package.json 中添加 scripts123456&#123; \"scripts\": &#123; \"lint\": \"eslint --ext .js --ext .jsx --ext .vue src/\", \"lint-fix\": \"eslint --fix --ext .js --ext .jsx --ext .vue src/\" &#125;&#125; npm run lint 检验 src/ 目录下文件是否符合 ESLint 验证规则 npm run lint-fix 将 src/ 目录下不符合 ESLint 验证规则的代码进行格式化","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"TypeScript 常用语法","slug":"tech/typeScript/ts-base","date":"2020-02-05T08:11:40.837Z","updated":"2020-02-05T08:11:40.837Z","comments":true,"path":"2020/02/05/tech/typeScript/ts-base/","link":"","permalink":"http://yoursite.com/2020/02/05/tech/typeScript/ts-base/","excerpt":"","text":"基础类型TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。 布尔值最基本的数据类型就是简单的 true/false 值，在JavaScript 和 TypeScript 里叫做 boolean（其它语言中也一样）。 1let isDone: boolean = false 数字和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015中引入的二进制和八进制字面量。 1234let decLiteral: number = 20let hexLiteral: number = 0x14let binaryLiteral: number = 0b10100let octalLiteral: number = 0o24 字符串JavaScript 程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 string 表示文本数据类型。 和 JavaScript 一样，可以使用双引号（&quot;）或单引号（&#39;）表示字符串。 12let name: string = 'bob'name = 'smith' 你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ `），并且以 ${ expr } 这种形式嵌入表达式 12345let name: string = `Yee`let age: number = 37let sentence: string = `Hello, my name is $&#123; name &#125;.I'll be $&#123; age + 1 &#125; years old next month.` 这与下面定义 sentence 的方式效果相同： 12let sentence: string = 'Hello, my name is ' + name + '.\\n\\n' + 'I\\'ll be ' + (age + 1) + ' years old next month.' 数组TypeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组： 1let list: number[] = [1, 2, 3] 第二种方式是使用数组泛型，Array&lt;元素类型&gt;： 1let list: Array&lt;number&gt; = [1, 2, 3] 元组 Tuple元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string 和 number 类型的元组。 123let x: [string, number]x = ['hello', 10] // OKx = [10, 'hello'] // Error 当访问一个已知索引的元素，会得到正确的类型： 12console.log(x[0].substr(1)) // OKconsole.log(x[1].substr(1)) // Error, 'number' 不存在 'substr' 方法 当访问一个越界的元素，会使用联合类型替代： 12345x[3] = 'world' // OK, 字符串可以赋值给(string | number)类型console.log(x[5].toString()) // OK, 'string' 和 'number' 都有 toStringx[6] = true // Error, 布尔不是(string | number)类型 联合类型是高级主题，我们会在以后的章节里讨论它。 注意：自从 TyeScript 3.1 版本之后，访问越界元素会报错，我们不应该再使用该特性。 枚举enum 类型是对 JavaScript 标准数据类型的一个补充。 像 C# 等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。 12enum Color &#123;Red, Green, Blue&#125;let c: Color = Color.Green 默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1 开始编号： 12enum Color &#123;Red = 1, Green, Blue&#125;let c: Color = Color.Green 或者，全部都采用手动赋值： 12enum Color &#123;Red = 1, Green = 2, Blue = 4&#125;let c: Color = Color.Green 枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字： 1234enum Color &#123;Red = 1, Green, Blue&#125;let colorName: string = Color[2]console.log(colorName) // 显示'Green'因为上面代码里它的值是2 any有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any 类型来标记这些变量： 123let notSure: any = 4notSure = 'maybe a string instead'notSure = false // 也可以是个 boolean 在对现有代码进行改写的时候，any 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。并且当你只知道一部分数据的类型时，any 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据： 123let list: any[] = [1, true, 'free']list[1] = 100 void某种程度上来说，void 类型像是与 any 类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void： 123function warnUser(): void &#123; console.log('This is my warning message')&#125; 声明一个 void 类型的变量没有什么大用，因为你只能为它赋予 undefined 和 null： 1let unusable: void = undefined null 和 undefinedTypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。 和 void 相似，它们的本身的类型用处不是很大： 12let u: undefined = undefinedlet n: null = null 默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。 然而，当你指定了 --strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自，这能避免 很多常见的问题。 也许在某处你想传入一个 string 或 null 或 undefined，你可以使用联合类型 string | null | undefined。 再次说明，稍后我们会介绍联合类型。 nevernever 类型表示的是那些永不存在的值的类型。 例如， never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never 类型，当它们被永不为真的类型保护所约束时。 never 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 never 的子类型或可以赋值给never 类型（除了 never 本身之外）。 即使 any 也不可以赋值给 never。 下面是一些返回 never 类型的函数： 123456789101112131415// 返回never的函数必须存在无法达到的终点function error(message: string): never &#123; throw new Error(message)&#125;// 推断的返回值类型为neverfunction fail() &#123; return error(\"Something failed\")&#125;// 返回never的函数必须存在无法达到的终点function infiniteLoop(): never &#123; while (true) &#123; &#125;&#125; objectobject 表示非原始类型，也就是除 number，string，boolean，symbol，null或undefined 之外的类型。 使用 object 类型，就可以更好的表示像 Object.create 这样的 API。例如： 123456789declare function create(o: object | null): voidcreate(&#123; prop: 0 &#125;) // OKcreate(null) // OKcreate(42) // Errorcreate('string') // Errorcreate(false) // Errorcreate(undefined) // Error 类型断言有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。 类型断言有两种形式。 其一是“尖括号”语法： 123let someValue: any = 'this is a string'let strLength: number = (&lt;string&gt;someValue).length 另一个为 as 语法： 123let someValue: any = 'this is a string'let strLength: number = (someValue as string).length 两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。 变量声明let 和 const 是 JavaScript 里相对较新的变量声明方式。let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。const 是对 let 的一个增强，它能阻止对一个变量再次赋值。 因为 TypeScript 是 JavaScript 的超集，所以它本身就支持 let 和 const。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 var。 如果你已经对 var 声明的怪异之处了如指掌，那么你可以轻松地略过这节。 var 声明在 ES5 的时代，我们都是通过 var 关键字定义JavaScript 变量： 1var a = 10 大家都能理解，这里定义了一个名为 a 值为 10 的变量。 我们也可以在函数内部定义变量： 12345function f() &#123; var message = 'Hello World!' return message&#125; 并且我们也可以在其它函数内部访问相同的变量： 12345678910function f() &#123; var a = 10 return function g() &#123; var b = a + 1 return b &#125;&#125;var g = f()g() // returns 11 上面的例子是一个典型的闭包场景，g 可以获取到 f 函数里定义的 a 变量。 每当 g 被调用时，它都可以访问到 f 里的 a 变量。 即使当 g 在 f 已经执行完后才被调用，它仍然可以访问 a。 作用域规则var 声明有些奇怪的作用域规则。 看下面的例子： 12345678910function f(shouldInitialize) &#123; if (shouldInitialize) &#123; var x = 10 &#125; return x&#125;f(true) // returns '10'f(false) // returns 'undefined' 有些人可能要多看几遍这个例子。 变量 x 是定义在 if 语句里面，但是我们却可以在语句的外面访问它。 这是因为 var 声明的作用域是函数作用域，函数参数也使用函数作用域。 这些作用域规则可能会引发一些错误。 其中之一就是，多次声明同一个变量并不会报错： 1234567891011function sumMatrix(matrix) &#123; var sum = 0 for (var i = 0; i &lt; matrix.length; i++) &#123; var currentRow = matrix[i] for (var i = 0; i &lt; currentRow.length; i++) &#123; sum += currentRow[i] &#125; &#125; return sum&#125; 这里很容易看出一些问题，里层的 for 循环会覆盖变量 i，因为所有 i 都引用相同的函数作用域内的变量。 有经验的开发者们很清楚，这些问题可能在代码审查时漏掉，引发无穷的麻烦。 捕获变量怪异之处猜一下下面的代码会返回什么： 12345for (var i = 0; i &lt; 10; i++) &#123; setTimeout(function() &#123; console.log(i) &#125;, 100 * i)&#125; 答案是，setTimeout 会在若干毫秒的延时后执行一个函数（等待其它代码执行完毕）： 1234567891010101010101010101010 很多 JavaScript 程序员对这种行为已经很熟悉了，但如果你很不解也没有关系，因为你并不是一个人。 大多数人期望输出结果是这样： 123456789100123456789 我们传给 setTimeout 的每一个函数表达式实际上都引用了相同作用域里的同一个 i。 让我们花点时间思考一下这是为什么。 setTimeout 在若干毫秒后执行一个函数，并且是在 for 循环结束后。for 循环结束后，i 的值为 10。 所以当函数被调用的时候，它会打印出 10。 一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时 i 的值： 1234567for (var i = 0; i &lt; 10; i++) &#123; (function(i) &#123; setTimeout(function() &#123; console.log(i) &#125;, 100 * i) &#125;)(i)&#125; 这种奇怪的形式我们已经司空见惯了。 参数 i 会覆盖 for 循环里的 i，但是因为我们起了同样的名字，所以我们不用怎么改 for 循环体里的代码。 let 声明现在你已经知道了 var 存在一些问题，这恰好说明了为什么用 let 语句来声明变量。 除了名字不同外， let 与 var 的写法一致： 1let hello = 'Hello!' 主要的区别不在语法上，而是语义，我们接下来会深入研究。 块作用域当用 let 声明一个变量，它使用的是块作用域。 不同于使用 var 声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 for 循环之外是不能访问的。 123456789101112function f(input: boolean) &#123; let a = 100 if (input) &#123; // OK: 仍然能访问到 a let b = a + 1 return b &#125; // Error: 'b' 在这里不存在 return b&#125; 这里我们定义了 2 个变量 a 和 b。 a 的作用域是 f 函数体内，而 b 的作用域是 if 语句块里。 在 catch 语句里声明的变量也具有同样的作用域规则。 123456789try &#123; throw 'Oh no!';&#125;catch (e) &#123; console.log('Catch it.')&#125;// Error: 'e' 在这里不存在console.log(e) 拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。 它只是用来说明我们不能在 let 语句之前访问它们，幸运的是 TypeScript 可以告诉我们这些信息。 12a++ // TS2448: Block-scoped variable 'a' used before its declaration.let a 注意一点，我们仍然可以在一个拥有块作用域变量被声明前获取它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为 ES2015，现代的运行时会抛出一个错误；然而，现今 TypeScript 是不会报错的。 12345678910function foo() &#123; // okay to capture 'a' return a&#125;// 不能在'a'被声明前调用'foo'// 运行时应该抛出错误foo()let a 关于暂时性死区的更多信息，查看这里 Mozilla Developer Network。 重定义及屏蔽我们提过使用 var 声明时，它不在乎你声明多少次；你只会得到 1 个。 12345678function f(x) &#123; var x var x if (true) &#123; var x &#125;&#125; 在上面的例子里，所有 x 的声明实际上都引用一个相同的x，并且这是完全有效的代码，但这经常会成为 bug 的来源。幸运的是 let 的声明就不会这么宽松了。 12let x = 10let x = 20 // 错误，不能在 1 个作用域里多次声明 x 并不是要求两个均是块级作用域的声明 TypeScript 才会给出一个错误的警告。 12345678function f(x) &#123; let x = 100 // Error: 干扰参数声明&#125;function g() &#123; let x = 100 var x = 100 // Error: 不能同时具有 x 的两个声明&#125; 并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。 1234567891011function f(condition, x) &#123; if (condition) &#123; let x = 100 return x &#125; return x&#125;f(false, 0) // returns 0f(true, 0) // returns 100 在一个嵌套作用域里引入一个新名字的行为称做屏蔽。 它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误。 例如，假设我们现在用 let 重写之前的 sumMatrix 函数。 1234567891011function sumMatrix(matrix: number[][]) &#123; let sum = 0 for (let i = 0; i &lt; matrix.length; i++) &#123; let currentRow = matrix[i] for (let i = 0; i &lt; currentRow.length; i++) &#123; sum += currentRow[i] &#125; &#125; return sum&#125; 这个版本的循环能得到正确的结果，因为内层循环的 i 可以屏蔽掉外层循环的 i。 通常来讲应该避免使用屏蔽，因为我们需要写出清晰的代码。 同时也有些场景适合利用它，你需要好好权衡一下。 块级作用域变量的获取每次进入一个作用域时，let 会创建一个变量的环境。就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。 回想一下前面 setTimeout 的例子，我们最后需要使用立即执行的函数表达式来获取每次 for 循环迭代里的状态。 实际上，我们做的是为获取到的变量创建了一个新的变量环境。 这样做挺痛苦的，但是幸运的是，你不必在 TypeScript 里这样做了。 当 let 声明出现在循环体里时拥有完全不同的行为。不仅是在循环里引入了一个新的变量环境，而且针对每次迭代都会创建这样一个新作用域，这就相当于我们在使用立即执行的函数表达式时做的事。所以在 setTimeout 例子里我们仅使用 let 声明就可以了。 12345for (let i = 0; i &lt; 10 ; i++) &#123; setTimeout(function() &#123; console.log(i) &#125;, 100 * i)&#125; 会输出与预料一致的结果： 123456789100123456789 const 声明const 声明是声明变量的另一种方式。 1const numLivesForCat = 9 它们与 let 声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let 相同的作用域规则，但是不能对它们重新赋值。 这很好理解，它们引用的值是不可变的。 123456789101112131415const numLivesForCat = 9const kitty = &#123; name: 'Kitty', numLives: numLivesForCat&#125;// Errorkitty = &#123; name: 'Tommy', numLives: numLivesForCat&#125;;// OKkitty.name = 'Jerry'kitty.numLives-- 除非你使用特殊的方法去避免，实际上 const 变量的内部状态是可修改的。 幸运的是，TypeScript 允许你将对象的成员设置成只读的。接口一章有详细说明。 let vs. const现在我们有两种作用域相似的声明方式，我们自然会问到底应该使用哪个。与大多数泛泛的问题一样，答案是：依情况而定。 使用最小特权原则，所有变量除了你计划去修改的都应该使用 const。 基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。使用 const 也可以让我们更容易的推测数据的流动。 解构解构数组最简单的解构莫过于数组的解构赋值了： 1234let input = [1, 2]let [first, second] = inputconsole.log(first) // outputs 1console.log(second) // outputs 2 这创建了 2 个命名变量 first 和 second。 相当于使用了索引，但更为方便： 12let first = input[0]let second = input[1] 作用于函数参数： 12345678let input: [number, number] = [1, 2]function f([first, second]: [number, number]) &#123; console.log(first) console.log(second)&#125;f(input) 你可以在数组里使用 ... 语法创建剩余变量： 123let [first, ...rest] = [1, 2, 3, 4]console.log(first) // outputs 1console.log(rest) // outputs [ 2, 3, 4 ] 你也可以忽略你不关心的尾随元素： 12let [first] = [1, 2, 3, 4]console.log(first) // outputs 1 或其它元素： 1let [, second, , fourth] = [1, 2, 3, 4] 对象解构你也可以解构对象： 123456let o = &#123; a: 'foo', b: 12, c: 'bar'&#125;let &#123; a, b &#125; = o 这通过 o.a 和 o.b 创建了 a 和 b 。 注意，如果你不需要 c 你可以忽略它。 你可以在对象里使用 ... 语法创建剩余变量： 12let &#123; a, ...passthrough &#125; = olet total = passthrough.b + passthrough.c.length 属性重命名你也可以给属性以不同的名字： 1let &#123; a: newName1, b: newName2 &#125; = o 这里的语法开始变得混乱。 你可以将 a: newName1 读做 &quot;a 作为 newName1&quot;。 方向是从左到右，好像你写成了以下样子： 12let newName1 = o.alet newName2 = o.b 令人困惑的是，这里的冒号不是指示类型的。 如果你想指定它的类型，仍然需要在其后写上完整的模式。 1let &#123;a, b&#125;: &#123;a: string, b: number&#125; = o 默认值默认值可以让你在属性为 undefined 时使用缺省值： 123function keepWholeObject(wholeObject: &#123; a: string, b?: number &#125;) &#123; let &#123; a, b = 1001 &#125; = wholeObject&#125; 现在，即使 b 为 undefined ， keepWholeObject 函数的变量 wholeObject 的属性 a 和 b 都会有值。 函数声明解构也能用于函数声明。 看以下简单的情况： 1234type C = &#123; a: string, b?: number &#125;function f(&#123; a, b &#125;: C): void &#123; // ...&#125; 但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。 1234function f(&#123; a = '', b = 0 &#125; = &#123;&#125;): void &#123; // ...&#125;f() 上面的代码是一个类型推断的例子，将在后续章节介绍。 其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道 C 的定义有一个 b 可选属性： 123456function f(&#123; a, b = 0 &#125; = &#123; a: '' &#125;): void &#123; // ...&#125;f(&#123; a: 'yes' &#125;) // OK, 默认 b = 0f() // OK, 默认 a: '', b = 0f(&#123;&#125;) // Error, 一旦传入参数则 a 是必须的 要小心使用解构。 从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。 尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。 解构表达式要尽量保持小而简单。 展开123let first = [1, 2]let second = [3, 4]let bothPlus = [0, ...first, ...second, 5] 这会令 bothPlus 的值为 [0, 1, 2, 3, 4, 5]。 展开操作创建了 first 和 second的 一份浅拷贝。 它们不会被展开操作所改变。 你还可以展开对象： 12let defaults = &#123; food: 'spicy', price: '$10', ambiance: 'noisy' &#125;let search = &#123; ...defaults, food: 'rich' &#125; search的值为 { food: &#39;rich&#39;, price: &#39;$10&#39;, ambiance: &#39;noisy&#39; }。 对象的展开比数组的展开要复杂的多。像数组展开一样，它是从左至右进行处理，但结果仍为对象。这就意味着出现在展开对象后面的属性会覆盖前面的属性。因此，如果我们修改上面的例子，在结尾处进行展开的话： 12let defaults = &#123; food: 'spicy', price: '$10', ambiance: 'noisy' &#125;let search = &#123; food: 'rich', ...defaults &#125; 那么，defaults 里的 food 属性会重写 food: &#39;rich&#39;，在这里这并不是我们想要的结果。 接口TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。 接口初探下面通过一个简单示例来观察接口是如何工作的： 123456function printLabel(labelledObj: &#123; label: string &#125;) &#123; console.log(labelledObj.label)&#125;let myObj = &#123; size: 10, label: 'Size 10 Object' &#125;printLabel(myObj) 类型检查器会查看 printLabel 的调用。printLabel 有一个参数，并要求这个对象参数有一个名为 label 类型为 string 的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，以及其类型是否匹配。 然而，有些时候 TypeScript 却并不会这么宽松，我们下面会稍做讲解。 下面我们重写上面的例子，这次使用接口来描述：必须包含一个label 属性且类型为 string： 12345678910interface LabelledValue &#123; label: string&#125;function printLabel(labelledObj: LabelledValue) &#123; console.log(labelledObj.label)&#125;let myObj = &#123;size: 10, label: 'Size 10 Object'&#125;printLabel(myObj) LabelledValue 接口就好比一个名字，用来描述上面例子里的结构。 它代表了有一个 label 属性且类型为string 的对象。 需要注意的是，我们在这里并不能像在其它语言里一样，说传给 printLabel 的对象实现了这个接口。我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的。 还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。 可选属性接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。例如给函数传入的参数对象中只有部分属性赋值了。 12345678910111213141516171819202122interface Square &#123; color: string, area: number&#125;interface SquareConfig &#123; color?: string width?: number&#125;function createSquare (config: SquareConfig): Square &#123; let newSquare = &#123;color: 'white', area: 100&#125; if (config.color) &#123; newSquare.color = config.color &#125; if (config.width) &#123; newSquare.area = config.width * config.width &#125; return newSquare&#125;let mySquare = createSquare(&#123;color: 'black'&#125;) 带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 ? 符号。 可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 createSquare 里的 color 属性名拼错，就会得到一个错误提示： 1234567891011121314151617181920212223interface Square &#123; color: string, area: number&#125;interface SquareConfig &#123; color?: string; width?: number;&#125; function createSquare(config: SquareConfig): Square &#123; let newSquare = &#123;color: 'white', area: 100&#125; if (config.clor) &#123; // Error: 属性 'clor' 不存在于类型 'SquareConfig' 中 newSquare.color = config.clor &#125; if (config.width) &#123; newSquare.area = config.width * config.width &#125; return newSquare &#125; let mySquare = createSquare(&#123;color: 'black'&#125;) 只读属性一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly 来指定只读属性: 1234interface Point &#123; readonly x: number readonly y: number&#125; 你可以通过赋值一个对象字面量来构造一个 Point。 赋值后，x 和 y 再也不能被改变了。 12let p1: Point = &#123; x: 10, y: 20 &#125;p1.x = 5 // error! TypeScript 具有 ReadonlyArray&lt;T&gt; 类型，它与 Array&lt;T&gt; 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改： 123456let a: number[] = [1, 2, 3, 4]let ro: ReadonlyArray&lt;number&gt; = aro[0] = 12 // error!ro.push(5) // error!ro.length = 100 // error!a = ro // error! 上面代码的最后一行，可以看到就算把整个 ReadonlyArray 赋值到一个普通数组也是不可以的。 但是你可以用类型断言重写： 1a = ro as number[] readonly vs const最简单判断该用 readonly 还是 const 的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用 readonly。 额外的属性检查我们在第一个例子里使用了接口，TypeScript 让我们传入 { size: number; label: string; } 到仅期望得到 { label: string; } 的函数里, 并且我们已经学过了可选属性。 然而，天真地将这两者结合的话就会像在 JavaScript 里那样搬起石头砸自己的脚。 比如，拿 createSquare 例子来说： 123456789101112131415161718interface SquareConfig &#123; color?: string; width?: number;&#125;function createSquare (config: SquareConfig): &#123; color: string; area: number &#125; &#123; let newSquare = &#123;color: 'white', area: 100&#125; if (config.color) &#123; newSquare.color = config.color &#125; if (config.width) &#123; newSquare.area = config.width * config.width &#125; return newSquare&#125;let mySquare = createSquare(&#123; colour: 'red', width: 100 &#125;) 注意传入 createSquare 的参数拼写为 colour 而不是 color。 在 JavaScript 里，这会默默地失败。 你可能会争辩这个程序已经正确地类型化了，因为 width 属性是兼容的，不存在 color 属性，而且额外的 colour 属性是无意义的。 然而，TypeScript 会认为这段代码可能存在 bug。 对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。 12// error: 'colour' 不存在于类型 'SquareConfig' 中let mySquare = createSquare(&#123; colour: 'red', width: 100 &#125;) 绕开这些检查非常简单。 最简便的方法是使用类型断言： 1let mySquare = createSquare(&#123; width: 100, opacity: 0.5 &#125; as SquareConfig) 然而，最佳的方式是能够添加一个字符串索引签名，前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性。 如果 SquareConfig 带有上面定义的类型的 color 和 width 属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它： 12345interface SquareConfig &#123; color?: string width?: number [propName: string]: any&#125; 我们稍后会讲到索引签名，但在这我们要表示的是SquareConfig 可以有任意数量的属性，并且只要它们不是 color 和 width，那么就无所谓它们的类型是什么。 还有最后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给一个另一个变量： 因为 squareOptions 不会经过额外属性检查，所以编译器不会报错。 12let squareOptions = &#123; colour: 'red', width: 100 &#125;let mySquare = createSquare(squareOptions) 要留意，在像上面一样的简单代码里，你可能不应该去绕开这些检查。 对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大多数额外属性检查错误是真正的bug。也就是说你遇到了额外类型检查出的错误，你应该去审查一下你的类型声明。 在这里，如果支持传入 color 或 colour 属性到 createSquare，你应该修改 SquareConfig 定义来体现出这一点。 函数类型接口能够描述 JavaScript 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。 为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。 123interface SearchFunc &#123; (source: string, subString: string): boolean&#125; 这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。 12345let mySearch: SearchFuncmySearch = function(source: string, subString: string): boolean &#123; let result = source.search(subString); return result &gt; -1&#125; 对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。 比如，我们使用下面的代码重写上面的例子： 12345let mySearch: SearchFuncmySearch = function(src: string, sub: string): boolean &#123; let result = src.search(sub); return result &gt; -1&#125; 函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。 如果你不想指定类型，TypeScript 的类型系统会推断出参数类型，因为函数直接赋值给了 SearchFunc 类型变量。 函数的返回值类型是通过其返回值推断出来的（此例是 false 和 true）。 如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 SearchFunc 接口中的定义不匹配。 12345let mySearch: SearchFuncmySearch = function(src, sub) &#123; let result = src.search(sub) return result &gt; -1&#125; 可索引的类型与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如 a[10] 或 ageMap[&#39;daniel&#39;]。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看一个例子： 12345678interface StringArray &#123; [index: number]: string&#125;let myArray: StringArraymyArray = ['Bob', 'Fred']let myStr: string = myArray[0] 上面例子里，我们定义了 StringArray 接口，它具有索引签名。 这个索引签名表示了当用 number 去索引 StringArray 时会得到 string 类型的返回值。 TypeScript 支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number 来索引时，JavaScript 会将它转换成string 然后再去索引对象。 也就是说用 100（一个 number）去索引等同于使用&#39;100&#39;（一个 string ）去索引，因此两者需要保持一致。 123456789101112class Animal &#123; name: string&#125;class Dog extends Animal &#123; breed: string&#125;// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!interface NotOkay &#123; [x: number]: Animal [x: string]: Dog&#125; 字符串索引签名能够很好的描述 dictionary 模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 obj.property 和 obj[&#39;property&#39;] 两种形式都可以。 下面的例子里， name 的类型与字符串索引类型不匹配，所以类型检查器给出一个错误提示： 12345interface NumberDictionary &#123; [index: string]: number; length: number; // 可以，length是number类型 name: string // 错误，`name`的类型与索引类型返回值的类型不匹配&#125; 最后，你可以将索引签名设置为只读，这样就防止了给索引赋值： 12345interface ReadonlyStringArray &#123; readonly [index: number]: string;&#125;let myArray: ReadonlyStringArray = ['Alice', 'Bob'];myArray[2] = 'Mallory'; // error! 类类型实现接口与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。 12345678interface ClockInterface &#123; currentTime: Date&#125;class Clock implements ClockInterface &#123; currentTime: Date constructor(h: number, m: number) &#123; &#125;&#125; 你也可以在接口中描述一个方法，在类里实现它，如同下面的 setTime 方法一样： 123456789101112interface ClockInterface &#123; currentTime: Date setTime(d: Date)&#125;class Clock implements ClockInterface &#123; currentTime: Date setTime(d: Date) &#123; this.currentTime = d &#125; constructor(h: number, m: number) &#123; &#125;&#125; 接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。 类静态部分与实例部分的区别当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误： 123456789interface ClockConstructor &#123; new (hour: number, minute: number)&#125;// errorclass Clock implements ClockConstructor &#123; currentTime: Date constructor(h: number, m: number) &#123; &#125;&#125; 这里因为当一个类实现了一个接口时，只对其实例部分进行类型检查。constructor 存在于类的静态部分，所以不在检查的范围内。 看下面的例子，我们定义了两个接口， ClockConstructor 为构造函数所用和 ClockInterface 为实例方法所用。 为了方便我们定义一个构造函数 createClock，它用传入的类型创建实例。 1234567891011121314151617181920212223242526interface ClockConstructor &#123; new (hour: number, minute: number): ClockInterface&#125;interface ClockInterface &#123; tick()&#125;function createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface &#123; return new ctor(hour, minute)&#125;class DigitalClock implements ClockInterface &#123; constructor(h: number, m: number) &#123; &#125; tick() &#123; console.log('beep beep') &#125;&#125;class AnalogClock implements ClockInterface &#123; constructor(h: number, m: number) &#123; &#125; tick() &#123; console.log('tick tock') &#125;&#125;let digital = createClock(DigitalClock, 12, 17)let analog = createClock(AnalogClock, 7, 32) 因为 createClock 的第一个参数是 ClockConstructor 类型，在 createClock(AnalogClock, 7, 32) 里，会检查 AnalogClock 是否符合构造函数签名。 继承接口和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。 1234567891011interface Shape &#123; color: string&#125;interface Square extends Shape &#123; sideLength: number&#125;let square = &#123;&#125; as Squaresquare.color = 'blue'square.sideLength = 10 一个接口可以继承多个接口，创建出多个接口的合成接口。 12345678910111213141516interface Shape &#123; color: string&#125;interface PenStroke &#123; penWidth: number&#125;interface Square extends Shape, PenStroke &#123; sideLength: number&#125;let square = &#123;&#125; as Squaresquare.color = 'blue'square.sideLength = 10square.penWidth = 5.0 混合类型先前我们提过，接口能够描述 JavaScript 里丰富的类型。 因为 JavaScript 其动态灵活的特点，有时你会希望一个对象可以同时具有上面提到的多种类型。 一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。 1234567891011121314151617interface Counter &#123; (start: number): string interval: number reset(): void&#125;function getCounter(): Counter &#123; let counter = (function (start: number) &#123; &#125;) as Counter counter.interval = 123 counter.reset = function () &#123; &#125; return counter&#125;let c = getCounter()c(10)c.reset()c.interval = 5.0 在使用 JavaScript 第三方库的时候，你可能需要像上面那样去完整地定义类型。这门课要重构的 axios 库就是一个很好的例子。 接口继承类当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的 private 和 protected 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。 当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系。例： 1234567891011121314151617181920class Control &#123; private state: any&#125;interface SelectableControl extends Control &#123; select(): void&#125;class Button extends Control implements SelectableControl &#123; select() &#123; &#125;&#125;class TextBox extends Control &#123; select() &#123; &#125;&#125;// Error：“ImageC”类型缺少“state”属性。class ImageC implements SelectableControl &#123; select() &#123; &#125;&#125; 在上面的例子里，SelectableControl 包含了 Control 的所有成员，包括私有成员 state。 因为 state 是私有成员，所以只能够是 Control 的子类们才能实现 SelectableControl 接口。 因为只有 Control 的子类才能够拥有一个声明于Control 的私有成员 state，这对私有成员的兼容性是必需的。 在 Control 类内部，是允许通过 SelectableControl 的实例来访问私有成员 state 的。 实际上，SelectableControl 接口和拥有 select 方法的 Control 类是一样的。Button和 TextBox 类是 SelectableControl 的子类（因为它们都继承自Control 并有 select 方法），但 ImageC 类并不是这样的。 类对于传统的 JavaScript 程序我们会使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员使用这些语法就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从 ECMAScript 2015，也就是 ES6 开始， JavaScript 程序员将能够使用基于类的面向对象的方式。 使用 TypeScript，我们允许开发者现在就使用这些特性，并且编译后的 JavaScript 可以在所有主流浏览器和平台上运行，而不需要等到下个 JavaScript 版本。 基本示例下面看一个使用类的例子： 1234567891011class Greeter &#123; greeting: string constructor(message: string) &#123; this.greeting = message &#125; greet() &#123; return 'Hello, ' + this.greeting &#125;&#125;let greeter = new Greeter('world') 如果你使用过 C# 或 Java，你会对这种语法非常熟悉。 我们声明一个 Greeter 类。这个类有 3 个成员：一个叫做 greeting 的属性，一个构造函数和一个 greet 方法。 你会注意到，我们在引用任何一个类成员的时候都用了 this。 它表示我们访问的是类的成员。 最后一行，我们使用 new 构造了 Greeter 类的一个实例。它会调用之前定义的构造函数，创建一个 Greeter 类型的新对象，并执行构造函数初始化它。 继承在 TypeScript 里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。 看下面的例子： 123456789101112131415class Animal &#123; move(distance: number = 0) &#123; console.log(`Animal moved $&#123;distance&#125;m.`) &#125;&#125;class Dog extends Animal &#123; bark() &#123; console.log('Woof! Woof!') &#125;&#125;const dog = new Dog()dog.bark()dog.move(10) 这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里，Dog 是一个 派生类，它派生自 Animal 基类，通过 extends 关键字。 派生类通常被称作子类，基类通常被称作超类。 因为 Dog 继承了 Animal 的功能，因此我们可以创建一个 Dog 的实例，它能够 bark() 和 move()。 下面我们来看个更加复杂的例子。 1234567891011121314151617181920212223242526272829303132333435class Animal &#123; name: string constructor(name: string) &#123; this.name = name &#125; move(distance: number = 0) &#123; console.log(`$&#123;this.name&#125; moved $&#123;distance&#125;m.`) &#125;&#125;class Snake extends Animal &#123; constructor(name: string) &#123; super(name) &#125; move(distance: number = 5) &#123; console.log('Slithering...') super.move(distance) &#125;&#125;class Horse extends Animal &#123; constructor(name: string) &#123; super(name) &#125; move(distance: number = 45) &#123; console.log('Galloping...') super.move(distance) &#125;&#125;let sam = new Snake('Sammy')let tom: Animal = new Horse('Tommy')sam.move()tom.move(34) 这个例子展示了一些上面没有提到的特性。 这一次，我们使用 extends 关键字创建了 Animal的两个子类：Horse 和 Snake。 与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this 的属性之前，我们 一定要调用 super()。 这个是 TypeScript 强制执行的一条重要规则。 这个例子演示了如何在子类里可以重写父类的方法。Snake类和 Horse 类都创建了 move 方法，它们重写了从 Animal 继承来的 move 方法，使得 move 方法根据不同的类而具有不同的功能。注意，即使 tom 被声明为 Animal 类型，但因为它的值是 Horse，调用 tom.move(34) 时，它会调用 Horse 里重写的方法。 1234Slithering...Sammy moved 5m.Galloping...Tommy moved 34m. 公共，私有与受保护的修饰符默认为 public在上面的例子里，我们可以自由的访问程序里定义的成员。 如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用 public 来做修饰；例如，C# 要求必须明确地使用 public 指定成员是可见的。 在 TypeScript 里，成员都默认为 public。 你也可以明确的将一个成员标记成 public。 我们可以用下面的方式来重写上面的 Animal 类： 123456789class Animal &#123; public name: string public constructor(name: string) &#123; this.name = name &#125; public move(distance: number) &#123; console.log(`$&#123;this.name&#125; moved $&#123;distance&#125;m.`) &#125;&#125; 理解 private当成员被标记成 private 时，它就不能在声明它的类的外部访问。比如： 12345678class Animal &#123; private name: string constructor(name: string) &#123; this.name = name &#125;&#125;new Animal('Cat').name // 错误: 'name' 是私有的. TypeScript 使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。 然而，当我们比较带有 private 或 protected 成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 private 成员，那么只有当另外一个类型中也存在这样一个 private 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 protected 成员也使用这个规则。 下面来看一个例子，更好地说明了这一点： 1234567891011121314151617181920212223242526class Animal &#123; private name: string constructor(name: string) &#123; this.name = name &#125;&#125;class Rhino extends Animal &#123; constructor() &#123; super('Rhino') &#125;&#125;class Employee &#123; private name: string constructor(name: string) &#123; this.name = name &#125;&#125;let animal = new Animal('Goat')let rhino = new Rhino()let employee = new Employee('Bob')animal = rhinoanimal = employee // 错误: Animal 与 Employee 不兼容. 这个例子中有 Animal 和 Rhino 两个类， Rhino 是 Animal 类的子类。 还有一个 Employee 类，其类型看上去与 Animal 是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为 Animal 和 Rhino 共享了来自 Animal 里的私有成员定义 private name: string，因此它们是兼容的。然而 Employee 却不是这样。当把 Employee 赋值给 Animal 的时候，得到一个错误，说它们的类型不兼容。尽管 Employee 里也有一个私有成员 name，但它明显不是 Animal 里面定义的那个。 理解 protectedprotected 修饰符与 private 修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问。例如： 1234567891011121314151617181920212223class Person &#123; protected name: string constructor(name: string) &#123; this.name = name &#125;&#125;class Employee extends Person &#123; private department: string constructor(name: string, department: string) &#123; super(name) this.department = department &#125; getElevatorPitch() &#123; return `Hello, my name is $&#123;this.name&#125; and I work in $&#123;this.department&#125;.` &#125;&#125;let howard = new Employee('Howard', 'Sales')console.log(howard.getElevatorPitch())console.log(howard.name) // error 注意，我们不能在 Person 类外使用 name，但是我们仍然可以通过 Employee 类的实例方法访问，因为 Employee 是由 Person 派生而来的。 构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如： 1234567891011121314151617181920212223class Person &#123; protected name: string protected constructor(name: string) &#123; this.name = name &#125;&#125;// Employee 能够继承 Personclass Employee extends Person &#123; private department: string constructor(name: string, department: string) &#123; super(name) this.department = department &#125; public getElevatorPitch() &#123; return `Hello, my name is $&#123;this.name&#125; and I work in $&#123;this.department&#125;.` &#125;&#125;let howard = new Employee('Howard', 'Sales')let john = new Person('John') // 错误: 'Person' 的构造函数是被保护的. readonly 修饰符你可以使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。 123456789class Person &#123; readonly name: string constructor(name: string) &#123; this.name = name &#125;&#125;let john = new Person('John')john.name = 'peter' 参数属性在上面的例子中，我们必须在 Person 类里定义一个只读成员 name 和一个参数为 name 的构造函数，并且立刻将 name 的值赋给 this.name，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 Person 类的修改版，使用了参数属性： 1234class Person &#123; constructor(readonly name: string) &#123; &#125;&#125; 注意看我们是如何舍弃参数 name，仅在构造函数里使用 readonly name: string 参数来创建和初始化 name 成员。 我们把声明和赋值合并至一处。 参数属性通过给构造函数参数前面添加一个访问限定符来声明。使用 private 限定一个参数属性会声明并初始化一个私有成员；对于 public 和 protected 来说也是一样。 存取器TypeScript 支持通过 getters/setters 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。 下面来看如何把一个简单的类改写成使用 get 和 set。 首先，我们从一个没有使用存取器的例子开始。 123456789class Employee &#123; fullName: string&#125;let employee = new Employee()employee.fullName = 'Bob Smith'if (employee.fullName) &#123; console.log(employee.fullName)&#125; 我们可以设置 fullName，因为它是 public 的，有时候当我们去修改它的时候触发一些额外逻辑，存取器就派上用场了。 下面这个版本里，我们先检查用户密码是否正确，然后再允许其修改员工信息。我们把对 fullName 的直接访问改成了可以检查密码的 set 方法。 我们也加了一个 get 方法，让上面的例子仍然可以工作。 123456789101112131415161718192021222324let passcode = 'secret passcode'class Employee &#123; private _fullName: string get fullName(): string &#123; return this._fullName &#125; set fullName(newName: string) &#123; if (passcode &amp;&amp; passcode == 'secret passcode') &#123; this._fullName = newName &#125; else &#123; console.log('Error: Unauthorized update of employee!') &#125; &#125;&#125;let employee = new Employee()employee.fullName = 'Bob Smith'if (employee.fullName) &#123; console.log(employee.fullName)&#125; 我们可以修改一下密码，来验证一下存取器是否是工作的。当密码不对时，会提示我们没有权限去修改员工。 对于存取器有下面几点需要注意的： 首先，存取器要求你将编译器设置为输出 ECMAScript 5 或更高。 不支持降级到 ECMAScript 3。其次，只带有 get 不带有 set 的存取器自动被推断为 readonly。这在从代码生成 .d.ts 文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。 静态属性到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。 我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用 static 定义 origin，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在 origin 前面加上类名。 如同在实例属性上使用 this.xxx 来访问属性一样，这里我们使用 Grid.xxx 来访问静态属性。 123456789101112131415161718192021class Grid &#123; static origin = &#123;x: 0, y: 0&#125; scale: number constructor (scale: number) &#123; this.scale = scale &#125; calculateDistanceFromOrigin(point: &#123;x: number; y: number&#125;) &#123; let xDist = point.x - Grid.origin.x let yDist = point.y - Grid.origin.y return Math.sqrt(xDist * xDist + yDist * yDist) * this.scale &#125;&#125;let grid1 = new Grid(1.0) // 1x scalelet grid2 = new Grid(5.0) // 5x scaleconsole.log(grid1.calculateDistanceFromOrigin(&#123;x: 3, y: 4&#125;))console.log(grid2.calculateDistanceFromOrigin(&#123;x: 3, y: 4&#125;)) 抽象类抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节。 abstract 关键字是用于定义抽象类和在抽象类内部定义抽象方法。 123456abstract class Animal &#123; abstract makeSound(): void move(): void &#123; console.log('roaming the earth...') &#125;&#125; 抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含 abstract 关键字并且可以包含访问修饰符。 12345678910111213141516171819202122232425262728293031323334abstract class Department &#123; name: string constructor(name: string) &#123; this.name = name &#125; printName(): void &#123; console.log('Department name: ' + this.name) &#125; abstract printMeeting(): void // 必须在派生类中实现&#125;class AccountingDepartment extends Department &#123; constructor() &#123; super('Accounting and Auditing') // 在派生类的构造函数中必须调用 super() &#125; printMeeting(): void &#123; console.log('The Accounting Department meets each Monday at 10am.') &#125; generateReports(): void &#123; console.log('Generating accounting reports...') &#125;&#125;let department: Department // 允许创建一个对抽象类型的引用department = new Department() // 错误: 不能创建一个抽象类的实例department = new AccountingDepartment() // 允许对一个抽象子类进行实例化和赋值department.printName()department.printMeeting()department.generateReports() // 错误: 方法在声明的抽象类中不存在 高级技巧构造函数当你在 TypeScript 里声明了一个类的时候，实际上同时声明了很多东西。首先就是类的实例的类型。 1234567891011121314class Greeter &#123; static standardGreeting = 'Hello, there' greeting: string constructor(message: string) &#123; this.greeting = message &#125; greet() &#123; return 'Hello, ' + this.greeting &#125;&#125;let greeter: Greetergreeter = new Greeter('world')console.log(greeter.greet()) 这里，我们写了 let greeter: Greeter，意思是 Greeter 类的实例的类型是 Greeter。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。 我们也创建了一个叫做构造函数的值。 这个函数会在我们使用 new 创建类实例的时候被调用。 下面我们来看看，上面的代码被编译成JavaScript后是什么样子的： 12345678910111213var Greeter = /** @class */ (function () &#123; function Greeter(message) &#123; this.greeting = message; &#125; Greeter.prototype.greet = function () &#123; return 'Hello, ' + this.greeting; &#125;; Greeter.standardGreeting = 'Hello, there'; return Greeter;&#125;());var greeter;greeter = new Greeter('world');console.log(greeter.greet()); 上面的代码里，var Greeter 将被构造函数赋值。 当我们调用 new 并执行了这个函数后，便会得到一个类的实例。这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有实例部分与静态部分这两个部分。 让我们稍微改写一下这个例子，看看它们之间的区别： 123456789101112131415161718192021222324252627class Greeter &#123; static standardGreeting = 'Hello, there' greeting: string constructor(message?: string) &#123; this.greeting = message &#125; greet() &#123; if (this.greeting) &#123; return 'Hello, ' + this.greeting &#125; else &#123; return Greeter.standardGreeting &#125; &#125;&#125;let greeter: Greetergreeter = new Greeter()console.log(greeter.greet())let greeterMaker: typeof Greeter = GreetergreeterMaker.standardGreeting = 'Hey there'let greeter2: Greeter = new greeterMaker()console.log(greeter2.greet()) 这个例子里， greeter1 与之前看到的一样。 我们实例化 Greeter类，并使用这个对象。 与我们之前看到的一样。 再之后，我们直接使用类。 我们创建了一个叫做 greeterMaker 的变量。这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取 Greeter 类的类型，而不是实例的类型。或者更确切的说，”告诉我 Greeter 标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker 上使用 new，创建 Greeter 的实例。 把类当做接口使用如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。 12345678910class Point &#123; x: number y: number&#125;interface Point3d extends Point &#123; z: number&#125;let point3d: Point3d = &#123;x: 1, y: 2, z: 3&#125; 函数函数是 JavaScript 应用程序的基础，它帮助你实现抽象层，模拟类，信息隐藏和模块。在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。 基本示例和 JavaScript 一样，TypeScript 函数可以创建有名字的函数和匿名函数。你可以随意选择适合应用程序的方式，不论是定义一系列 API 函数还是只使用一次的函数。 通过下面的例子可以迅速回想起这两种 JavaScript 中的函数： 123456789// 命名函数function add(x, y) &#123; return x + y&#125;// 匿名函数let myAdd = function(x, y) &#123; return x + y;&#125; 在 JavaScript 里，函数可以使用函数体外部的变量。 当函数这么做时，我们说它‘捕获’了这些变量。 至于为什么可以这样做以及其中的利弊超出了本文的范围，但是深刻理解这个机制对学习 JavaScript 和 TypeScript 会很有帮助。 12345let z = 100function addToZ(x, y) &#123; return x + y + z&#125; 函数类型为函数定义类型让我们为上面那个函数添加类型： 1234567function add(x: number, y: number): number &#123; return x + y&#125;let myAdd = function(x: number, y: number): number &#123; return x + y&#125; 我们可以给每个参数添加类型之后再为函数本身添加返回值类型。TypeScript 能够根据返回语句自动推断出返回值类型。 书写完整函数类型现在我们已经为函数指定了类型，下面让我们写出函数的完整类型。 1234let myAdd: (x: number, y: number) =&gt; number = function(x: number, y: number): number &#123; return x + y&#125; 函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。这个名字只是为了增加可读性。 我们也可以这么写： 1234let myAdd: (baseValue: number, increment: number) =&gt; number = function(x: number, y: number): number &#123; return x + y&#125; 只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。 第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用(=&gt;)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为 void 而不能留空。 函数的类型只是由参数类型和返回值组成的。 函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成 API 的一部分。 推断类型尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，TypeScript 编译器会自动识别出类型： 12345678let myAdd = function(x: number, y: number): number &#123; return x + y&#125;let myAdd: (baseValue: number, increment: number) =&gt; number = function(x, y) &#123; return x + y&#125; 这叫做“按上下文归类”，是类型推论的一种。它帮助我们更好地为程序指定类型。 可选参数和默认参数TypeScript 里的每个函数参数都是必须的。 这不是指不能传递 null 或 undefined 作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。 1234567function buildName(firstName: string, lastName: string) &#123; return firstName + ' ' + lastName;&#125;let result1 = buildName('Bob') // Error, 参数过少let result2 = buildName('Bob', 'Adams', 'Sr.'); // Error, 参数过多let result3 = buildName('Bob', 'Adams'); // OK JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 undefined。 在TypeScript 里我们可以在参数名旁使用 ? 实现可选参数的功能。 比如，我们想让 lastName 是可选的： 12345678910function buildName(firstName: string, lastName?: string): string &#123; if (lastName) return firstName + ' ' + lastName else return firstName&#125;let result1 = buildName('Bob'); // 现在正常了let result2 = buildName('Bob', 'Adams', 'Sr.') // Error, 参数过多let result3 = buildName('Bob', 'Adams') // OK 可选参数必须跟在必须参数后面。 如果上例我们想让 firstName 是可选的，那么就必须调整它们的位置，把 firstName 放在后面。 在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 undefined 时。 它们叫做有默认初始化值的参数。 让我们修改上例，把lastName 的默认值设置为 &quot;Smith&quot;。 12345678function buildName(firstName: string, lastName = 'Smith'): string &#123; return firstName + ' ' + lastName&#125;let result1 = buildName('Bob') // 返回 \"Bob Smith\"let result2 = buildName('Bob', undefined) // 正常, 同样 \"Bob Smith\"let result3 = buildName('Bob', 'Adams', 'Sr.') // 错误, 参数过多let result4 = buildName('Bob', 'Adams') // OK 与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值。 例如，我们重写最后一个例子，让 firstName 是带默认值的参数： 12345678function buildName(firstName = 'Will', lastName: string): string &#123; return firstName + ' ' + lastName&#125;let result1 = buildName('Bob') // Error, 参数过少let result2 = buildName('Bob', 'Adams', \"Sr.\") // Error, 参数过多let result3 = buildName('Bob', 'Adams') // OK， 返回 \"Bob Adams\"let result4 = buildName(undefined, 'Adams') // OK， 返回 \"Will Adams\" 剩余参数必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 arguments 来访问所有传入的参数。 在 TypeScript 里，你可以把所有参数收集到一个变量里： 12345function buildName(firstName: string, ...restOfName: string[]): string &#123; return firstName + ' ' + restOfName.join(' ')&#125;let employeeName = buildName('Joseph', 'Samuel', 'Lucas', 'MacKinzie') 剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ ...）后面给定的名字，你可以在函数体内使用这个数组。 这个省略号也会在带有剩余参数的函数类型定义上使用到： 12345function buildName(firstName: string, ...restOfName: string[]): string &#123; return firstName + ' ' + restOfName.join(' ')&#125;let buildNameFun: (fname: string, ...rest: string[]) =&gt; string = buildName this学习如何在 JavaScript 里正确使用 this 就好比一场成年礼。由于 TypeScript 是 JavaScript 的超集，TypeScript 程序员也需要弄清 this 工作机制并且当有 bug 的时候能够找出错误所在。 幸运的是，TypeScript 能通知你错误地使用了 this 的地方。 如果你想了解 JavaScript 里的 this是如何工作的，那么首先阅读 Yehuda Katz 写的 Understanding JavaScript Function Invocation and “this”。 Yehuda 的文章详细的阐述了 this 的内部工作原理，因此我们这里只做简单介绍。 this 和箭头函数JavaScript里，this 的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。 下面看一个例子： 1234567891011121314151617let deck = &#123; suits: ['hearts', 'spades', 'clubs', 'diamonds'], cards: Array(52), createCardPicker: function() &#123; return function() &#123; let pickedCard = Math.floor(Math.random() * 52) let pickedSuit = Math.floor(pickedCard / 13) return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125; &#125; &#125;&#125;let cardPicker = deck.createCardPicker()let pickedCard = cardPicker()console.log('card: ' + pickedCard.card + ' of ' + pickedCard.suit) 可以看到 createCardPicker 是个函数，并且它又返回了一个函数。如果我们尝试运行这个程序，会发现它并没有输出而是报错了。 因为 createCardPicker 返回的函数里的 this 被设置成了 global 而不是 deck 对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this 视为 global。 为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的deck 对象。 我们需要改变函数表达式来使用 ECMAScript 6 箭头语法。 箭头函数能保存函数创建时的 this 值，而不是调用时的值： 123456789101112131415161718let deck = &#123; suits: ['hearts', 'spades', 'clubs', 'diamonds'], cards: Array(52), createCardPicker: function() &#123; // 注意：这里使用箭头函数 return () =&gt; &#123; let pickedCard = Math.floor(Math.random() * 52) let pickedSuit = Math.floor(pickedCard / 13) return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125; &#125; &#125;&#125;let cardPicker = deck.createCardPicker()let pickedCard = cardPicker()console.log('card: ' + pickedCard.card + ' of ' + pickedCard.suit) this 参数在上述的例子中 this.suits[pickedSuit] 的类型为 any，这是因为 this 来自对象字面量里的函数表达式。 修改的方法是，提供一个显式的 this 参数。 this 参数是个假的参数，它出现在参数列表的最前面： 123function f(this: void) &#123; // 确保“this”在此独立函数中不可用&#125; 让我们往例子里添加一些接口，Card 和 Deck，让类型重用能够变得清晰简单些： 123456789101112131415161718192021222324252627282930interface Card &#123; suit: string card: number&#125;interface Deck &#123; suits: string[] cards: number[] createCardPicker (this: Deck): () =&gt; Card&#125;let deck: Deck = &#123; suits: ['hearts', 'spades', 'clubs', 'diamonds'], cards: Array(52), // NOTE: 函数现在显式指定其被调用方必须是 deck 类型 createCardPicker: function (this: Deck) &#123; return () =&gt; &#123; let pickedCard = Math.floor(Math.random() * 52) let pickedSuit = Math.floor(pickedCard / 13) return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125; &#125; &#125;&#125;let cardPicker = deck.createCardPicker()let pickedCard = cardPicker()console.log('card: ' + pickedCard.card + ' of ' + pickedCard.suit) 现在 TypeScrip t知道 createCardPicker 期望在某个 Deck 对象上调用。也就是说 this 是 Deck 类型的，而非 any。 this 参数在回调函数里你可以也看到过在回调函数里的 this 报错，当你将一个函数传递到某个库函数里稍后会被调用时。 因为当回调被调用的时候，它们会被当成一个普通函数调用，this 将为 undefined。 稍做改动，你就可以通过 this 参数来避免错误。 首先，库函数的作者要指定 this 的类型： 123interface UIElement &#123; addClickListener(onclick: (this: void, e: Event) =&gt; void): void&#125; this: void 意味着 addClickListener 期望传入的 onclick 方法不需要 this 1234567891011121314151617181920interface UIElement &#123; addClickListener (onclick: (this: void, e: Event) =&gt; void): void&#125;class Handler &#123; type: string onClickBad (this: Handler, e: Event) &#123; this.type = e.type &#125;&#125;let h = new Handler()let uiElement: UIElement = &#123; addClickListener () &#123; &#125;&#125;uiElement.addClickListener(h.onClickBad) // error! 指定了 this 类型后，你显式声明 onClickBad 必须在 Handler 的实例上调用。 然后 TypeScript 会检测到 addClickListener 要求函数带有 this: void。 改变 this 类型来修复这个错误： 12345678910111213141516class Handler &#123; type: string; onClickBad (this: void, e: Event) &#123; console.log('clicked!') &#125;&#125;let h = new Handler()let uiElement: UIElement = &#123; addClickListener () &#123; &#125;&#125;uiElement.addClickListener(h.onClickBad) 因为 onClickGood 指定了 this 类型为 void，因此传递 addClickListener 是合法的。 当然了，这也意味着不能使用 this.info。 如果你两者都想要，你不得不使用箭头函数了： 123456class Handler &#123; type: string onClickGood = (e: Event) =&gt; &#123; this.type = e.type &#125;&#125; 这是可行的因为箭头函数不会捕获 this，所以你总是可以把它们传给期望 this: void 的函数。 重载JavaScript 本身是个动态语言。JavaScript 里函数根据传入不同的参数而返回不同类型的数据的场景是很常见的。 12345678910111213141516171819202122let suits = ['hearts', 'spades', 'clubs', 'diamonds']function pickCard(x): any &#123; if (Array.isArray(x)) &#123; let pickedCard = Math.floor(Math.random() * x.length) return pickedCard &#125; else if (typeof x === 'number') &#123; let pickedSuit = Math.floor(x / 13) return &#123; suit: suits[pickedSuit], card: x % 13 &#125; &#125;&#125;let myDeck = [ &#123; suit: 'diamonds', card: 2 &#125;, &#123; suit: 'spades', card: 10 &#125;, &#123; suit: 'hearts', card: 4 &#125;]let pickedCard1 = myDeck[pickCard(myDeck)];console.log('card: ' + pickedCard1.card + ' of ' + pickedCard1.suit)let pickedCard2 = pickCard(15)console.log('card: ' + pickedCard2.card + ' of ' + pickedCard2.suit) pickCard 方法根据传入参数的不同会返回两种不同的类型。如果传入的是代表纸牌的对象数组，函数作用是从中抓一张牌。如果用户想抓牌，我们告诉他抓到了什么牌。 但是这怎么在类型系统里表示呢。 方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 下面我们来重载 pickCard 函数。 12345678910111213141516171819202122232425let suits = ['hearts', 'spades', 'clubs', 'diamonds']function pickCard(x: &#123;suit: string; card: number &#125;[]): numberfunction pickCard(x: number): &#123;suit: string; card: number &#125;function pickCard(x): any &#123; if (Array.isArray(x)) &#123; let pickedCard = Math.floor(Math.random() * x.length) return pickedCard &#125; else if (typeof x === 'number') &#123; let pickedSuit = Math.floor(x / 13) return &#123; suit: suits[pickedSuit], card: x % 13 &#125; &#125;&#125;let myDeck = [ &#123; suit: 'diamonds', card: 2 &#125;, &#123; suit: 'spades', card: 10 &#125;, &#123; suit: 'hearts', card: 4 &#125;]let pickedCard1 = myDeck[pickCard(myDeck)];console.log('card: ' + pickedCard1.card + ' of ' + pickedCard1.suit)let pickedCard2 = pickCard(15)console.log('card: ' + pickedCard2.card + ' of ' + pickedCard2.suit) 这样改变后，重载的 pickCard 函数在调用的时候会进行正确的类型检查。 为了让编译器能够选择正确的检查类型，它与 JavaScript 里的处理流程相似。它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。因此，在定义重载的时候，一定要把最精确的定义放在最前面。 注意，function pickCard(x): any 并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象数组，另一个接收数字。 以其它参数调用 pickCard 会产生错误。 泛型软件工程中，我们不仅要创建定义良好且一致的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。 在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。 基础示例下面来创建第一个使用泛型的例子：identity 函数。 这个函数会返回任何传入它的值。 你可以把这个函数当成是 echo 命令。 不用泛型的话，这个函数可能是下面这样： 123function identity(arg: number): number &#123; return arg&#125; 或者，我们使用 any 类型来定义函数： 123function identity(arg: any): any &#123; return arg&#125; 使用 any 类型会导致这个函数可以接收任何类型的 arg 参数，但是这样就丢失了一些信息：传入的类型与返回的类型应该是相同的。如果我们传入一个数字，我们只知道任何类型的值都有可能被返回。 因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里，我们使用了类型变量，它是一种特殊的变量，只用于表示类型而不是值。 123function identity&lt;T&gt;(arg: T): T &#123; return arg&#125; 我们给 identity 添加了类型变量 T。 T 帮助我们捕获用户传入的类型（比如：number），之后我们就可以使用这个类型。 之后我们再次使用了 T 当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。这允许我们跟踪函数里使用的类型的信息。 我们把这个版本的 identity 函数叫做泛型，因为它可以适用于多个类型。 不同于使用 any，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。 我们定义了泛型函数后，可以用两种方法使用。 第一种是，传入所有的参数，包含类型参数： 1let output = identity&lt;string&gt;('myString') 这里我们明确的指定了 T 是 string 类型，并做为一个参数传给函数，使用了 &lt;&gt; 括起来而不是 ()。 第二种方法更普遍。利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定 T 的类型： 1let output = identity('myString') 注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看 myString 的值，然后把 T 设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入 T 的类型，在一些复杂的情况下，这是可能出现的。 使用泛型变量使用泛型创建像 identity 这样的泛型函数时，编译器要求你在函数体必须正确的使用这个通用的类型。 换句话说，你必须把这些参数当做是任意或所有类型。 看下之前 identity 例子： 123function identity&lt;T&gt;(arg: T): T &#123; return arg&#125; 如果我们想打印出 arg 的长度。 我们很可能会这样做： 1234function loggingIdentity&lt;T&gt;(arg: T): T &#123; console.log(arg.length) return arg&#125; 如果这么做，编译器会报错说我们使用了 arg 的 .length 属性，但是没有地方指明 arg 具有这个属性。记住，这些类型变量代表的是任意类型，所以使用这个函数的人可能传入的是个数字，而数字是没有 .length 属性的。 现在假设我们想操作 T 类型的数组而不直接是 T。由于我们操作的是数组，所以 .length 属性是应该存在的。我们可以像创建其它数组一样创建这个数组： 1234function loggingIdentity&lt;T&gt;(arg: T[]): T[] &#123; console.log(arg.length) return arg&#125; 你可以这样理解 loggingIdentity 的类型：泛型函数 loggingIdentity，接收类型参数 T 和参数 arg，它是个元素类型是 T 的数组，并返回元素类型是T 的数组。 如果我们传入数字数组，将返回一个数字数组，因为此时 T 的的类型为 number。 这可以让我们把泛型变量 T 当做类型的一部分使用，而不是整个类型，增加了灵活性。 泛型类型上一节，我们创建了 identity 通用函数，可以适用于不同的类型。 在这节，我们研究一下函数本身的类型，以及如何创建泛型接口。 泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面，像函数声明一样： 12345function identity&lt;T&gt;(arg: T): T &#123; return arg&#125;let myIdentity: &lt;T&gt;(arg: T) =&gt; T = identity 我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。 12345function identity&lt;T&gt;(arg: T): T &#123; return arg&#125;let myIdentity: &lt;U&gt;(arg: U) =&gt; U = identity 我们还可以使用带有调用签名的对象字面量来定义泛型函数： 12345function identity&lt;T&gt;(arg: T): T &#123; return arg&#125;let myIdentity: &#123;&lt;T&gt;(arg: T): T&#125; = identity 这引导我们去写第一个泛型接口了。我们把上面例子里的对象字面量拿出来做为一个接口： 123456789interface GenericIdentityFn &#123; &lt;T&gt;(arg: T): T&#125;function identity&lt;T&gt;(arg: T): T &#123; return arg&#125;let myIdentity: GenericIdentityFn = identity 我们甚至可以把泛型参数当作整个接口的一个参数。 这样我们就能清楚的知道使用的具体是哪个泛型类型（比如： Dictionary&lt;string&gt; 而不只是Dictionary）。这样接口里的其它成员也能知道这个参数的类型了。 123456789interface GenericIdentityFn&lt;T&gt; &#123; (arg: T): T&#125;function identity&lt;T&gt;(arg: T): T &#123; return arg&#125;let myIdentity: GenericIdentityFn&lt;number&gt; = identity 注意，我们的示例做了少许改动。 不再描述泛型函数，而是把非泛型函数签名作为泛型类型一部分。 当我们使用 GenericIdentityFn 的时候，还得传入一个类型参数来指定泛型类型（这里是：number），锁定了之后代码里使用的类型。对于描述哪部分类型属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。 除了泛型接口，我们还可以创建泛型类。 注意，无法创建泛型枚举和泛型命名空间。 泛型类泛型类看上去与泛型接口差不多。 泛型类使用（ &lt;&gt;）括起泛型类型，跟在类名后面。 12345678910class GenericNumber&lt;T&gt; &#123; zeroValue: T add: (x: T, y: T) =&gt; T&#125;let myGenericNumber = new GenericNumber&lt;number&gt;()myGenericNumber.zeroValue = 0myGenericNumber.add = function(x, y) &#123; return x + y &#125; GenericNumber 类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用 number 类型。 也可以使用字符串或其它更复杂的类型。 1234567let stringNumeric = new GenericNumber&lt;string&gt;()stringNumeric.zeroValue = ''stringNumeric.add = function(x, y) &#123; return x + y&#125;console.log(stringNumeric.add(stringNumeric.zeroValue, 'test')) 与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。 我们在类那节说过，类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。 泛型约束我们有时候想操作某类型的一组值，并且我们知道这组值具有什么样的属性。在 loggingIdentity 例子中，我们想访问 arg 的 length 属性，但是编译器并不能证明每种类型都有 length 属性，所以就报错了。 1234function loggingIdentity&lt;T&gt;(arg: T): T &#123; console.log(arg.length) return arg&#125; 相比于操作 any 所有类型，我们想要限制函数去处理任意带有 .length 属性的所有类型。 只要传入的类型有这个属性，我们就允许，就是说至少包含这一属性。为此，我们需要列出对于 T 的约束要求。 我们定义一个接口来描述约束条件，创建一个包含 .length 属性的接口，使用这个接口和 extends 关键字来实现约束： 12345678interface Lengthwise &#123; length: number&#125;function loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T &#123; console.log(arg.length) // OK return arg&#125; 现在这个泛型函数被定义了约束，因此它不再是适用于任意类型： 1loggingIdentity(3); // Error 我们需要传入符合约束类型的值，必须包含必须的属性： 1loggingIdentity(&#123;length: 10, value: 3&#125;) // OK 在泛型约束中使用类型参数你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 obj 上，因此我们需要在这两个类型之间使用约束。 12345678function getProperty&lt;T, K extends keyof T&gt; (obj: T, key: K ) &#123; return obj[key]&#125;let x = &#123;a: 1, b: 2, c: 3, d: 4&#125;getProperty(x, 'a') // okaygetProperty(x, 'm') // error 类型推断这节介绍 TypeScript 里的类型推断。即，类型是在哪里如何被推断的。 基础TypeScript 里，在有些没有明确指出类型的地方，类型推断会帮助提供类型。如下面的例子： 1let x = 3 变量 x 的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。 大多数情况下，类型推断是直截了当地。后面的小节，我们会浏览类型推断时的细微差别。 最佳通用类型有些时候我们需要从几个表达式中推断类型，会使用这些表达式的类型来推断出一个最合适的通用类型。例如， 1let x = [0, 1, null] 为了推断 x 的类型，我们必须考虑所有元素的类型。 这里有两种选择：number 和 null。 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。 由于最终的通用类型取自候选类型，有些时候候选类型共享一个公共结构，但是却没有一个类型能做为所有候选类型的超级类型。例如： 1234567891011class Animal &#123; numLegs: number&#125;class Bee extends Animal &#123;&#125;class Lion extends Animal &#123;&#125;let zoo = [new Bee(), new Lion()] 这里，我们想让 zoo 被推断为 Animal[] 类型，但是这个数组里没有对象是 Animal 类型的，因此不能推断出这个结果。 为了更正，我们可以明确的声明我们期望的类型： 1let zoo: Animal[] = [new Bee(), new Lion()] 如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，(Bee | Lion)[] 上下文类型有些时候，TypeScript 类型推断会按另外一种方式，我们称作“上下文类型”；上下文类型的出现和表达式的类型以及所处的位置相关。比如： 123window.onmousedown = function(mouseEvent) &#123; console.log(mouseEvent.clickTime) // Error&#125; 这个例子会得到一个类型错误，TypeScript 类型检查器使用 window.onmousedown 函数的类型来推断右边函数表达式的类型。 因此，就能推断出 mouseEvent 参数的类型了，所以 mouseEvent 访问了一个不存在的属性，就报错了。 如果上下文类型表达式包含了明确的类型信息，上下文的类型被忽略。重写上面的例子： 123window.onmousedown = function(mouseEvent:any) &#123; console.log(mouseEvent.clickTime) // OK&#125; 这个函数表达式有明确的参数类型注解，上下文类型被忽略。这样的话就不报错了，因为这里不会使用到上下文类型。 上下文类型会在很多情况下使用到。通常包含函数的参数，赋值表达式的右边，类型断言，对象成员，数组字面量和返回值语句。上下文类型也会做为最佳通用类型的候选类型。比如： 12345function createZoo(): Animal[] &#123; return [new Bee(), new Lion()]&#125;let zoo = createZoo() 这个例子里，最佳通用类型有 3 个候选者：Animal，Bee 和 Lion。 其中，Animal 会被做为最佳通用类型。 高级类型交叉类型交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 例如，Person &amp; Loggable 同时是 Person 和 Loggable。 就是说这个类型的对象同时拥有了这两种类型的成员。 我们大多是在混入（mixins）或其它不适合典型面向对象模型的地方看到交叉类型的使用。 （在 JavaScript 里发生这种情况的场合很多！） 下面是如何创建混入的一个简单例子： 12345678910111213141516171819202122232425262728293031function extend&lt;T, U&gt; (first: T, second: U): T &amp; U &#123; let result = &#123;&#125; as T &amp; U for (let id in first) &#123; result[id] = first[id] as any &#125; for (let id in second) &#123; if (!result.hasOwnProperty(id)) &#123; result[id] = second[id] as any &#125; &#125; return result&#125;class Person &#123; constructor (public name: string) &#123; &#125;&#125;interface Loggable &#123; log (): void&#125;class ConsoleLogger implements Loggable &#123; log () &#123; // ... &#125;&#125;var jim = extend(new Person('Jim'), new ConsoleLogger())var n = jim.namejim.log() 联合类型联合类型与交叉类型很有关联，但是使用上却完全不同。 偶尔你会遇到这种情况，一个代码库希望传入 number 或 string 类型的参数。 例如下面的函数： 1234567891011function padLeft(value: string, padding: any) &#123; if (typeof padding === 'number') &#123; return Array(padding + 1).join(' ') + value &#125; if (typeof padding === 'string') &#123; return padding + value &#125; throw new Error(`Expected string or number, got '$&#123;padding&#125;'.`)&#125;padLeft('Hello world', 4) // returns \" Hello world\" padLeft 存在一个问题，padding 参数的类型指定成了 any。 这就是说我们可以传入一个既不是 number 也不是 string 类型的参数，但是 TypeScript 却不报错。 1let indentedString = padLeft('Hello world', true) // 编译阶段通过，运行时报错 为了解决这个问题，我们可以使用 联合类型做为 padding 的参数： 12345function padLeft(value: string, padding: string | number) &#123; // ...&#125;let indentedString = padLeft('Hello world', true) // 编译阶段报错 联合类型表示一个值可以是几种类型之一。我们用竖线（|）分隔每个类型，所以 number | string 表示一个值可以是 number 或 string。 如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员。 1234567891011121314151617interface Bird &#123; fly() layEggs()&#125;interface Fish &#123; swim() layEggs()&#125;function getSmallPet(): Fish | Bird &#123; // ...&#125;let pet = getSmallPet()pet.layEggs() // okaypet.swim() // error 这里的联合类型可能有点复杂：如果一个值的类型是 A | B，我们能够确定的是它包含了 A 和 B 中共有的成员。这个例子里，Fish 具有一个 swim 方法，我们不能确定一个 Bird | Fish 类型的变量是否有 swim方法。 如果变量在运行时是 Bird 类型，那么调用 pet.swim() 就出错了。 类型保护联合类型适合于那些值可以为不同类型的情况。 但当我们想确切地了解是否为 Fish 或者是 Bird 时怎么办？ JavaScript 里常用来区分这 2 个可能值的方法是检查成员是否存在。如之前提及的，我们只能访问联合类型中共同拥有的成员。 12345678let pet = getSmallPet()// 每一个成员访问都会报错if (pet.swim) &#123; pet.swim()&#125; else if (pet.fly) &#123; pet.fly()&#125; 为了让这段代码工作，我们要使用类型断言： 1234567let pet = getSmallPet()if ((pet as Fish).swim) &#123; (pet as Fish).swim()&#125; else &#123; (pet as Bird).fly()&#125; 用户自定义的类型保护这里可以注意到我们不得不多次使用类型断言。如果我们一旦检查过类型，就能在之后的每个分支里清楚地知道 pet 的类型的话就好了。 TypeScript 里的类型保护机制让它成为了现实。 类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个类型谓词： 123function isFish(pet: Fish | Bird): pet is Fish &#123; return (pet as Fish).swim !== undefined&#125; 在这个例子里，pet is Fish 就是类型谓词。谓词为 parameterName is Type 这种形式， parameterName 必须是来自于当前函数签名里的一个参数名。 每当使用一些变量调用 isFish 时，TypeScript 会将变量缩减为那个具体的类型。 123456if (isFish(pet)) &#123; pet.swim()&#125;else &#123; pet.fly()&#125; 注意 TypeScript 不仅知道在 if 分支里 pet 是 Fish 类型；它还清楚在 else 分支里，一定不是 Fish类型而是 Bird 类型。 typeof 类型保护现在我们回过头来看看怎么使用联合类型书写 padLeft 代码。我们可以像下面这样利用类型断言来写： 1234567891011121314151617function isNumber (x: any):x is string &#123; return typeof x === 'number'&#125;function isString (x: any): x is string &#123; return typeof x === 'string'&#125;function padLeft (value: string, padding: string | number) &#123; if (isNumber(padding)) &#123; return Array(padding + 1).join(' ') + value &#125; if (isString(padding)) &#123; return padding + value &#125; throw new Error(`Expected string or number, got '$&#123;padding&#125;'.`)&#125; 然而，你必须要定义一个函数来判断类型是否是原始类型，但这并不必要。其实我们不必将 typeof x === &#39;number&#39;抽象成一个函数，因为 TypeScript 可以将它识别为一个类型保护。 也就是说我们可以直接在代码里检查类型了。 123456789function padLeft (value: string, padding: string | number) &#123; if (typeof padding === 'number') &#123; return Array(padding + 1).join(' ') + value &#125; if (typeof padding === 'string') &#123; return padding + value &#125; throw new Error(`Expected string or number, got '$&#123;padding&#125;'.`)&#125; 这些 typeof 类型保护只有两种形式能被识别：typeof v === &quot;typename&quot; 和 typeof v !== &quot;typename&quot;， &quot;typename&quot;必须是 &quot;number&quot;， &quot;string&quot;，&quot;boolean&quot; 或 &quot;symbol&quot;。 但是 TypeScript 并不会阻止你与其它字符串比较，只是 TypeScript 不会把那些表达式识别为类型保护。 instanceof 类型保护如果你已经阅读了 typeof 类型保护并且对 JavaScript 里的 instanceof 操作符熟悉的话，你可能已经猜到了这节要讲的内容。 instanceof 类型保护是通过构造函数来细化类型的一种方式。我们把之前的例子做一个小小的改造： 1234567891011121314151617181920212223242526272829303132class Bird &#123; fly () &#123; console.log('bird fly') &#125; layEggs () &#123; console.log('bird lay eggs') &#125;&#125;class Fish &#123; swim () &#123; console.log('fish swim') &#125; layEggs () &#123; console.log('fish lay eggs') &#125;&#125;function getRandomPet () &#123; return Math.random() &gt; 0.5 ? new Bird() : new Fish()&#125;let pet = getRandomPet()if (pet instanceof Bird) &#123; pet.fly()&#125;if (pet instanceof Fish) &#123; pet.swim()&#125; 可以为 null 的类型TypeScript 具有两种特殊的类型，null 和 undefined，它们分别具有值 null 和 undefined。我们在基础类型一节里已经做过简要说明。 默认情况下，类型检查器认为 null 与 undefined 可以赋值给任何类型。 null 与 undefined 是所有其它类型的一个有效值。 这也意味着，你阻止不了将它们赋值给其它类型，就算是你想要阻止这种情况也不行。null的发明者，Tony Hoare，称它为价值亿万美金的错误。 --strictNullChecks 标记可以解决此错误：当你声明一个变量时，它不会自动地包含 null 或 undefined。 你可以使用联合类型明确的包含它们： 123456let s = 'foo's = null // 错误, 'null'不能赋值给'string'let sn: string | null = 'bar'sn = null // 可以sn = undefined // error, 'undefined'不能赋值给'string | null' 注意，按照 JavaScript 的语义，TypeScript 会把 null 和 undefined 区别对待。string | null，string | undefined 和 string | undefined | null 是不同的类型。 可选参数和可选属性使用了 --strictNullChecks，可选参数会被自动地加上 | undefined: 1234567function f(x: number, y?: number) &#123; return x + (y || 0)&#125;f(1, 2)f(1)f(1, undefined)f(1, null) // error, 'null' 不能赋值给 'number | undefined' 可选属性也会有同样的处理： 12345678910class C &#123; a: number b?: number&#125;let c = new C()c.a = 12c.a = undefined // error, 'undefined' 不能赋值给 'number'c.b = 13c.b = undefined // okc.b = null // error, 'null' 不能赋值给 'number | undefined' 类型保护和类型断言由于可以为 null 的类型能和其它类型定义为联合类型，那么你需要使用类型保护来去除 null。幸运地是这与在 JavaScript 里写的代码一致： 1234567function f(sn: string | null): string &#123; if (sn === null) &#123; return 'default' &#125; else &#123; return sn &#125;&#125; 这里很明显地去除了 null，你也可以使用短路运算符： 123function f(sn: string | null): string &#123; return sn || 'default'&#125; 如果编译器不能够去除 null 或 undefined，你可以使用类型断言手动去除。语法是添加 ! 后缀： identifier! 从 identifier 的类型里去除了 null 和 undefined： 1234567891011121314151617function broken(name: string | null): string &#123; function postfix(epithet: string) &#123; return name.charAt(0) + '. the ' + epithet // error, 'name' 可能为 null &#125; name = name || 'Bob' return postfix('great')&#125;function fixed(name: string | null): string &#123; function postfix(epithet: string) &#123; return name!.charAt(0) + '. the ' + epithet // ok &#125; name = name || 'Bob' return postfix('great')&#125;broken(null) 本例使用了嵌套函数，因为编译器无法去除嵌套函数的 null（除非是立即调用的函数表达式）。因为它无法跟踪所有对嵌套函数的调用，尤其是你将内层函数做为外层函数的返回值。如果无法知道函数在哪里被调用，就无法知道调用时 name 的类型。 字符串字面量类型字符串字面量类型允许你指定字符串必须具有的确切值。在实际应用中，字符串字面量类型可以与联合类型，类型保护很好的配合。通过结合使用这些特性，你可以实现类似枚举类型的字符串。 1234567891011121314151617type Easing = 'ease-in' | 'ease-out' | 'ease-in-out'class UIElement &#123; animate (dx: number, dy: number, easing: Easing) &#123; if (easing === 'ease-in') &#123; // ... &#125; else if (easing === 'ease-out') &#123; &#125; else if (easing === 'ease-in-out') &#123; &#125; else &#123; // error! 不能传入 null 或者 undefined. &#125; &#125;&#125;let button = new UIElement()button.animate(0, 0, 'ease-in')button.animate(0, 0, 'uneasy') // error 你只能从三种允许的字符中选择其一来做为参数传递，传入其它值则会产生错误。 1Argument of type &#39;&quot;uneasy&quot;&#39; is not assignable to parameter of type &#39;&quot;ease-in&quot; | &quot;ease-out&quot; | &quot;ease-in-out&quot;&#39; 总结那么到这里，我们的 TypeScript 常用语法学习就告一段落了，当然 TypeScript 还有其他的语法我们并没有讲，我们只是讲了 TypeScript 的一些常用语法，你们把这些知识学会已经足以开发一般的应用了。如果你在使用 TypeScript 开发项目中遇到了其他的 TypeScript 语法知识，你可以通过 TypeScript 的官网文档学习。因为学基础最好的方法还是去阅读它的官网文档，敲上面的小例子。其实我们课程的基础知识结构也是大部分参考了官网文档，要记住学习一门技术的基础官网文档永远是最好的第一手资料。","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"http://yoursite.com/tags/TypeScript/"}]},{"title":"初识 TypeScript","slug":"tech/typeScript/ts-init","date":"2020-02-05T04:24:11.047Z","updated":"2020-02-05T04:24:11.047Z","comments":true,"path":"2020/02/05/tech/typeScript/ts-init/","link":"","permalink":"http://yoursite.com/2020/02/05/tech/typeScript/ts-init/","excerpt":"","text":"初识 TypeScriptTypeScript 作为 JavaScript 语言的超集，它为 JavaScript 添加了可选择的类型标注，大大增强了代码的可读性和可维护性。同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健壮的组件。 TypeScript 的特点TypeScript 主要有 3 大特点： 始于JavaScript，归于JavaScript TypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的JavaScript 引擎中。 强大的工具构建大型应用程序 类型允许 JavaScript 开发者在开发 JavaScript 应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。 类型是可选的，类型推断让一些类型的注释使你的代码的静态验证有很大的不同。类型让你定义软件组件之间的接口和洞察现有 JavaScript 库的行为。 先进的 JavaScript TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。 这些特性为高可信应用程序开发时是可用的，但是会被编译成简洁的 ECMAScript3（或更新版本）的JavaScript。 总结TypeScript 在社区的流行度越来越高，它非常适用于一些大型项目，也非常适用于一些基础库，极大地帮助我们提升了开发效率和体验。都 2019 年了，如果你还没有开始学习 TypeScript，那么你可能要落后了哟，所以还等什么，快来和我一起学习并使用 TypeScript 吧，来感受一下它为我们带来的奇妙体验。 安装 TypeScript命令行运行如下命令，全局安装 TypeScript： 1npm install -g typescript 安装完成后，在控制台运行如下命令，检查安装是否成功(3.x)： 1tsc -V 编写第一个 TypeScript 程序在编辑器，将下面的代码输入到 greeter.ts 文件里： 1234567function greeter (person) &#123; return 'Hello, ' + person&#125;let user = 'Yee'console.log(greeter(user)) 编译代码我们使用了 .ts 扩展名，但是这段代码仅仅是 JavaScript 而已。 在命令行上，运行 TypeScript 编译器： 1tsc greeter.ts 输出结果为一个 greeter.js 文件，它包含了和输入文件中相同的 JavsScript 代码。 在命令行上，通过 Node.js 运行这段代码： 1node greeter.js 控制台输出： 1Hello, Yee 类型注解接下来让我们看看 TypeScript 工具带来的高级功能。 给 person 函数的参数添加 : string 类型注解，如下： 1234567function greeter (person: string) &#123; return 'Hello, ' + person&#125;let user = 'Yee'console.log(greeter(user)) TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式。 在这个例子里，我们希望 greeter 函数接收一个字符串参数。 然后尝试把 greeter 的调用改成传入一个数组： 1234567function greeter (person: string) &#123; return 'Hello, ' + person&#125;let user = [0, 1, 2]console.log(greeter(user)) 重新编译，你会看到产生了一个错误： 1error TS2345: Argument of type &#39;number[]&#39; is not assignable to parameter of type &#39;string&#39;. 类似地，尝试删除 greeter 调用的所有参数。 TypeScript 会告诉你使用了非期望个数的参数调用了这个函数。 在这两种情况中，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。 要注意的是尽管有错误，greeter.js 文件还是被创建了。 就算你的代码里有错误，你仍然可以使用 TypeScript。但在这种情况下，TypeScript 会警告你代码可能不会按预期执行。 接口让我们继续扩展这个示例应用。这里我们使用接口来描述一个拥有 firstName 和 lastName 字段的对象。 在 TypeScript 里，只在两个类型内部的结构兼容，那么这两个类型就是兼容的。 这就允许我们在实现接口时候只要保证包含了接口要求的结构就可以，而不必明确地使用 implements 语句。 123456789101112131415interface Person &#123; firstName: string lastName: string&#125;function greeter (person: Person) &#123; return 'Hello, ' + person.firstName + ' ' + person.lastName&#125;let user = &#123; firstName: 'Yee', lastName: 'Huang'&#125;console.log(greeter(user)) 类最后，让我们使用类来改写这个例子。 TypeScript 支持 JavaScript 的新特性，比如支持基于类的面向对象编程。 让我们创建一个 User 类，它带有一个构造函数和一些公共字段。因为类的字段包含了接口所需要的字段，所以他们能很好的兼容。 还要注意的是，我在类的声明上会注明所有的成员变量，这样比较一目了然。 123456789101112131415161718192021222324class User &#123; fullName: string firstName: string lastName: string constructor (firstName: string, lastName: string) &#123; this.firstName = firstName this.lastName = lastName this.fullName = firstName + ' ' + lastName &#125;&#125;interface Person &#123; firstName: string lastName: string&#125;function greeter (person: Person) &#123; return 'Hello, ' + person.firstName + ' ' + person.lastName&#125;let user = new User('Yee', 'Huang')console.log(greeter(user)) 重新运行 tsc greeter.ts，你会看到 TypeScript 里的类只是一个语法糖，本质上还是 JavaScript 函数的实现。 总结到这里，你已经对 TypeScript 有了一个大致的印象，那么下一章让我们来一起学习 TypeScript 的一些常用语法吧。","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"http://yoursite.com/tags/TypeScript/"}]},{"title":"NPM 相关知识点","slug":"tech/tool/npm-all-about","date":"2020-02-04T08:24:47.406Z","updated":"2020-07-19T07:39:20.120Z","comments":true,"path":"2020/02/04/tech/tool/npm-all-about/","link":"","permalink":"http://yoursite.com/2020/02/04/tech/tool/npm-all-about/","excerpt":"","text":"原文链接：you don’t know npm nodejs 社区乃至 Web 前端工程化领域发展到今天，作为 node 自带的包管理工具的 npm 已经成为每个前端开发者必备的工具。但是现实状况是，我们很多人对这个 nodejs 基础设施的使用和了解还停留在：会用 npm install 这里（一言不合就删除整个 node_modules 目录然后重新 install） 当然 npm 能成为现在世界上最大规模的包管理系统，很大程度上确实归功于它足够用户友好，你即使只会执行 install 也不必担心出大问题。但是 npm 的功能远不止于 install 这么简单。一下对 npm 的原理、特性、技巧以及最佳实践做一些归纳总结。 1. npm init我们都知道 package.json 文件是用来定义一个 package 的面熟文件，也知道 npm init 命令用来初始化一个简单的 package.json 文件，执行该命令后中断一次询问 name、version、description 等字段。 1.1 npm init 执行默认行为而如果想要免去一直按 enter，只需要在命令后追加 –yes 参数即可执行默认行为。 npm init --yes 1.2 自定义 npm init 行为npm init 命令的原理并不复杂，调用脚本，输出一个初始化的 package.json 文件。所有相应的，定制 npm init 命令的实现方式也不浮躁，在 Home 目录下创建一个 .npm-init.js 即可，该文件的 module.exports 即为 package.json 的配置内容，需要获取用户输入时，使用 prompt() 方法即可。 例如编写如下 ~/.npm-init.js 12345678910111213141516const desc = prompt('description?', 'A new package...');const bar = prompt('bar?', '');const count = prompt('count?', '100');module.exports = &#123; key: 'value', foo: &#123; bar: bar, count: count &#125;, // process.cwd() 获取当前被执行的 js 文件的工作目录 name: prompt('name?', process.cwd().split('/').pop()), version: prompt('version?', '0.1.0'), description: desc, main: 'index.js'&#125;; 此时在 ~/npm-all-about 目录下执行 npm init 将会生成这样的 package.json: 1234567891011&#123; \"key\": \"value\", \"foo\": &#123; \"bar\": \"\", \"count\": \"100\" &#125;, \"name\": \"npm-all-about\", \"version\": \"0.1.0\", \"description\": \"A new package...\", \"main\": \"index.js\"&#125; 因为 .npm-init.js 是一个常规的模块，所以意味着，除了生成 package.json，我们可以执行任何 node 脚本来完成一些任务。例如通过 fs 创建 README、.eslintrc 等项目必需文件，实现项目脚手架的作用。 2. 依赖包安装依赖管理是 npm 的核心功能，原理是执行 npm install 从 package.json 中的 dependencies、devDependencies 将依赖包安装到当前目录的 ./node_modules 文件夹中。 2.1 package 定义我们知道，要手动安装一个依赖包时，执行 npm install &lt;package&gt; 命令即可。这里的第三个参数 package 通常就是所需要安装的包名，默认配置下 npm 会从默认的源（Registry）中查找该包名对应的报地址，并下载安装。但除了可以简单地指定包名以外，package 还可以是一个执行有效包名的 http url/git url/ 文件夹路径。 阅读 npm 文档，我们会发现 package 的准确订阅，只要符合以下a)到g)其中之一条件，就是一个 package: id 说明 例子 a) 一个包含了程序和描述该程序的 package.json 文件的 文件夹 ./local-module/ b) 一个包含了(a)的 gzip 压缩文件 ./module.tar.gz c) 一个可以下载的(b)资源的 url(通常是 http(s) url) https://registry.npmjs.org/webpack/-/webpack-4.1.0.tgz d) 一个格式为 &lt;name&gt;@&lt;version&gt; 的字符串，可指向 npm 源(通常是官方源 npmjs.org)上已发布的可访问 url，且该 url 满足条件(c) webpack@4.1.0 e) 一个格式为 &lt;name&gt;@&lt;tag&gt; 的字符串，在 npm 源上该 &lt;tag&gt; 指向某个 &lt;version&gt; 得到 &lt;name&gt;@&lt;version&gt;，后者满足条件(d) webpack@latest f) 一个格式为 &lt;name&gt; 的字符串，默认添加 latest 标签所得到的 &lt;name&gt;@latest 满足条件(e) webpack g) 一个 git url，该 url 所指向的代码库满足条件(a) git@github.com:webpack/webpack.git 2.2 安装本地包/远程 git 仓库包上面表格的订阅意味着，我们在共享依赖包时，并不是非要将包发表到 npm 源上才可以提供给用着来安装。这对于私有的不方便 publish 到远程源（即使是私有源），或者需要对某官方源进行改造，但依然需要把包共享出去的场景来说是非常实用的。 场景1: 本地模块引用 nodejs 应用开发中不可避免有模块间调用，例如在实践中经常会把需要被频繁引用的配置模块放到应用根目录；于是在创建了很多层级的目录、文件后，很可能遇到这样的代码： 1const config = require('../../../../config.js'); 除了看上去不直观以外，这样的路径引用也不利于代码的重构。这样的重复代码多了也就意味着是时候把这个模块分离除了供应用中其他模块共享了。例如这个例子里的 config.js 非常适合封装为 package 放到 node_modules 目录下，共享给同应用内其他模块使用。 无需手动开吧文件或者创建软连接到 node_modules 目录，npm 有更优雅的解决方案。 方案： 创建 config 包：新增 config 文件夹；重命名 config.js 为 config/index.js 文件；创建 package.json 定义 config 包。 12345&#123; \"name\": \"config\", \"main\": \"index.js\", \"version\": \"0.1.0\"&#125; 在应用层 package.json 文件中新增依赖项，然后执行 npm install；或直接执行第3步。 12345&#123; \"dependencies\": &#123; \"config\": \"file:./config\" &#125;&#125; (等价于第2步) 直接在应用目录执行 npm install file:./config。 此时，查看 node_modules 目录我们会发现多了一个名为 config 的依赖包，指向上层 config/ 文件夹的软连接。这是因为 npm 识别 file: 协议的 url，得知这个包需要直接从文件系统中获取，会自动创建软连接到 node_modules 中，完成 “安装”过程。 相比手动软连接，我们既不需要关系 windows 和 linux 命令差异，又可以显式地将依赖信息固化到 dependencies 字段中，开发团队其他成员可以执行 npm install 后直接使用。 场景2: 私有 git 共享 package 有些时候，我们一个团队内会有一些代码/公用库需要在团队内不同项目间共享，但可能由于包含了敏感内容，或者代码太烂拿不出手等原因，不方便发布到源上。 这种情况，我们可以简单地将被依赖的包托管在私有的 git 仓库中，然后将 git url 保存到 dependencies 中。npm 会直接调用系统的 git 命令，从 git 仓库拉取包的内容到 node_modules 中。 npm 支持的 git url 格式: 1&lt;protocol&gt;:&#x2F;&#x2F;[&lt;user&gt;[:&lt;password&gt;]@]&lt;hostname&gt;[:&lt;port&gt;][:][&#x2F;]&lt;path&gt;[#&lt;commit-ish&gt; | #semver:&lt;semver&gt;] git 路径后可以使用 # 指定特定的 git branch/commit/tag，也可以 #semver: 指定特定的 semver range。 semver（语义化版本）约定一个包的版本号必须包含3个数字，格式必须为 MAJOR.MINOR.PATCH, 意为 主版本\b号.小版本号.修订版本号. 例如： 1234git+ssh:&#x2F;&#x2F;git@github.com:npm&#x2F;npm.git#v1.0.27git+ssh:&#x2F;&#x2F;git@github.com:npm&#x2F;npm#semver:^5.0git+https:&#x2F;&#x2F;isaacs@github.com&#x2F;npm&#x2F;npm.gitgit:&#x2F;&#x2F;github.com&#x2F;npm&#x2F;npm.git#v1.0.27 场景3: 开源 package 问题修复 使用某个 npm 包时发现他有某个严重的 bug，但或许最初坐着已不再维护代码了，又或许我们工作紧急，没有足够的时间提 issue 给作者再慢慢等作者发布新的修复版本到 npm 源。 此时我们可以手动进入 node_modules 目录下修改相应的内容，也许修改了一行代码就修复了问题。但是这种做法非常不明智！ 首先 node_modules 本身不应该放进版本控制系统，对 node_modules 文件夹中内容的修改不会被记录进 git 提交记录了；其次，就算我们非要反模式，把 node_modules 放进版本控制中，你的修改内容也很容易在下次 team 中某个成员执行 npm install 或 npm update 时被覆盖，而这样的一次提交很可能包含了几十几百个包的更新，你自己所做的修改很容易就被淹没在庞大的 diff 文件列表中了，让版本控制变得非常不合理。 方案： 最好的办法应当是 fork 原作者的 git 库，在自己所属的 repo 下修复问题后，将 dependencies 中相应的依赖更改为自己修复后版本的 git url 即可解决问题。（fork 代码库后，也便于向原作者体检 PR 修复问题。上游代码库修复问题后，再次更新我们的依赖配置也不迟。） 3. npm install 如何工作 – node_modules 目录结构npm install 执行完毕后，我们可以在 node_modules 中看到所有的依赖包。虽然使用者无需关注这个目录里的文件结构细节，只管在业务代码中引用依赖包即可，但了解 node_modules 的内容可以帮我们更好地理解 npm 如何工作，了解 npm2 到 npm5 有哪些变化和该井。 为简单起见，假设应用目录为 app，用两个流行的包 webpack、nconf 作为依赖包做实例说明。并且为了正常安装，使用了 npm2 时期的版本 webpack@1.15.0、nconf@0.8.5。 3.1 npm2npm2 在安装依赖包时，采用简单的递归安装方法。执行 npm install 后，npm2 依次递归安装 webpack、nconf 两个包到 node_modules 中。执行完毕后，我们会看到 ./node_modules 这层目录只含有这两个子目录。 123node_modules&#x2F;├── nconf&#x2F;└── webpack&#x2F; 进入更深一层 nconf 或者 webpack 目录，将看到这两个包各自的 node_modules 中，已经由 npm 递归安装好了自身的依赖包。包括 ./node_modules/webpack/node_modules/webpack-core，./node_modules/conf/node_modules/async 等等。而每一个包都有自己的依赖包，每个包自己的依赖都安装在了自己的 node_modules 中。依赖关系层层递进，构成一整个依赖树，这个依赖树与文件系统中的问价结构树刚好层层对应。 最方便的查看依赖树的方式是直接在 app 目录下执行 npm ls 命令。 12345678910111213141516171819app@0.1.0├─┬ nconf@0.8.5│ ├── async@1.5.2│ ├── ini@1.3.5│ ├── secure-keys@1.0.0│ └── yargs@3.32.0└─┬ webpack@1.15.0 ├── acorn@3.3.0 ├── async@1.5.2 ├── clone@1.0.3 ├── ... ├── optimist@0.6.1 ├── supports-color@3.2.3 ├── tapable@0.1.10 ├── uglify-js@2.7.5 ├── watchpack@0.2.9 └─┬ webpack-core@0.6.9 ├── source-list-map@0.1.8 └── source-map@0.4.4 这样的目录结构优点在于层级结构明显，便于进行傻瓜式的管理： 例如新增一个依赖包，可以立即在第一层 node_modules 中看到子目录。 在已知所需要包名和版本号时，甚至可以从别的文件夹手动拷贝需要的包到 node_modules 文件夹中，再手动修改 package.json 中的依赖配置。 要删除这个包，也可以简单地手动删除这个包的子目录，斌删除 package.json 文件中相对应的一行即可。 实际上，很多人在 npm2 时代也的确这样实践过，的确也都可以安装和删除成功，并不会导致什么差错。 但这样的文件结构也有很明显的问题： 对复杂的工程，node_module 内目录结构可能会太深，导致深层的文件路径过长而触发 windows 文件系统中，文件路径不能超过260个字符长度的限制。 部分被多个包所依赖的包，很可能在应用 node_modules 目录中的很多地方被重复安装。随着工程规模越来越多，依赖树越来越复杂，这样的包情况会越来越多，造成大量冗余。 ————在这个示例中,webpack 和 nconf 都依赖 async 这个包，所以在文件系统中，webpack 和 nconf 的 node_modules 子目录中都安装了相同的 async 包，并且是相同的版本。 1234567891011121314+-------------------------------------------+| app&#x2F; |+----------+------------------------+-------+ | | | |+----------v------+ +---------v-------+| | | || webpack@1.15.0 | | nconf@0.8.5 || | | |+--------+--------+ +--------+--------+ | | +-----v-----+ +-----v-----+ |async@1.5.2| |async@1.5.2| +-----------+ +-----------+ 3.2 npm3-扁平结构主要为了解决以上问题，npm3 的 node_modules 目录改成； 更加扁平的层级结构。文件系统中 webpack、nconf、async 的层级关系变成了平级关系，处于同一级目录中。 12345678910 +-------------------------------------------+ | app&#x2F; | +-+---------------------------------------+-+ | | | |+----------v------+ +-------------+ +---------v-------+| | | | | || webpack@1.15.0 | | async@1.5.2 | | nconf@0.8.5 || | | | | |+-----------------+ +-------------+ +-----------------+ 虽然这样一来 webpack/node_modules 和 nconf/node_modules 中都不再有 async 文件夹，但得益于 node 的模块加载机制，他们都可以在上一级 node_modules 目录中找到 async 库。所以 webpack 和 nconf 的代码库中 require(&#39;async&#39;) 语句的执行都不会有任何问题。 这只是最简单的例子，实际的工程项目中，依赖树不可避免地会有很多层级，很多依赖包，其中会有很多同名但版本不同的包存在于不同的依赖层级，对这些复杂的情况，npm3 都会在安装时遍历整个依赖树，计算出最合理的文件夹安装方式，使得所有被重复依赖的包都可以去重安装。 npm 文档提供了更直接的例子解释这种情况： 加入 package{dep} 写法代表包和包的依赖，那么 A{B, C}，B{C}，C{D} 的依赖结构在安装之后的 node_modules 是这样的结构： 1234A+-- B+-- C+-- D 这里之所以 D 也安装到了与 B C 同一级目录，是因为 npm 默认会在无冲突的前提下，尽可能地将包安装到较高的层级。 如果是 A{B, C}，B{C, D@1}，C{D@2} 的依赖关系，得到的安装后结构是： 12345A+-- B+-- C +-- D@2+-- D@1 这里是因为，对与 npm 来说，同名但不同版本的包是两个独立的包，而同层不能有两个同名子目录，所以其中的 D@2 放到了 C 的子目录而另一个 D@1 被放到了再上一层的目录。 很明显在 npm3 之后 npm 的依赖树结构不再与文件夹层级一一对应了。想要查看 app 的直接依赖项，需要通过 npm ls 命令指定 --depth 参数来查看： 1npm ls --depth 1 PS：与本地依赖包把不同，如果我们通过 npm install --global 全局安装依赖包到全局目录时，得到的目录依然是”传统的”目录结构。而如果使用 npm3 想得到”传统”形式的本地 node_modules 目录，使用 npm install --global-style 即可。 3.3 npm5-package-lock 文件npm5 发布与 2017 年，也是目前最新的 npm 版本，这一版本依然沿用 npm3 之后扁平化的依赖包安装方式，此外最大的变化时增加了 package-lock.json 文件。 package-lock.json 的作用是锁定依赖安装结构，如果查看这个 json 的结构，会发现与 node_modules 目录的文件结构是一一对应的。 以依赖关系为：app{webpack} 的 ‘app’ 项目为例，其 package-lock 文件包含这样的片段： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&#123; \"name\": \"app\", \"version\": \"0.1.0\", \"lockfileVersion\": 1, \"requires\": true, \"dependencies\": &#123; \"webpack\": &#123; \"version\": \"1.8.11\", \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-1.8.11.tgz\", \"integrity\": \"sha1-Yu0hnstBy/qcKuanu6laSYtgkcI=\", \"requires\": &#123; \"async\": \"0.9.2\", \"clone\": \"0.1.19\", \"enhanced-resolve\": \"0.8.6\", \"esprima\": \"1.2.5\", \"interpret\": \"0.5.2\", \"memory-fs\": \"0.2.0\", \"mkdirp\": \"0.5.1\", \"node-libs-browser\": \"0.4.3\", \"optimist\": \"0.6.1\", \"supports-color\": \"1.3.1\", \"tapable\": \"0.1.10\", \"uglify-js\": \"2.4.24\", \"watchpack\": \"0.2.9\", \"webpack-core\": \"0.6.9\" &#125; &#125;, \"webpack-core\": &#123; \"version\": \"0.6.9\", \"resolved\": \"https://registry.npmjs.org/webpack-core/-/webpack-core-0.6.9.tgz\", \"integrity\": \"sha1-/FcViMhVjad76e+23r3Fo7FyvcI=\", \"requires\": &#123; \"source-list-map\": \"0.1.8\", \"source-map\": \"0.4.4\" &#125;, \"dependencies\": &#123; \"source-map\": &#123; \"version\": \"0.4.4\", \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.4.4.tgz\", \"integrity\": \"sha1-66T12pwNyZneaAMti092FzZSA2s=\", \"requires\": &#123; \"amdefine\": \"1.0.1\" &#125; &#125; &#125; &#125; &#125;&#125; 看懂 package-lock 文件并不难，其结构是同样类型的几个字段嵌套起来的，只要是 version，resolved，integrity，requires，dependencies 这几个字段。 version，resolved，integrity 用来记录包的准确版本号、安装源、内容 hash，决定了要安装的包的准确”身份信息。 假设不看其他字段，只关注 dependencies: {}，可以发现，整个文件的 JSON 配置里的 dependencies 层次结构与文件系统中 node_modules 的文件夹层次机构是完全对照的。 假设只关注 requires: {}，可以发现，除去最外层的 requires 属性为 true 以外，其它层的 requires 属性都对应着这个包的 package.json 里记录自己的所有依赖项。 因为这个文件记录了 node_modules 里所有包的结构、层级和版本号，甚至安装源，它也就事实上提供了”保存” node_modules 状态的能力。只要有这样一个 lock 文件，那不管在哪一台机器上执行 npm install 都会得到完全相同的 node_modules 结果。 这就是 package-lock 文件致力于优化的场景：在从前仅仅用 package.json 记录依赖，由于 semver range 机制，一个月前由 A 生成的 package.json 文件，B 在一个月后根据它执行 npm install，所得到的的 node_modules 结果很可能和一个月前 A 得到的结果存在许多差异，虽然 semver 有机制的限制，同一份 package.json 不会生成大版本不同的依赖包，但同一份代码在不同环境安装出不同的依赖包，依然是可能导致意外的潜在因素。 其实，相同作用的文件在 npm5 之前就有，成为 npm shrinkwrap 文件，二者作用完全相同，不同的是后者需要手动生成，而 npm5 默认会在执行 npm install 后就生成 package-lock 文件，并建议提交到 gi/svn 代码库中。 package-lock.json 文件在最初 npm5.0 默认引入时引起了相当大的争议。在 npm5.0 中，如果已有 package-lock 文件存在，若手动在 package.json 文件中新增一条依赖，再执行 npm install，新增的依赖并不会被安装到 node_modules 中，package-lock 也不会做相应的更新。这样的表现与使用者的自然期望表现不符。在 npm5.1 的首个 Release 版本中这个问题得以修复。所以这个事情告诉我吗，要升级，不要使用 npm5.0 版本。 ————但依然有反对的声音认为 package-lock 太复杂，对此 npm 也提供了禁用配置： 1npm config set package-lock false 4. 依赖包版本管理依赖包安装完并不意味着就万事大吉了，版本的维护和更新也很重要。这一章介绍依赖包升级管理相关知识。 4.1 semvernpm 依赖管理的一个重要特性是采用了语义化版本规范(semver)，作为依赖版本管理方案。 semver 约定一个包的版本号必须包含 3 个数字，格式必须为 MAJOR.MINOR.PATCH，意为 主版本号.小版本号.修订版本号。 MAJOR 对应大的版本号迭代，做了不兼容旧版本的修改时要更新 MAJOR 版本号 MINOR 对应小版本迭代，发生兼容旧版本 API 的修改或者更能更新时，更新 MINOR 版本号 PATCH 对应修订版本号，一般针对修复 BUG 的版本号 对应包作者（发布者），npm 要求在 publish 之前，必须更新版本号。npm 提供了 npm version 工具，执行 npm version major|minor|patch 可以简单地将版本号中响应的数字 +1。 如果包是一个 git 仓库，npm version 还会自动创建一条注释为更新后版本号的 git commit 和名为该版本号的 tag。 对于包的引用者来说，我们需要在 dependencies 中使用 semver 约定的 semver range 指定所需依赖包的版本号或版本范围。npm 提供了网站 https://semver.npmjs.com 可方便地计算所输入的表达式的匹配范围。常规的规则示例如下表： range 含义 示例 ^2.2.1 指定的 MAJOR 版本号下，所有更新的版本 匹配 2.2.3，2.3.0；不匹配 1.0.3，3.0.1 ~2.2.1 指定 MAJOR.MINOR 版本号下，所有更新的版本 匹配 2.2.3，2.2.9；不匹配 2.3.0，2.3.5 &gt;=2.1 版本号大于或等于 2.1.0 匹配 2.1.2，3.1； &lt;=2.2 版本号小于或等于 2.2 匹配 1.0.0，2.2.1，2.2.11 1.0.0 - 2.0.0 版本号从 1.0.0(包含) 到 2.0.0(包含) 匹配 1.0.0，1.3.4，2.0.0 任意两条规则，通过空格连接起来，表示”与”逻辑，即两条规则的交集： 如 &gt;=2.3.1 &lt;=2.8.0 可以解读为：&gt;=2.3.1 且 &lt;=2.8.0。 匹配 2.3.1，2.4.5，2.8.0 不匹配 1.0.0，2.3.0，2.8.1，3.0.0 任意两条规则，通过 || 连接起来，表示”或”逻辑，即两条规则的并集： 如 ^2 &gt;=2.3.1 || ^3 &gt;3.2 匹配 2.3.1，2.8.1，3.3.1 不匹配 1.0.0，2.2.0，3.1.0，4.0.0 PS：处理这几种，还有如下更直观的表示版本号范围的写法： * 或 x 匹配徐偶有主版本 1 或 1.x 匹配主版本为 1 的所有版本 1.2 或 1.2.x 匹配版本号为 1.2 开头的所有版本 PPS：在常规仅包含数字的版本号之外，semver 还允许在 MAJOR.MONOR.PATCH 后追加 - 后跟点号分隔的标签，作为预发布版本标签 - Prerelese Tags，通常被视为不稳定、不建议生产环境使用的版本。例如： 1.0.0-alpha 1.0.0-beta.1 1.0.0-rc.3 上表中我们最常见的是 ^1.8.11 这种格式的 range，因为我们使用 npm install &lt;package&gt; 安装依赖包时，npm 默认安装当前最新版本，例如 1.8.11，然后在所安装的版本号前加 ^ 号，将 ^1.8.11 写入 package.json 依赖配置，意味着可以匹配 1.8.11 以上，2.0.0 以下所有的版本。 4.2 依赖版本升级在安装完一个依赖包之后又新版本发布了，如何使用 npm 进行版本升级呢？答案很简单：npm install 或 npm update 即可。但在不同 npm 版本，不同的 package.json，package-lock.json 文件，安装升级的表现也不同。 还是以 webpack 为例，做如下前提假设: 工程项目 app 依赖 webpack 项目最初始化时，安装了当时最新的包 webpack@1.8.0，并且 package.json 中依赖配置为：&quot;webpack&quot;: &quot;^1.8.0&quot; 当前（2018年3月）webpack 最新版本为 4.2.0，webpack 1.x 的最新子版本为 1.15.0 如果我们使用的是 npm3，并且项目不包含 package-lock.json，那么根据 node_modules 是否为空，执行 install/update 结果如下（node 6.13.1, npm 3.10.10 环境下测试）： id package.json(BEFORE) node_modules(BEFORE) command(npm 3) package.json(AFTER) node_modules(AFTER) a) webpack: ^1.8.0 webpack@1.8.0 install webpack: ^1.8.0 webpack@1.8.0 b) webpack: ^1.8.0 空 install webpack: ^1.8.0 webpack@1.15.0 c) webpack: ^1.8.0 webpack@1.8.0 update webpack: ^1.8.0 webpack@1.15.0 d) webpack: ^1.8.0 空 update webpack: ^1.8.0 webpack@1.15.0 根据上表可以对 npm3 做出以下结论： 如果本地 node_modules 已安装，再次执行 install 不会更新包版本，执行 update 才会更新；而如果本地 node_modules 为空时，执行 install/update 都会直接安装更新包； npm update 总会把包更新到符合 package.json 中指定的 semver 的最新版本——本例中符合 ^1.8.0 的最新版本为 1.15.90 一旦给定 package.json，无论后面执行 npm install 还是 update，package.json 中的 webpack 版本一直保持开始的 ^1.8.0 不变 这里不合理的地方在于，如果最开始团队中第一个人安装了 webpack@1.8.0，而新加入项目的成员，checkout 工程代码后，执行 npm install 会安装得到不太一样的 1.15.0 版本。虽然 semver 约定了小版本号应当向下兼容（相同大版本号下的小版本号兼容），但万一有不熟悉不遵守此约定的包发布者，发布了不兼容的包，此时就可能出现因依赖环境不同导致的 bug。 如果我们使用的是 npm5，并且项目包含 package-lock.json 文件，那么根据 node_modules 是否为空，执行 install/update 结果如下（node 9.8.0, npm 5.7.1 环境下测试）： id package.json(BEFORE) node_modules(BEFORE) package-lock(BEFORE) command(npm 3) package.json(AFTER) node_modules(AFTER) a) webpack: ^1.8.0 webpack@1.8.0 @1.8.0 install webpack: ^1.8.0 webpack@1.8.0 b) webpack: ^1.8.0 空 @1.8.0 install webpack: ^1.8.0 webpack@1.8.0 c) webpack: ^1.8.0 webpack@1.8.0 @1.8.0 update webpack: ^1.15.0 webpack@1.15.0 d) webpack: ^1.8.0 空 @1.8.0 update webpack: ^1.8.0 webpack@1.15.0 e) webpack: ^1.15.0 webpack@1.8.0(旧) @1.15.0 update webpack: ^1.15.0 webpack@1.15.0 f) webpack: ^1.15.0 webpack@1.8.0(旧) @1.15.0 update webpack: ^1.15.0 webpack@1.15.0 与 npm3 相比，在安装和更新依赖版本上主要的区别为： 无论何时执行 install，npm 都会优先按照 package-lock 中指定的版本来安装 webpack，避免了 npm3 表中情况(b)的出现 无论何时执行 install/update，package-lock 文件总会跟着 node_modules 更新（因此可以视 package-lock 文件为 node_modules 的 JSON 表述） 已安装 node_modules 后若执行 npm update，package.json 中版本号也会随之更改为 ^1.15.0 由此可见，npm5.1 使得 package.json 和 package-lock.json 中所保存的版本号更加统一，解决了 npm 之前的各种问题。只要准寻好的实践习惯，团队成员可以很方便地维护一套应用代码和 node_modules 依赖都一致的环境。 4.3 最佳实践 使用 npm: &gt;=5.1 版本，保持 package-lock.json 文件默认开启配置 初始化：第一作者初始化项目时使用 npm install &lt;package&gt; 安装依赖包，默认保存 ^X.Y.Z 依赖 range 到 package.json 中；提交 package.json，pacakge-lock.json，不提交 node_modules 目录。 初始化：项目成员首次 checkout/clone 项目代码后，执行一次 npm install 安装依赖包 不要手动修改 package-lock.json 文件 升级依赖包： 升级小版本：本地执行 npm update 升级到新的小版本 升级大版本：本地执行 npm install &lt;package-name&gt;@&lt;version&gt; 升级到新的大版本 也可以手动修改 package.json 中版本号为要升级的版本（大于现有版本号）并指定所需的 semver，然后执行 npm install 本地验证升级后新版本无问题后，提交新的 package.json，package-lock.json 文件 降级依赖包： 正确：npm install &lt;package-name&gt;@&lt;version&gt; 验证无问题后，提交新的 package.json，package-lock.json文件 错误：手动修改 package.json 中的版本号为更低的版本 semver，这样修改并不会生效，因为再次执行 npm install 依然会安装 package-lock.json 中锁定的版本 删除依赖包： 方案1：npm uninstall &lt;package&gt; 并提交 package.json，package-lock.json 文件 方案2： 把要卸载的包从 package.json 中 dependencies 字段删除，然后执行 npm intall 并提交 package.json，package-lock.json 文件 任何时候有人提交了 package.json，package-lock.json 更新后，团队其他成员应该在拉取最新代码后执行 npm install 安装更新后的依赖包 5. npm scripts5.1 基本使用npm scripts 是 npm 另一个很重要的特性。通过 package.json 中 scripts 字段定义一个搅拌，例如： 12345&#123; \"scripts\": &#123; \"echo\": \"echo hello world\" &#125;&#125; 我们就可以通过 npm run echo 命令来执行这段脚本，像在 shell 中执行命令 echo hello world 一样，看到终端输出 hello world npm scripts 提供了一个简单的接口来调用工程相关的脚本。关于更详细的信息，可以参考阮一峰老师的文章npm scripts 使用指南 总结阮一峰老师文章内容： npm run 命令执行时，会把 ./node_modules/.bin/ 目录添加到执行环境的 PATH 变量中，因此如果某个命令行包没有全局安装，而只安装在了当前项目的 node_modules 中，通过 npm run 一样可以调用该命令 执行 npm 脚本时要传入参数，需要在命令后加 -- 标明，如 npm run test -- --grep=&quot;pattern&quot; 可以将 --grep=&quot;pattern&quot; 参数传递给 test 命令 npm 提供了 pre 和 post 两个钩子机制，可以定义某个脚本执行前后的所要执行的脚本 运行时变量：在 npm run 的脚本执行环境内，可以通过环境变量的方式获取许多运行时相关信息，以下都可以通过 process.env 对象访问获得： npm_lifecycle_event ——正在运行的脚本名称 npm_package_&lt;key&gt; ——获取当前包 package.json 中某个字段的配置值：如 npm_package_name 获取报名 npm_package_&lt;key&gt;_&lt;sub-key&gt; —— package.json 中嵌套字段属性：如 npm_package_dependencies_webpack 可以获取到 package.json 中的 dependencies.webpack 字段的值，及 webpack 的版本号 5.2 node_modules/.bin 目录上面所说的 node_module/.bin 目录，保存了依赖目录中所安装的可供调用的命令行包 何谓命令行包？例如 webpack 就属于一个命令行包。如果我们在安装 webpack 时添加 --global 参数，就可以在终端直接输入 webpack 进行调用。但如果不加 --global 参数，我们会在 node_moldues/.bin 目录里看到名为 webpack 的文件，如果在终端直接输入 ./node_modules/.bin/webpack 命令，一样可以执行。 这是因为 webpack 在 package.json 文件中定义了 bin 字段为： 12345&#123; \"bin\": &#123; \"webpack\": \"./bin/webpack.js\" &#125;&#125; bin 字段的配置格式为：&lt;command&gt;: &lt;file&gt;，即命令名: 可执行文件。npm 执行 install 时，会分析每个依赖包的 package.json 中 bin 字段，并将其包含的条目安装到 ./node_modules/.bin 目录中，文件名为 &lt;command&gt;。而如果是全局模式安装，则会在 npm 全局安装路径的 bin 目录下创建指向 &lt;file&gt; 名为 &lt;command&gt; 的软连接。因此，,.node_modules/.bin/webpack 文件在通过命令行调用时，实际上就是执行 node ./node_modules/.bin/webppack.js 命令 正如上一节所说，npm run 命令在执行时会把 ./node_modules/.bin 加入到 PATH 中，使得我们可以直接调用所有提供了命令行调用接口的依赖包。所以最佳的实践是： 将项目依赖的命令行工具安装到项目依赖文件夹中，然后通过 npm scripts 调用，而非全局安装 举例而言，webpack 作为前端最常用的构建工具，虽然我们都习惯了全局安装并直接使用命令行调用，但不同的项目依赖的 webpack 版本可能不同，响应的 webpack.config.js 配置文件也可能只兼容了特定版本的 webpack，如果我们仅仅全局安装了罪行的 webpack4.x，并使用 webpack 命令调用，在一个依赖 webpack3.x 的工程中就会无法成功执行构建 但如果这类工具总是本地安装，我们要调用一个命令，要手动添加 ./node_modules/.bin 这个很长的前缀，未免就太麻烦了，于是 npm 从 5.2 版本开始自带了一个新的工具：npx 5.3 npxnpx 的使用很简单，执行 npx &lt;command&gt; 即可，这里的 &lt;command&gt; 默认就是 ./node_modules 目录中安装的可执行脚本名。例如上面本地安装后的 webpack 包，我们可以直接使用 npx webpack 执行即可 处理这种最简单的场景，npm cli 团队开发者 Kat Marchan 还在这篇文章中介绍了其他几种 npx 的用法：Introducing npx: an npm package runner，国内也有位开发者 robin.law 将原文翻译为中文：npx是什么，为什么需要npx? 总结： 场景A：一键执行远程 npm 源的二进制包 除了在 package 中执行 ./node_modules/.bin 中已经安装的命令，还可以直接指定未安装的二进制包名执行。例如我们在一个没有 package.json 也没有 node_modules 的目录下，执行： 1npx cowsay hello npx 将会从 npm 源下载 cowsay 这个包（但不安装）并执行： 12345678 _______ &lt; hello &gt; ------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\&#x2F;\\ ||----w | || || 这种用途非常适合的场景： 在本地简单测试或调试 npm 源上这些二进制包的功能 调用 create-react-app 或 yeoman 这类往往每个项目只需要使用一次的脚手架工具 场景B：一建执行 GitHub Gist 在 [2.1 package 定义] 这一节中，npm install &lt;package&gt; 可以使包含了有效 package.json 的 git url 而 GitHub Gist 也是 git 仓库的一种，集合 npx 就可以方便地将简单的脚本共享给其他人，用于该链接的人无需将脚本安装到本地工作目录也可以执行。将 package.json 和需要执行的二进制脚本上传至 Gist，再运行 npx &lt;gist url&gt; 就可以方便地执行该 Gist 定义的命令 原文作者 Kat Marchan 提供了 示例，执行： 1npx https:&#x2F;&#x2F;gist.github.com&#x2F;zkat&#x2F;4bc19503fe9e9309e2bfaa2c58074d32 可以得到一个来自 GitHub Gist 的 hello world 问候 场景C：使用不同版本的 node 执行命令 将 npx 与 Aria Stewart 创建的 node 包(https://www.npmjs.com/package/node) 结合，可以实现在一行命令中使用指定版本的 node 执行命令 例如先后执行： 12npx node@4 -e &quot;console.log(process.version)&quot;npx node@6 -e &quot;console.log(process.version)&quot; 将分别输出 v4.8.7 和 v6.13.0 往常这种工作是由 nvm 这类 node 版本管理工具来做的，但 npx node@4 这种方式免去了 nvm 手动切换配置的步骤，更加简洁简单 6. npm 配置6.1 npm confignpm cli 提供了 npm config 命令进行 npm 相关配置，通过 npm config ls -l 可查看 npm 的所有配置，包括默认配置。npm 文档页为每个配置项提供了详细的说明 https://docs.npmjs.com/misc/config 修改配置的命令为：npm config set &lt;ket&gt; &lt;value&gt;，我们使用相关的常见重要配置： proxy，https-procy ——指定 npm 使用的代理 registry ——指定 npm 下载安装时的源，默认为 https://registry.npmjs.org/，可以指定私有的 Registry 源 package-lock ——指定是否默认生成 package-lock 文件，建议保持默认 true save —— true/false 指定是否在 npm install 后保存依赖包为 dependencies，npm5 起默认为 true 删除指定的配置项命令为：npm config delete &lt;key&gt; 6.2 npmrc 文件除了使用 CLI 提供的 npm config 命令显示更改 npm 配置，还可以通过 npmrc 文件直接修改配置 这样的 npmrc 文件优先级由高到低包括： 工程内配置文件：/path/to/my/project/.npmrc 用户级配置文件：!/.npmrc 全局配置文件：$PREFIX/etc/npmrc（即 npm config get globalconfig 输出的路径） npm 内置配置文件：path/to/npm/npmrc 通过这个机制，我们可以方便地在工程根目录创建一个 .pnmrc 文件来共享需要在团队间共享的 npm 运行相关配置。比如如果我们在公司内网环境下需要通过代理才可以访问 registry.npmjs.org 源，或需要访问内网的 registry，就可以在工作项目下新增 .npmrc 文件并提交代码 123proxy &#x3D; http:&#x2F;&#x2F;proxy.example.com&#x2F;https-proxy &#x3D; http:&#x2F;&#x2F;proxy.example.com&#x2F;registry &#x3D; http:&#x2F;&#x2F;registry.example.com&#x2F; 因为项目级 .pnmrc 文件的作用域只作用在本项目下，所以在非本目录下，这些配置并不生效。对于使用笔记本工作的开发者，可以很好地隔离公司的工作项目、在家学习研究项目两种不同的环境 将这个功能已 ~/.npm-init.js 配置相结合，可以将特定配置的 .npmrc 跟 .gitignore，README 之类的文件一起做到 npm init 脚手架中，进一步减少手动配置。 6.3 node 版本约束虽然一个项目的团队都共享了相同的diamante，但每个人的开发及其可能安装了不同的 node 版本，此外服务器端的版本也可能和本地开发机器不一致 这又是一个可能带来不一致性的隐私——但也可以通过声明式约束+脚本限制来解决 声明：通过 package.json 的 engines 属性声明应用运行所需的版本运行时要求。例如项目中使用了 async，awit 特性，查阅兼容性表格得知最低支持版本为 7.6.0，因此指定 engines 配置为： 12345&#123; \"engines\": &#123; \"node\": \"&gt;=7.6.0\" &#125;&#125; 强约束(可选)：在 npm 中以上字段内容仅作为建议字段使用，若要在私有项目中添加强约束，需要自己写脚本钩子，读取并解析 engines 字段的 semver rang ，然后与运行时环境做对比校验，做适当提醒 7. 小结 npm 最佳实践 使用 npm-init 初始化新项目 统一项目配置：需要团队共享的 npm config 配置项，固化到 .npmrc 文件中 统一运行环境，统一 package.json，package-lock.json 文件 合理使多样化的源安装依赖包：npm install &lt;git url&gt;|&lt;local file&gt; 使用 npm: &gt;=5.2 版本 使用 npm scripts 与 npx(npm: &gt;=5.2) 脚本管理应用相关脚本 8. 更多资料参考 npm team 成员 Ashley Williams 在 2016 年 Node.js Live 的 talk：You Don’t Know npm，当时还没有 npm5 YouTube 视频连接：Node.js Live (Paris) - Ashley Williams, You Don’t Know npm 演讲用的 sliders：the ag_deck 这篇 2015 年的文章介绍了如何使用本地模块打包 node_modules 依赖：Build modular application with npm local modules 一篇很好的介绍 package-lock.json 的文章：Everything you wanted to know about package-lock.json 阮一峰 npm scripts 使用指南 Kat Marchan 介绍 npx: 原文：Introducing npx: an npm package runner 中文：npx是什么，为什么需要npx? 文档 npm 官方文档，无中文翻译 package.json 文件 npm config 配置 npm semver 计算器 node_modules 目录扁平化 yarn 中文文档，虽然是 npm 竞争者但兼容 package.json 和 node_modules 目录，因此这两部分可以作参考 package.json - 中文 依赖与版本 - 中文 延伸阅读 sam boyer 《所以你想开发一个包管理系统》，从五官特定语言的角度，介绍一个包管理系统的方方面面：So you want to write a package manager","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/tags/Tool/"}]},{"title":"常用 Git 命令","slug":"tech/tool/frequently-git-command","date":"2020-02-02T08:16:19.376Z","updated":"2020-07-19T07:39:20.113Z","comments":true,"path":"2020/02/02/tech/tool/frequently-git-command/","link":"","permalink":"http://yoursite.com/2020/02/02/tech/tool/frequently-git-command/","excerpt":"","text":"原文链接：www.ruanyifeng.com Git 基本的工作流程如下： 几个专用名词： Workspace: 工作区 Index / Stage: 暂存区 Repository: 仓库区（或本地仓库） Remote: 远程仓库 一、新建代码库12345678# 在当前目录新建一个 Git 代码库$ git init# 新建一个目录，将其初始化为 Git 代码库$ git init [project-name]# 下载一个项目和他的整个代码历史$ git clone [url] 二、配置Git 的设置文件为 .gitconfig，他可以在用户目录下（全局配置），也可以在项目目录下（项目配置）。 123456789# 显示当前的 Git 配置$ git config --list# 编辑 Git 配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 三、增加/删除文件1234567891011121314151617# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...#停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并将这个改名放入暂存区$ git mv [file-original] [file-renamed] 四、代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到残酷去$ git commit -a# 提交时显示所有 diff 信息$ git commit -v# 使用一次新的commit，替代上一次的提交# 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息$ git commit --amend -m [message]# 重做一次 commit，并包括指定文件的新变化$ git commit --amend ... 五、分支123456789101112131415161718192021222324252627282930313233343536373839# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定的 commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch -trach [branch] [remote-branch]# 在现有分支与指定的远程分支之间，建立追踪关系$ git branch --set-upstream [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 合并指定分支到当前分支$ git merge [branch]# 选择一个 commit，合并到当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete$ git branch -dr 六、标签1234567891011121314151617181920# 列出所有 tag$ git tag# 在当前分支新建一个 tag$ git tag [tag]# 在指定 commit 上新建一个 tag$ git tag [tag] [commit]# 查看 tag 信息$ git show [tag]# 提交指定 tag$ git push [remote] [tag]# 提交所有 tag$ git push [remote] --tags# 新建一个分支，指向某个 tag$ git checkout -b [branch] [tag] 七、查看信息123456789101112131415161718192021222324252627282930313233343536373839404142# 查看有变更的文件$ git status# 查看当前分支的版本历史$ git log# 查看 commit 历史，以及每次 commit 发生变更的问价$ git log --stat# 查看某个文件的版本历史，包括问价改名$ git log --follow [file]$ git whatchanged [file]# 查看指定文件相关的每一次 diff$ git log -p [file]# 查看指定文件什么时间被什么人修改过$ git blame [file]# 查看咋黁去和工作区的差异$ git diff# 查看暂存区和上一个 commit 的差异$ git diff --cached []# 查看工作区与当前分支最新 commit 之间的差异$ git diff HEAD# 查看两次提交之间的差异$ git diff [first-branch] ... [second-branch]# 查看某次提交的元数据和内容变化$ git show [commit]# 查看某次提交发生变化的文件$ git show --name-onle [commit]# 查看某次提交时，某个文件的内容$ git show [commit]:[file-name]# 查看当前分支的最近几次提交$ git reflog 八、远程同步1234567891011121314151617181920212223# 下载远程仓库所有的变动$ git fetch [remote]# 查看所有远程仓库$ git remote -v# 查看某个远程仓库的信息git remote show [remote]# 新增一个新的远程仓库，并与其命名$ git remote add [short-name] [url]# 拉取远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --forece# 推送所有分支到远程仓库$ git push [remote] --all 九、撤销123456789101112131415161718192021222324252627# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个 commit 的指定文件到工作区$ git checkout [commit] [file]# 恢复上一个 commit 的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次 commit 保持一致git reser --hard# 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致$ git reset --hard [commit]# 重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个 commit，用来撤销指定的 commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit] 十、其他1234567891011121314# 生成一个可供发布的压缩包$ git archive# 备份当前工作区的内容$ git stash# 从 Cit 栈中读取最近一次保存的内容，恢复工作区相关的内容$ git stash pop# 查看 Git 栈内所有备份$ git stash list# 清空 Git 栈$ git stash clear","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/tags/Tool/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-02-01T10:16:28.451Z","updated":"2020-02-01T10:16:28.451Z","comments":true,"path":"2020/02/01/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"2019年终总结","slug":"life/year-end-summary-2019","date":"2019-12-22T05:23:11.000Z","updated":"2020-06-01T13:15:32.029Z","comments":true,"path":"2019/12/22/life/year-end-summary-2019/","link":"","permalink":"http://yoursite.com/2019/12/22/life/year-end-summary-2019/","excerpt":"","text":"工作华大demo初步认识音视频相关设备监与控的基本特性，ezmanager-web 有了雏形，技术上学习了websocket的基本使用，结果上完成了自己负责部分的工作任务，没有掉链子 华为会议室demo通过现场调试，对音视频设备在会议室场景的应用有了更直观的了解，跑现场累归累，但确实是理解业务场景最直接的方式，同时自己也有机会接触更多的音视频设备。技术上，开始接触Vuex，学会了基本的使用方法，并配合ws实现对设备状态推送的全局状态管理（用法还不成熟，待完善）。这个阶段开始尝试以有经验的开发者，带新人配合完成工作，也是最能发现自我不足的一段时间，外部环境逼迫自己有目的性的查漏补缺，自我感觉有所进步。 OPPO项目开始从项目开发到产品开发的思维转化，在原有基础上，重构了ezmanager-web 框架，把能抽离的功能模块化：ws完善心跳机制、Vuex优化了数据存储方式、前端权限管理、设备控制超时统一机制、接口封装与错误处理优化；前端组件化也逐渐完善：导航栏、面包屑、table/filter组件、样式文件的规范、路由管理。开发过程中会更加注意代码的可重用和可维护性，会考虑更全面的业务场景，提高健壮性。项目前期自己投入时间相对较多，后面随着Ed的成长，让他承担了更多的工作，能够看到他的进步。但作为一个产品，ezmanager-web必然还存在很多的不足：由于功能迭代增加，路由管理变得混乱，需要重新梳理、设备监控代码的复用性非常低，需要配合设备库、总/分控讨论解决方案、页面响应式布局很弱，需要迭代性强化、浏览器兼容性（页面+js）还没有系统性进行测试、前端国际化还未开始、代码风格不统一，需要尽快统一（ESLint集成）……再者强调一下自己的一个不足点：由于后期将大部分工作都分配给了Ed，自己主要投入到设备库的开发，导致对自检、联检、告警相关业务不够属性，这必然还会对之后的开发和维护埋坑，需要补足。 设备库设备库是自己第一个独立开发的基于meteor+Vue+mongodb的node项目。除开学习或者巩固到的技术知识点以外，我认为这个项目带给我的最大帮助是：我开始有了往全栈进阶的想法，也促使我去了解更多基于node的前后台开发技术，让我认识到自己现在掌握的东西是非常非常皮毛的东西，还有非常非常多的东西要去学习，去各个击破。前端：最基本的CSS/LESS/SASS、响应式布局、webpack打包机制、web相关必须掌握的HTTP技术点、web性能优化以及安全问题、基于Vue的SSR服务端渲染、前端自动测试……后台：关系型/非关系型数据库设计、node中间件技术、更好的node服务器开发框架、js设计模式……语言学习：typescript的基础用法以及对现有项目的改造或重构……这些都需要投入大量的时间去学习和实践。然后，话说回来，设备库的开发本身还有非常多的地方需要完善，就不一一列举了。（很感谢团队能给我机会来负责设备库的开发，我也会在nodeJs全栈的路上越走越自信） 项目以外19年下半年，我渐渐明确了自己未来三至五年的发展方向，就是在node全栈技术的道路上持续精进，抛开多余的想法，在完成分内工作的前提下，补足技术短板。我们的团队未来肯定会越来越大，不管以后自己能扮演什么样的角色，有一件事是不会变的：不断提升技术水平，为团队提供稳定可靠的技术支持，并从中获取满足感。（年会给自己立了个flag：三年之内在前端技术上超越Jerry，不想让他失望！） 生活慢慢学会品尝孤独。 2020年目标至少在技术上得到自己的认可，并能正向地影响更多的人。 …………","categories":[],"tags":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"}]},{"title":"Angular vs React vs Vue（翻译）","slug":"tech/translation/angularVSReactVSVue","date":"2017-10-17T11:05:36.000Z","updated":"2020-08-21T16:25:33.338Z","comments":true,"path":"2017/10/17/tech/translation/angularVSReactVSVue/","link":"","permalink":"http://yoursite.com/2017/10/17/tech/translation/angularVSReactVSVue/","excerpt":"","text":"原文链接：angular-vs-react-vs-vue Deciding on a JavaScript framework for your web application can be overwhelming. Angular and React are very popular these days, and there is an upstart which has been getting a lot of traction lately: VueJS. What’s more, these are just a few of the new kids on the block.Javascripts in 2017 — things aren’t easy these days!So, how are we supposed to decide? A pros-and-cons list never hurts. We’ll do this in the style of my previous article, “9 Steps: Choosing a tech stack for your web application”. 如何选择一个JS前端框架来构建你的web应用是一件让人很头疼的事情，因为现在可供选择的前端框架太多：诸如时下颇为流行Angular和React，还有在重重困难中刚刚起步的新框架：VueJS也开始流行起来。另外这里你可以看到现在最为流行的前端框架排行，供参考。 2017，Javascript 前端工程师们的工作，可没想象的那么简单！ 那么，我们如何做出选择？首先列出一份利弊清单是有必要的。我将模仿之前我写的这篇文章开始行文：9 步: 为你的web应用选择技术栈 Before we start — SPA or not?You should first make a clear decision as to whether you need a single-page-application (SPA) or if you’d rather take a multi-page approach. Read more on this in my blog post, “Single-page-application (SPA) vs. Multi-page web applications (MPA)” (coming soon, follow me on Twitter for updates). SPA or MPA首先你得搞清楚，你是要写一个单页应用还是多页应用。从这里你可以了解到更多信息：单页应用 (SPA) VS 多页应用 (MPA) The starters today: Angular, React and VueFirst, I’d like to discuss lifecycle &amp; strategic considerations. Then, we’ll move to the features &amp; concepts of the three javascript frameworks. Finally, we’ll come to a conclusion.Here are the questions we’ll address today: How mature are the frameworks / libraries? Are the frameworks likely to be around for a while? How extensive and helpful are their corresponding communities? How easy is it to find developers for each of the frameworks? What are the basic programming concepts of the frameworks? How easy is it to use the frameworks for small or large applications? What does the learning curve look like for each framework? What kind of performance can you expect from the frameworks? Where can you have a closer look under the hood? How can you start developing with the chosen framework? Ready, set, GO! 参赛人：Angular、React、Vue第一步，我们将讨论它们的演变过程和战略思考，然后再看它们的特性和概念，最后我们会得出一个结论。 下面是我们今天将要讨论问题： 这三个框架的成熟度如何？ 它们会不会只能流行一段时间？ 它们相对应的社区生态圈有多大，能给我们提供多少帮助？ 寻找它们相对应的开发者的难易程度怎么样？ 三者的主要编程理念是什么？ 不管是开发小型还是大型应用，这三个框架有多容易上手？ 这三种框架的学习曲线如何？ 它们可以为你提供哪些性能？ 怎样你可以更近地接触到它们的底层原理？ 你该如何使用他们开始开发？ 那么我们就正式开始讨论吧! Lifecycle &amp; strategic considerationsSome historyAngular is a TypeScript-based Javascript framework. Developed and maintained by Google, it’s described as a “Superheroic JavaScript MVWFramework”. Angular (also “Angular 2+”, “Angular 2” or “ng2”) is the rewritten, mostly incompatible successor to AngularJS (also “Angular.js” or “AngularJS 1.x”). While AngularJS (the old one) was initially released in October 2010, it is still getting bug-fixes, etc. — the new Angular (sans JS) was introduced in September 2016 as version 2. The newest major release is version 4, as version 3 was skipped. Angular is used by Google, Wix, weather.com, healthcare.gov and Forbes (according to madewithangular, stackshare and libscore.com). React is described as “a JavaScript library for building user interfaces”. Initially released in March 2013, React was developed and is maintained by Facebook, which uses React components on several pages (not as a single-page application, however). According to this article by Chris Cordle, React is used far more at Facebook than Angular is at Google. React is also used by Airbnb, Uber, Netflix, Twitter, Pinterest, Reddit, Udemy, Wix, Paypal, Imgur, Feedly, Stripe, Tumblr, Walmart and others (according to Facebook, stackshare and libscore.com). Facebook is working on the release of React Fiber. It will change React under the hood — rendering is supposed to be much faster as a result — but things will be backward-compatible after the changes. Facebook talked about the changes at its developer conference in April 2017, and an unofficial article about the new architecture was released. React Fiber was released with React 16 in September 2017. Vue is one of the most rapidly growing JS frameworks in 2016. Vue describes itself as a “Intuitive, Fast and Composable MVVMfor building interactive interfaces.” It was first released in February 2014 by ex-Google-employee Evan You (BTW: Evan wrote an interesting blog post about the marketing activities and numbers in the first week) back then). It’s been quite a success, especially given that Vue is getting so much traction as a one-man show without the backing of a big company. Evan currently has a team of dozen core developers. In 2016, version 2 was released. Vue is used by Alibaba, Baidu, Expedia, Nintendo, GitLab — a list of smaller projects can be found on madewithvuejs.com. All three Frameworks are available under the MIT license.React shipped with a special BSD3-license file until September 2017. There were a lot of discussions on the patent file. If you are interested into the history of this, you can read this Github issue discussion, the reasons and the history behind the patent file (by Ex-Facebook engineer James Ide), Why you should not be scared (by Dennis Walsh), the warning against the use for startups (by Raúl Kripalani) and a former statement from Facebook on this topic: Explaining React’s license. Anyway — all should not matter anymore as Facebook finally announced, that React will get the MIT license. 演变过程&amp;战略思考一些历史背景Angular是一个基于TypeScript的Javascript框架，由谷歌开发和维护，被描述为“Superheroic JavaScript MVWFramework”。Angular（又称 “Angular 2+”, “Angular 2” 或 “ng2”）是对AngularJS (又称 “Angular.js” 或 “AngularJS 1.x”)基本不兼容的继承重写。AngularJS (旧版本)在2010.10发布第一个版本，然而任然存在一些bug:bug-fixes。2016年，Angular的第二个版本发布。因为V3被跳过来，现在已经更新到了V4。Google, Wix, weather.com, healthcare.gov and Forbes都用到了Angular（根据madewithangular、stackshare、 libscore.com提供的统计数据）。 React被描述为“a JavaScript library for building user interfaces”。初始版本于2013年3月发布，由Facebook开发并维护，Facebook在好几个网站（并不是单页应用）上都用到了React。根据Chris Cordle写的这篇文章，Facebook的React比Google的Angular的使用量要多得多。React也被Airbnb, Uber, Netflix, Twitter, Pinterest, Reddit, Udemy, Wix, Paypal, Imgur, Feedly, Stripe, Tumblr, Walmart等其他企业所使用（根据madewithangular、stackshare、 libscore.com提供的统计数据）。 Facebook正在致力于发布React Fliber。它将从底层改变React——界面渲染将会更快。但是React Fliber将向下兼容。Facebook在2017年4月的开发者大会上谈及了这次更改，并且发布了非官方版本。2017年9月Facebook发布了React Fliber正式版。 Vue是2016年成长最快的JS框架之一。Vue被描述为“Intuitive, Fast and Composable MVVM for building interactive interfaces.” 前谷歌工程师Evan You 于2014年4月发布了Vue的第一个版本（顺便说一下：Evan写了一篇与此相关有趣的文章，感兴趣可以看一下）。对于像Vue这种没有大公司作靠山，并且在发展的路上遇到重重困难的新框架，能达到现在的成就，已经是非常成功了。Evan现在的团队中核心成员有十几个。2016年，Vue发布了第二个版本。Vue被诸如Alibaba, Baidu, Expedia, Nintendo, GitLab等公司所使用，并且在madewithvuejs.com有不少小型应用都使用到了Vue。 三个框架都在拥有MIT许可证的前提下为用户提供服务。 React直到2017年9月，开始装载了特殊的BSD3-license。专利这一块曾引起了人们广泛的谈论。如果你对这段历史感兴趣，这几篇文章：this Github issue discussion、 the reasons and the history behind the patent file (前Facebook工程师James Ide), Why you should not be scared (Dennis Walsh)、against the use for startups (Raúl Kripalani) 和之前Facebook所宣布的: Explaining React’s license。不管怎么样，现在用不着担心这些问题，因为Facebook最终公布：React将使用MIT license。 Core developmentAs already noted, Angular and React are supported and used by big companies. Facebook, Instagram and Whatsapp are using it for their pages. Google uses it in a lot of projects: for example, the new Adwords UI was implemented using Angular &amp; Dart. Again, Vue is realized by a group of individuals whose work is supported via Patreon and other means of sponsorship. You can decide for yourself whether this is a positive or negative. Matthias Götzke thinks that Vue’s small team is a benefit because it leads to cleaner and less over-engineered code / API. Let’s have a look at some statistics: Angular lists 36 people on their team page, Vue lists 16 people, and React doesn’t have a team page. On Github, Angular has &gt; 25,000 stars and 463 contributors, React has &gt; 70,000 stars and &gt; 1,000 contributors, and Vue has almost 60,000 stars and only 120 contributors. You can also check the Github Stars History for Angular, React and Vue. Once again, Vue seems to be trending very well. According to bestof.js, over the last three months Angular 2 has been getting an average of 31 stars per day, React 74 stars, and Vue.JS 107 stars. 主要的发展过程上文已经有所提及，Angular和React都是被大公司提供支持并使用。Facebook, Instagram 和 Whatsapp用React进行网页开发；Google在大量的项目中都使用到了Angular，比如：新开发的Adwords UI用到了Angular &amp; Dart。至于Vue则……你可以自己权衡利弊。Matthias Götzke认为Vue的小团队模式可以带来好处，因为这将促使代码和API更简洁以至于不会太繁冗。 我们来用数据说话：Angular的团队有36人，Vue团队有16人，React没有团队成员网站。在GitHub上，Angular有超过25,000个星和463个贡献者；React有超过70,000个星和超过1,000个贡献者；Vue几乎有60,000个星却只有120个贡献者。你也可以在这里对数据进行验证Github Stars History for Angular, React and Vue。值得再强调一遍，Vue看起来发展得非常好。根据bestof.js的统计，过去三个月里三者平均每天增加的星星数量情况分别是：Angular 个31星；React74个星；Vue107个星。 Market lifecycleIt’s hard to compare Angular, React and Vue in Google Trends because of the various names and versions. One way to approximate could be to the search in the category “Internet &amp; technologies”. Here is the result: Oh, well. Vue was not created before 2014 — so something is amiss here. La Vue is French for“view”, “sight” or “opinion”. Maybe it’s that. A comparison of “VueJS” and “Angular” or “React” is not fair either, as VueJS has hardly any results compared to the others. Let’s try something else, then. The Technology Radar from ThoughtWorks gives a good impression of how technologies evolve over time. Redux is in the adoption stage (to be adopted in projects!), and it has been invaluable in a number of ThoughtWorks projects. Vue.js is in the trial stage (try it out!). It is described as a lightweight and flexible alternative to Angular with a lower learning curve. Angular 2 is in the assessment stage — it is used successfully by ThoughtWork teams, but not a strong recommendation yet. According to the last Stackoverflow 2017 survey, React is loved by 67% of surveyed developers and AngularJS by 52%. “No interest to continue developing” registers higher numbers for AngularJS (48%) vs. React (33%). Vue is not in the Top 10 in either case. Then there’s the statejs.com survey comparing “front-end frameworks”. The most interesting facts: React and Angular have 100% awareness, and Vue is unknown to 23% of the people surveyed. Regarding satisfaction, React scored 92% for “would use again”, Vue 89% and Angular 2 only 65%. What about another customer satisfaction poll? Eric Elliott started one in October 2016 to evaluate Angular 2 and React. Only 38% of the people surveyed would use Angular 2 again, while 84% would use React again. 市场演变历程用Google Trends(谷歌趋势)也很难比较Angular和React孰优孰劣，因为它们所拥有的名字和版本实在是太多。唯一可能可以得出大概的结论的方法就是你去搜索关键字“Internet &amp; technologies”，这是搜索结果： 由于Vue在2014年以后才面世，所以有一些方面就没有比较的意义。在拉丁文化中，“Vue”源自于法语，是“view”, “sight” 或 “opinion”的意思（都可以理解问观点的意思）。可能是这样。非要拿VueJS和Angular、React作比较是不公平的，而且你很难得出个什么结论。 我们来从别的方面入手，ThoughtWorks公司推出的Technology Radar对技术是如何逐步发展的给出了很好的阐释。Redux在适应阶段（如何和项目无缝对接！），而且在ThoughtWorks中的很多项目中，Redux有着无法估计的价值；Vue还在尝试阶段（试一试你就知道！）。Vue被描述为：相对于Angular，更加轻量级，更灵活，可替换，并且学习曲线更友好的前端框架；Angular2则在评测阶段，它在ThoughtWork 团队中得到了成功的应用，但其并不是一个最佳的选择。 根据2017 Stackoverflow最近的调查统计，参加调查的开发者中有67%偏好于React，而AngularJS则为52%。在“是否还有兴趣继续使用”的数据统计中，有48%的开发者表示不愿意再使用AngularJS，而React则为33%。两个方面，Vue都没有排到前10名。statejs.com也有对前后端框架的对比调查统计。最有趣的事实是：React和Angular被100%的参与调查的开发者所熟识，而只有23%知道Vue是个啥。在用户满意度方面，React得到了92%分，开发者表示“愿意继续使用”，Vue则为89%，而Angular2仅得到65% Eric Elliott在2016年10月也对Angular2和React进行了一次用户满意度调查，调查显示只要38%的调查参与者愿意继续使用Angular2，而愿意继续使用React的人达到84%。 Long-term support &amp; migrationsReact APIs are quite stable, as Facebook states in their design principles. There are also some scripts to help you move from your current API to a newer one: check out react-codemod. Migrations are quite easy and there is no such thing (needed) as a long-term-support version. In this Reddit post, people note that the upgrades never really were a problem. The React team wrote a blog post about their versioning scheme. When they add a deprecation warning, they keep it for the rest of the current release version before the behavior is changed in the next major version. There is no planned change to a new major version — v14 was released in October 2015, v15 was published in April 2016, and v16 does not have a release date yet. The upgrade should not be a problem, as recently noted by a React core developer. Regarding Angular, there is a blog post about versioning and releasingAngular starting with the v2 release. There will be one major update every six months, and there will be a deprecation period of at least six months (two major releases). There are some experimental APIs marked in the documentation with shorter deprecation periods. There is no official announcement yet, but according to this article, the Angular team has announced long-term-support versions starting with Angular 4. Those will be supported for at least one year beyond the next major version release. This means Angular 4 will be supported until at least September 2018 with bug-fixes and important patches. In most cases, updating Angular from v2 to v4 is as easy as updating the Angular dependencies. Angular also offers a guide with information as to whether further changes are needed. The update process for Vue 1.x to 2.0 should be easy for a small app — the developer team has asserted that 90% of the APIs stayed the same. There is a nice upgrade-diagnostic migration-helper tool working on the console. One developer noted that the update from v1 to v2 was still no fun in a big app. Unfortunately, there is no clear (public) roadmap about the next major version or information on plans for LTS versions. One more thing: Angular is a full framework and offers a lot of things bundled together. React is more flexible than Angular, and you will probably wind up using more independent, unsettled, fast-moving libraries — this means that you need to take care of the corresponding updates and migrations on your own. It could also be a detriment if certain packages are no longer maintained or some other package becomes the de facto standard at some point. 稳定性&amp;移植性React的API都相当稳定，这也是Facebook所坚持的设计理念。而且Facebook还提供了一些脚本，帮助开发者当前使用的API更新到最新的版本，比如说： react-codemod。移植对于React开发者来说是很简单的，而且在长期支持的版本中，你根本没有太多事情需要操心。Reddit(红迪网)显示，开发者都认为React的更新迭代从来都不是个问题。这里是React团队写的一篇关于React版本结构的博客：versioning scheme。当新增了一个API废除的警告时，他们会在下一个大版本发布之前，将该API原来的用法保留在当前发布的版本中。然后React的主版本迭代并没有计划性——v14在2015.10发布，v15在2016.04发布，v16至今还没有一个发布的日期。React的更新并不是一个问题。参考： noted by a React core developer。 至于Angular，这篇博客记录了Angular自第二个版本v2以来的版本发布历程：关于Angular版本的发布。每6个月，Angular就会发布一个大版本，并且有长达至少6个月的折旧期限（两个大版本）。一些折旧期限更短的测试性的API会在开发文档中被标记出来。虽然至今还没有官方声明，但是根据这篇文章，Angular团队已经对外声明将会长期维护支持Angular 4和之后的版本，并且会在下一个主版本发布之前，至少维护一年的时间。这意味着Angular 4至少会被维护到2018年的9月，伴随着漏洞的维护和一些重要的补丁。大部分情况下，更新Angular v2 到 v4版本和更行相关的依赖库都是比较简单的。Angular还为开发者提供了一些建议，关于未来将会有哪些必要的改动。 如果你开发的是小型应用，那么升级Vue 1.x到2.0将会很容易——Vue的开发团队已经明确表明，90%的APIs将不会被改变。这是一个很好用的更新移植工具，在控制台就可使用。但是，有开发者说道，对于大型的应用，更新Vue版本还是挺费劲的。不幸运的是，至今还没有一个清晰（公开）的线路图来告诉开发者Vue的下一个大版本将在何时发布，Vue也没有提供他们将会长期支持的版本计划的相关信息。 另外值得一提的是：Angular是一个非常全面的框架，它把很多东西都打包在一起提供给开发者去使用；React比Angular更灵活，但是这可能导致你要用更多的依赖包，并且频繁的更换库，让你的工程更混乱。这意味着你需要自己做库之间的协调和移植工作。而且当某个依赖包停止维护了，或者在某些情况下，其他的依赖包成为了主流，导致你得顺应趋势而不得不做出更替，这都将对你的项目造成损害。 Human resources &amp; recruitingIf you have in-house HTML developers who do not want to learn more Javascript, you are better off choosing Angular or Vue. React entails more Javascript (we talk about this later). Do you have designers working close to the code? The user “pier25” notes on Reddit that React makes sense if you are working for Facebook, where everyone is a superhero developer. In the real world, you won’t always find a designer who can modify JSX — as such, working with HTML templates will be much easier. The good thing about the Angular framework is that a new Angular 2 developer from another company will quickly familiarize themselves with all the requisite conventions. React projects are each different in terms of architectural decisions, and developers need to get familiar with the particular project setup. Angular is also good if you have developers with an object-oriented background or who don’t like Javascript. To drive that point home, here is a quote from Mahesh Chand: I am not a JavaScript developer. My background is building large-scale enterprise systems using “real” software platforms. I started in 1997 building applications using C, C++, Pascal, Ada, and Fortran. (…) I can clearly say that JavaScript is just gibberish to me. Being a Microsoft MVP and expert, I have a good understanding of TypeScript. I also don’t see Facebook as a software development company. However, Google and Microsoft are already the largest software innovators. I feel more comfortable working with a product that has strong backing from Google and Microsoft. Also (…) with my background, I know Microsoft has even bigger plans for TypeScript. 人力资源&amp;聘任策略如果你的开发者是不愿意学习更多JavaScript的HTML工程师，那么你最好选择用Angular或者Vue。React需要掌握更多的JavaScript（这个待会再讲）。 你的设计师们对编程有深刻的了解吗？Reddit上一个网友“pier25”说：如果你在Facebook工作，那么使用React将行得通，因为那里每个人都是技术大牛。言归正传，一个会写JSX的设计师是不没那么好找的——就本身而言，用HTML模板进行开发将容易得多。 使用Angular的一个好处是，从其他公司招聘来的Angular2工程师，很快就能熟悉你们自己公司开发中必要的代码规范，但是Reac工程师t就没那么容易了，因为每个React项目的框架结构都不尽相同，工程师需要花时间去熟悉不同项目的相关配置。 另外如果你的工程师的技术背景是面向对象编程的，而不喜欢JavaScript，那么选择Angular会更好。这里有一句来自Mahesh Chand的引用，自你值得一读： 我不是一个JavaScript开发者。我是用“real”软件平台做大型企业级系统出身的。我从1997年开始用C，C++，Pascal，Ada，Fortran(……)写我的应用。对于我来说，JavaScript完全就是瞎扯淡。作为一个微软最有价值专家，我对TypeScript有好的理解。那个时候我还不知道Facebook是个软件开发公司。然而，Google和微软已经是全球最大的软件革新者了。在Google和微软这种有着强大背景的公司中工作，让我感觉更舒坦。然后……基于我够硬的背景，我知道微软在TypeScript上还会实施更长远的计划。 可能需要提一下， Mahesh是微软的地区总管。 Comparison of React, Angular &amp; Vue ComponentsThe frameworks in question are all component-based. A component gets an input, and after some internal behavior / computing, it returns a rendered UI template (a sign in / sign out area or a to-do list item) as output. The defined components should be easy to reuse on the webpage or within other components. For example, you could have a grid component (consisting of a header component and several row components) with various properties (columns, header information, data rows, etc.) and be able to reuse the component with different data sets on another page. Here is a comprehensive article about components, in case you’d like to learn more about this. React and Vue both excel at handling dumb components: small, stateless functions that receive an input and return elements as output. React, Angular &amp; Vue技术对比组件三个框架都是基于组件化的。给组件一个输入，然后组件自己在内部做处理/计算，最后返回一个渲染好的UI模板作为输出。定义好的组件会很容易在网页或者其他组件内进行重用。举个栗子，假设你有一个表格组件(由一个表头组件和几个行组件组成)，包含许多的属性(columns, header information, data rows, etc.)，这个表格组件就能在其他页面，填充不同的数据进行重用。如果你想了解更多，这篇文章对component进行了全面的讲解。 React和Vue都尤其擅长处理dumb component：简单小巧，并且依赖性弱的方法，接收一个输入，然后返回元素作为输出。 Typescript vs. ES6 vs. ES5React focuses on the use of Javascript ES6. Vue uses Javascript ES5 or ES6. Angular relies on TypeScript. This offers more consistency in related examples and open source projects (React examples can be found in either ES5 or ES6). This also introduces concepts like decorators and static types. Static types are useful for code intelligence tools, like automatic refactoring, jump to definitions, etc. — they are also supposed to reduce the number of bugs in an application., though there certainly isn’t consensus on this topic. Eric Elliott disagrees in his article “The shocking secret about static types”. Daniel C Wang says that the cost of using static types does no harm and that it’s good to have both test-driven development (TDD) and static typing. You should also probably know that you can use Flow to enable type-checking within React. It’s a static type-checker developed by Facebook for JavaScript. Flow can also be integrated into VueJS. If you are writing your code in TypeScript, you are not writing standard JavaScript anymore. Even though it’s growing, TypeScript still has a tiny user base compared to that of the whole JavaScript language. One risk could be that you’re moving in the wrong direction because TypeScript may — however unlikely it is — also disappear over time. Additionally, TypeScript adds a lot of (learning) overhead to projects — you can read more about this in the Angular 2 vs. React comparison by Eric Elliott. Update: James Ravenscroft wrote in a comment to this article, that TypeScript has first-class support for JSX — components can be type-checked seamlessly. So if you like TypeScript and you want to use React, this should not be a problem. Typescript vs. ES6 vs. ES5React致力于对JavaScript ES6的应用。Vue同时用到了JavaScript ES5和ES6. Angular依赖于TypeScript。它为相关的案例和开源项目(你在ES5和ES6中都可以找到React的案例)提供了更多的统一性。TypeScript还介绍了一些诸如修饰符和静态类型的概念。在代码自动重构、定义跳转等代码智能工具中都会用到静态类型。它还可以减少应用的bug数量，虽然这个话题并没有得到一致的认可。Eric Elliott在他的文章The shocking secret about static types给出了否定的态度。相反的，Daniel C Wang认为使用静态类型并没有坏处，反而将测试驱动开发(TDD)和静态类型相结合是有好处的。 你应该也知道在React中可以用Flow进行代码检视。Flow是Facebook为JavaScript开发的静态类型检视器。它也可以集成到VueJS中。 如果你用TypeScript编程，那么你将不会再用标准的JavaScript。尽管TypeScript还在发展，但相对于整个JavaScript语言，TypeScript只是冰山一角。你还得注意一个风险就是，选择TypeScript肯是一个错误的方向，因为TypeScript可能会随着时间而消逝。TypeScript会给项目增重了很多的开销——你可以从这篇文章得到更多的信息：由Eric Elliott写的Angular 2 VS React。 Templates — JSX or HTMLReact breaks with long-standing best practices. For decades, developers were trying to separate UI templates and inline Javascript logic, but with JSX, these are intermixed again. This might sound terrible, but you should listen to Peter Hunt’s talk “React: Rethinking best practices” (from October 2013). He points out that separating templates and logic is merely a separation of technologies, not concerns. You should build components instead of templates. Components are reusable, composable and unit-testable. JSX is an optional preprocessor for HTML-like syntax which will be compiled in Javascript later. It has some quirks — for example, you need to use className instead of class, because the latter is a protected name in Javascript. JSX is a big advantage for development, because you have everything in one place, and code completion and compile-time checks work better. When you make a typo in JSX, React won’t compile, and it prints out the line number where the typo occurred. Angular 2 fails quietly at run time (this is argument is probably invalid if you use AOT with Angular). JSX implies that everything in React is Javascript — it is used for both the JSX templates and the logic. Cory House points this out in his article from January 2016: “Angular 2 continues to put ‘JS’ into HTML. React puts ‘HTML’ into JS.”. This is a good thing, because Javascript is more powerful than HTML. The Angular templates are enhanced HTML with special Angular language (Things like ngIf or ngFor). While React requires knowledge of JavaScript, Angular forces you to learn Angular-specific syntax. Vue features “single-file components”. This seems like a trade-off with regard to the separation of concerns — templates, scripts and styles are in one file but in three different, ordered sections. This means you get syntax highlighting, CSS support and easier use of preprocessors like Jade or SCSS. I have read in other articles, that JSX is easier for debugging because Vue will not show bad HTML syntax errors. This is not true because Vue converts HTML to render functions — so errors are shown without problems (Thanks to Vinicius Reis for commenting and the correction!). Side note: If you like the idea of JSX and want to use it in Vue, you can use babel-plugin-transform-vue-jsx. React打破了长期存在的最佳实践。几十年的时间里，开发者们一直在尝试将UI模板和内联的JavaScript逻辑相分离，然而JSX的出现，又将二者再次混合起来。这听起来很糟糕，但你最好听听Peter Hunt是怎么说的“React: 对最佳实践的重新考虑” (2013.10)。他指出将模板和业务逻辑分开只是技术上的分离，与其他无关。你得构造组件而不是模板。组件是可重用、可组合、可进行单元测试的。 JSX是HTML可选的预处理程序，它有着和HTML相类似的语法，但是可以在页面加载之后，当做JavaScript进行编译（不知道怎么翻译）。JSX有一些奇怪的语法，举个栗子：你得用className而不能用用class，因为在JavaScript中class是一个保留字。JSX对开发而言有一个很大的好处，因为所有的东西都在一个地方，并且代码的编写完成以及编译检测过程能够更好的执行。当你的JSX出了一个打印问题，React将停止编译，并打印出出问题的哪行代码在哪里。但是Angular2在运行时方面就相形见绌了（如果你用来AOT可能就另当别论了）。 JSX语法中所有东西都是JavaScript，模板和逻辑都由JavaScript实现。2016年1月Cory House在他的文章中指出：“Angular2继续把‘JS’放进‘HTML’里；React则是把‘HTML’放进‘JS’里”。React的做法显得更好，因为JavaScript要比HTML强大得多。 Angular中的模板是通过特殊的Angular语法，加强版的HTML(比如ngIf和ngFor)。而React则需要有JavaScript基础；要用Angular的话你就必须得学它的特殊语法。 Vue以“单文件组件”为特征。这看起来是对三者分离的权衡考虑——模板、脚本、样式都在一个文件中，但是在不同的并且规定好顺序的部分。这意味着你得更加注意语法，CSS类似Jage或SCSS，支持一些需处理，而且更容易使用。我在另一篇文章中读到，JSX相比Vue更便于调试，因为Vue不会报HTML相关的语法错误。但这并不是真的因为Vue会把HTML转换成方法——所以错误的提示将不会有什么问题。 边注：如果你喜欢JSX的用法并且想把它应用到Vue中，你可以用这个插件：babel-plugin-transform-vue-jsx。 Framework vs. libraryAngular is a framework rather than a library because it provides strong opinions as to how your application should be structured and also has more functionality out of the box. Angular is a “complete solution” — batteries included and ready to provide you with a pleasant start. You don’t need to analyze libraries, routing solutions or the like — you can just start working. React and Vue, on the other hand, are universally flexible. Their libraries can be paired to all kinds of packages (there are quite a lot for React on npm, but Vue has fewer packages because it’s still quite young). With React, you can even exchange the library itself for API-compatible alternatives like Inferno. However, with great flexibility comes great responsibility — there are no rules and limited guidance with React. Every project requires a decision regarding its architecture, and things can go wrong more easily. Angular, on the other hand, comes with a confusing nest of build tools, boilerplate, linters &amp; time-sinks to deal with. This is also true of React if starter kits or boilerplates are used. They’re naturally very helpful, but React works out of the box, and that’s probably the way you should learn it. Sometimes the variety of tools needed for a working in a Javascript environment is referred to as “Javascript fatigue”. There is an article about it by Eric Clemmons, who has this to say: There are still a bunch of installed tools, you are not used to, when starting with the framework. These are generated but probably a lot of developers do not understand, what is happening under the hood — or it takes a lot of time for them to do. Vue seems to be the cleanest and lightest of the three frameworks. GitLab has a blog post about its decision regarding Vue.js (October 2016): Vue.js comes with the perfect balance of what it will do for you and what you need to do yourself.(…) Vue.js is always within reach, a sturdy, but flexible safety net ready to help you keep your programming efficient and your DOM-inflicted suffering to a minimum. They like the simplicity and ease of use — the source code is very readable, and no documentation or external libraries are needed. Everything is very straightforward. Vue.js “does not make large assumptions about much of anything either”. There’s also a podcast about GitLab’s decision. Another blogpost about a shift towards Vue comes from Pixeljets. React “was a great step forward for JS world in terms of state-awareness, and it showed lots of people the real functional programming in a good, practical way”. One of the big cons of React vs. Vue is the problem of splitting components into smaller components because of the JSX restrictions. Here is a quote of the article: For me and my team the readability of code is important, but it is still very important that writing code is fun. It is not funny to create 6 components when you are implementing really simple calculator widget. In a lot of cases, it is also bad in terms of maintenance, modifications, or applying visual overhaul to some widget, because you need to jump around multiple files/functions and check each small chunk of HTML separately. Again, I am not suggesting to write monoliths — I suggest to use components instead of microcomponents for day-to-day development. There are interesting discussions about the blog post on Hacker news and Reddit — there are arguments from dissenters and further supporters of Vue alike. Angular是一个前端框架而不只是一个库，因为它不仅为你构建项目提供了一些强大的方案，而且还提供了很多开箱即用的方法。Angular是一套“完整的解决方案”——功能齐备并且使用简单。不用去管理库、路由等繁杂的东西，直接开始动手就好了。 在另一方面，React和Vue则以其灵活性被人熟知。它们的库能够匹配所有类型的包(npm上有大量的与React相关的包，Vue则要少一些，毕竟还年轻)。如果使用React，你甚至可以更改库本身来让API的兼容更加灵活，比如Inferno。然而，伴随着高度灵活性而来的还有更多的管理工作——如何去规范和限制，React没有给出任何的指导意见。每个项目都需要决定好项目的结构，否则就会容易出现问题。 至于Angular，你得面对一堆让人头大的编译工具、样板文件、linters？和时间陷阱。如果你在React中用到了初学者工具包或者样本文件，情况就会和Angular一样。这些自然都大有用处，但是React都是现成，开箱即用的，这也许是你应该学习的方法。有时候，多样化的开发工具需要一个JavaScript的工作环境，这个环境被称为“Javascript fatigue”。关于这一点，Eric Clemmons在他的文章说： 在你启动框架的时候，任然有一堆工具会被安装，这本不应该发生。它们是被生成出来的，但是可能很多开发者根本就不理解，它们的底层是怎么运作的——开发者得花大量的时间去处理这些东西。 Vue似乎是三个框架里面最干净、最轻量级的一个。GitLab有一篇关于Vue决策的博客这样说道： Vue.js在框架所能做的和开发者自己得做的二者之间找到了一个完美的平衡……Vue.js总能让健壮性和不失灵活性的安全网络成为触手可及的事情，而这个安全网能让你的程序高效而且DOM自身能做到最简化。 开发者喜欢Vue的简单，使用起来也很容易——它的源代码可读性很高，而且不需要什么文档或者其他的外部库做依赖。所有的过程都很直接。Vue.js“没有对过多的事情做大的假设”。 另一篇来自Pixeljets关于Vue的博客：about a shift towards Vue。“用state-awareness的话来说，React将JS向前迈了一大步，而且它通过恰当又实际的方式，向广大开发者展示了真正的函数式编程应该有的样子”。由于JSX的限制，Vue把组件分割成一个个的小组件。引用： 对我和我的团队来说，我们注重代码的可读性，但是写代码的乐趣更为重要。当你只是想完成一个计算器之类的小玩意，你却得创建6个组件，这是非常难受的。很多时候，这也给项目的维护、更新或对小部件的界面修改造成困难，因为你得在多个文件/方法中来回跳转并且得对小块的HTML代码进行单独检查。所有，我并不建议用Vue写庞大的项目——在日复一日的开发工作中我建议使用组件而不是微组件。 Hacker news 和 Reddit 有一篇有趣的文章——里面有Vue的支持者和反对者的辩论。 State management &amp; data bindingBuilding UIs is hard, because there are states everywhere — data changing over time entails complexity. Defined state workflows are a big help when apps grow and get more complex. For limited applications, this is probably overkill and something like Vanilla JS would be sufficient. How does it work? Components describe the UI at any point in time. When data changes, the framework re-renders the entire UI component — displayed data is always up-to-date. We can call this concept “UI as function”. React often works bundled with Redux. Redux describes itself in three fundamental principles: Single source of truth State is read-only Changes are made with pure functions In other words: the status of the complete application is stored in an object tree within a single store. This helps with debugging the application, and some functionalities are easier to implement. The state is read-only and can only be changed via actions to avoid race conditions (it also helps with debugging). Reducers are written to specify how the states can be transformed by actions. Most of the tutorials and boilerplates have Redux already integrated, but you can use React without it (and you might not need Redux in your project at all). Redux introduces complexity and pretty strong constraints into your code. If you are learning React, you should think about learning plain React before you head over to Redux. You should definitely read “You might not need Redux” by Dan Abramov. Some developers suggest the use of Mobx instead of Redux. You can think of it as an “automatic Redux”, which makes things much easier to use and understand at the outset. If you want to have a look, you should start with the introduction. You can also read this useful comparison between Redux &amp; MobX by Robin. The same author also offers information on moving from Redux to MobX. This list is useful if you want to check on other Flux libraries. And if you are coming from an MVC-world, you’ll want to read the article “Thinking in Redux (when all you’ve known is MVC)” by Mikhail Levkovsky. Vue can make use of Redux — but it offers Vuex as its own solution. A big difference between React and Angular is one-way vs. two-way binding. Angular’s two-way-binding changes the model state when the UI element (e.g. a user input) is updated. React only goes one way: it updates the model first and then it renders the UI element. Angular’s method is cleaner in the code and easier for the developer to implement. React’s way results in a better data overview, because the data only flows in one direction (this makes debugging easier). Both concepts have there pros and cons. You need to understand the concepts and determine if this influences your framework decision. The article “Two-way-data binding: Angular 2 and React” and this Stackoverflow question both offer a good explanation. Here you can find some interactive code examples (3 years old, for Angular 1 &amp; React only). Last but not least, Vue supports both one-way-binding and two-way-binding (one-way by default). There is a long article about different types of states and the state management in Angular applications (by Victor Savkin) if you want to read further. 状态管理 &amp; 数据绑定构建UI几面是困难的，因为哪里都会涉及到状态的处理——数据随着时间的变化会导致事情变得错综复杂。当应用业务逻辑增多并且越来越复杂，定义状态工作流将会有很大的好处。对于功能有限的应用，定义状态工作流可能就没必要了，用类似于Vanilla JS来实现就足够了。 那么这是如何起作用的呢？在任意时间点，组件描述好UI，当数据改变了，框架会重新渲染整个UI组件——被展现出来的数据就能保证总为最新的数据。我们称这种概念为“UI as function”； React经常会绑定Redux一起使用。这里描述了Redux的三个主要的原则: 单一数据源 状态只读 数据改变只会发生在单纯的方法中 换一句话说，整个应用的状态都会被单一存储在一个对象树中。这将有助于项目的调试而且会让一些功能更容易实现。状态是只读的，并且只能通过action来改变，这样可以避免竞争条件的产生(这同样有助于调试)。Reducers(状态计算函数)是用来具体说明状态是如何通过action进行转化的。参考：http://www.jianshu.com/p/3334467e4b32 大部分的教程和开发模板都会集成好Redux，但是你也可以不用它(可能在你的应用中，根本就用不到Redux)。Redux给你的代码增添了复杂性和很强的约束性。如果你在学习React，你最好在进军Redux之前，先学好简单的React。强烈建议你读Dan Abramov写的这篇文章：你可能用不着Redux。 一些开发者建议用Mobx而不用Redux。你可以把Mobx看做“自动化的Redux”，它用起来要方便得多，并且帮助你从一开始就能理解它。如果你感兴趣试一试，你可以看看这篇介绍。这篇由Robin写的关于比较Redux和Mobx的文章也会有帮助：Redux 与 MobX的比较。Robin还提供了如何将Redux转换成Mobx的帮助信息。如果你想试试其他Flux的库，这份清单你值得一试。如果你来自MVC世界，你肯定对Mikhail Levkovsky写的这篇文章感兴趣：Thinking in Redux (when all you’ve known is MVC)。 在Vue中，你可以使用Redux，但是Vue提供了他们自己的解决方案：Vuex。 React和Angular一个很大的区别在于一个是单向数据流绑定，一个是双向数据流绑定。Angular的双向数据流绑定机制保证当UI元素(例如用户做了输入动作)更新的时候，model的状态也会随之更新。而React则是单向的：model状态会先更新，接着再渲染UI元素。对开发者而言，Angular的方法在代码中显得更加清晰也更方便写实现代码。而React的方式能让开发者更好的掌控数据的流向，因为数据只会在一个方向进行流动(这让调试更容易)。 两种方式各有利弊。你需要理解这两种概念的区别并且判断好这会不会影响你框架的选型。这两篇文章都给出了很好的解释：Two-way-data binding: Angular 2 and React、this Stackoverflow question。这里你可以找到这两种方式的代码案例。最后但同样重要的是，Vue其实同时提供了单向数据流绑定和双向数据流绑定两种方式(默认是单向的)。 如果你想对不同类型的状态进行深入的了解，你可以参考这篇长文：the state management in Angular applications (by Victor Savkin)。 Other programming conceptsAngular includes dependency injection, a pattern in which one object supplies the dependencies (a service) to another object (a client). This leads to more flexibility and cleaner code. The article “Understanding dependency injection” explains this concept in more detail. The model-view-controller pattern (MVC) splits a project into three components: model, view and controller. Angular as an MVC-framework has MVC out of the box. React only has the V — you need to solve the M and C on your own. 其他编程概念Angular支持依赖注入模式，一个对象(服务端)为另一个对象(客户端)提供依赖。这促使代码更灵活、更简洁。这篇文章有更详细的阐释：Understanding dependency injection。 MVC模式吧一个工程切分为三个部分：模型、视图、控制器。Angular作为一个MVC框架，提供了现成的MVC解决方案。而React只有View层——你需要自己处理Model层和控制器层。 Flexibility &amp; downsizing to microservicesYou can work with React or Vue by simply adding the Javascript library to the source code. This is not possible with Angular because of its use of TypeScript. We’re now moving more towards microservices and microapps. React and Vue give you more control to size an application by selecting only the things which are really necessary. They offer more flexibility to shift from an SPA to microservices using parts of a former application. Angular work best for SPA, as it is probably too bloated to be used for microservices. As Cory House notes: JavaScript moves fast, and React allows you to swap out small pieces of your application for better libraries instead of waiting around and hoping your framework will innovate. The philosophy of small, composable, single-purpose tools never goes out of style. 灵活性 &amp; 精简成微服务你只用把相关的JavaScript库导入到你的工程中，就可以使用React或Vue开始工作。但对Angular来说是不可能的，因为它用的是TypeScript。 我们现在着重看看微服务和微应用。React和Vue给你更多的控制权，你可以只选择你必须要的库导入到你的工程，这样可以控制你应用的大小。通过只使用原有应用的一部分，它们为SAP应用转化为微服务提供了跟多的灵活性。 就像Cory House所说： JavaScript更新迅速，React允许你抽出你应用的一小部分而不是原地等待，p着你用的框架将会更新。从哲学上讲，简单小巧、可组合的、单一目的的工具从来都不会过时。一些人也用React来写非单页应用的网页。甚至Facebook，也没有用React来写他们的主页，而是用在了一些特殊的页面和功能上。 Size &amp; performanceThere is a flip-side to all the functionality: the Angular framework is quite bloated. The gzipped file size is 143k, compared to 23K for Vue and 43k for React. React and Vue both have a Virtual DOM , which is supposed to improve performance. If you’re interested in this, you can read about the differences between the Virtual DOM &amp; DOM, as well as the real benefits of the Virtual DOM in react.js. Also, one of the authors of the Virtual-DOM itself answers a performance-related question on Stackoverflow. To check the performance, I had a look at the great js-framework-benchmark. You can download and run it yourself, or have a look at the interactive result table. Before you check the results, you should know, that the frameworks are cheating on benchmarks — such a performance check should not be used to make decisions. To summarize: Vue has great performance and the deepest memory allocation, but all these frameworks are really pretty close to each other when compared to particularly slow or fast frameworks (like Inferno). Once again: The performance benchmarks should only be considered as side note, not as a verdict. 大小 &amp; 性能与所有功能性相矛盾的是：Angular框架相当的臃肿。它的压缩包有143k，而Vue和React分别只有23k和43k。 React和Vue都有虚拟DOM，这可以提高性能。如果你对此感兴趣，你可以看看这两篇文章：the differences between the Virtual DOM &amp; DOM、the real benefits of the Virtual DOM in react.js。同时，你也可以看看Stackoverflow上关于虚拟DOM影响性能相关的回答answers a performance-related question。 为了判断三者的性能表现，我参考了牛批的js-framework-benchmark。你可以自行下载运行，或者参考这个：interactive result table。在你检测结果之前，你得注意，框架其实在骗benchmarks——任何性能检测结果都不能用在你框架的选型上。 这是Angular、React、Vue三者的性能检测结果参考：Source。 总结：Vue性能上表现最好，并且拥有最深的内存分配，但是当和具体某个运行很慢或者很快的框架(比如Inferno)作对比的话，三者的表现都在伯仲之间。重新强调一遍：性能上的标准只能说是需要考虑的一方面，但不是一个决定性的因素。 TestingFacebook uses Jest to tests its React code. Here is a comparison between Jest and Mocha — and there is an article on how to use Enzyme with Mocha. Enzyme is a JavaScript testing utility used at Airbnb (in conjunction with Jest, Karma and other test runners). Then there is Jasmine as a testing framework in Angular 2. There’s rant in an article by Eric Elliott that says Jasmine “results in millions of ways to write tests and assertions, needing to carefully read each one to understand what it´s doing”. The output is also very bloated and laborious to read. There are some informative articles on the integration of Angular 2 with Karma and Mocha. Here is an old video (from 2015) about the testing strategies with Angular 2. Vue lacks testing guidance, but Evan wrote in his 2017 preview that the team plans to work on this. They recommend using Karma. Vue works together with Jest, and there’s also avoriaz as a test utility. 测试React使用uses Jest来测试React代码。这里有一份Jest和Mocha对比的文章：comparison between Jest and Mocha，还有一篇关于如何在Mocha中使用Enzyme的文章：how to use Enzyme with Mocha。Enzyme是一个用于JavaScript的测试应用程序(是对Jest、Karma和其他测试运行器的结合)，Airbnb用到了Enzyme。 Jasmine是针对Angular2的一个测试框架。有一篇斥责Jasmine的文章说道“”。输出的测试报告又非常的臃肿，生硬。这里有一些信息类的文章，指导你如何集成Karma和Mocha到你的Angular2项目中去。还有一个关于tAngular2测试策略的旧视频(2015年)。 Vue缺乏测试相关的指导，但是2017年，Evan预测Vue团队正计划着完善这一块。他们推荐使用Karma。Vue可以和Jest一起使用，而且也有相关的测试程序：avoriaz as a test utility。 Universal &amp; native apps Universal apps are introducing apps into the web, onto the desktop and into the world of native apps, as well. React and Angular both support native development. Angular has NativeScript (backed by Telerik) for native apps and Ionic Framework for hybrid apps. With React, you can check out react-native-renderer to build cross-plattform iOS and Android apps, or react-native for native apps. A lot of apps (including Facebook; check the Showcase for more) are built with react-native. Javascript frameworks render pages on the client. This is bad for perceived performance, overall user experience and SEO. Server-side pre-rendering is a plus. All three frameworks have libraries to find help with that. For React there is next.js , Vue has nuxt.js, and Angular has….Angular Universal. 通用应用 &amp; 本地应用通用应用适用于web端、桌面端还有移动端。 React和Angular都支持本地APP开发。Angular提供了NativeScript来做本地APP开发，还有Ionic框架做hybridAPP开发。至于React，你可以试试react-native-renderer来做跨平台的iOS、安卓APP，或者用react-native来做本地APP开发。有很多应用(包括Facebook，这里有更多相关信息Showcase)都是用react-native构建的。 JavaScript框架如果在客户端渲染页面，综合用户的体验和SEO(搜索引擎优化)的统计，用户可感知的性能是不好的。服务器端的预加载是一个优化处理。这三个框架都提供了库帮助你处理预加载的问题。React有next.js、Vue有nuxt.js、Angular则有Angular Universal。 Learning curveThere is definitely a steep learning curve for Angular. It has comprehensive documentation, but sometimes you might feel frustrated with it because things are more difficult than they sound. Even when you have a deep understanding of Javascript, you need to learn what’s going on under the hood of the framework. Setup is magical in the beginning, and it offers a lot of included packages and code. This can be seen as a negative because there is a big, pre-existing ecosystem you need to learn over time. On the other hand, it could be good in a given situation because a lot of decisions have already made. With React, you’ll probably need to make a lot of imposing decisions with regard to third party libraries. There are 16 different flux packages for state management to choose from in React alone. Vue is pretty easy to learn. Companies switch to Vue because its seems to be much easier for junior developers. Here you can read about somebody describing his team’s move from Angular to Vue. According to another user, the React app at his company was so complex that a new developer couldn’t keep up with the code. With Vue, the gap between junior and senior developers shrinks, and they can collaborate more easily and with fewer bugs, problems and time to develop. Some people claim that things they have done in React would have been better written in Vue. If you are an unexperienced Javascript developer — or if you worked mainly with jQuery in the last decade — you should think about using Vue. The paradigm shift is more pronounced when moving to React. Vue looks more like plain Javascript while also introducing some new ideas: components, an event-driven-model, and one-way data flow. It also has a small footprint. Meanwhile, Angular and React have their own way of doing things. They may get in your way, because you need to adjust your practices to make things work their way. That can be a detriment because you are less flexible, and there is a steeper learning curve. It could also be a benefit because you are forced to learn the right concepts while learning the technology. With Vue, you can do the things the old-Javascript-fashioned way. This can be easier in the beginning, but could become a problem in the long-run if things are not done properly. When it comes to debugging, it’s a plus that React and Vue have less magic. The hunt for bugs is easier because there are fewer places to look and the stack traces have better distinctions between their own code and that of the libraries. People working with React report that they never have to read the source code of the library. However, when debugging your Angular application, you often need to debug the internals of Angular to understand the underlying model. On the bright side, the error messages are supposed to be clearer and more informative starting with Angular 4. 学习曲线Angular的学习曲线是相当陡峭的，虽然Angular有很全面的开发文档，但有时你可能会感觉不能称心如意，因为事情比它听起来的要难得多。即使你对JavaScript有很深入的了解，你还是得学习Angular底层是如何运行才行。刚入门的时候，运行起项目会让你感觉不可思议，Angular会提供给你大量的内置包和代码。这可以被视为一个弊端，因为 这会使项目臃肿，而且你得花时间去学习它原有的生态系统。另一方面，这在某种情况下却是有好处的，应为框架本身为你做好了许多决定，而你不用操心。至于React，你可能要处理好很多第三方库的导入问题。就状态管理而言，React就有16种不同的flux包可供开发者选择。 Vue很容易学。很多公司决定改用Vue，是应为对低级别的开发者而言，Vue看起来更容易。这里你可以看看一个公司描述他们如何是把Angular迁移至Vue的。另一个用户说，他们公司的React APP实在是太复杂了，以至于一个新手根本看不到它的代码。至于Vue，初级和高级开发者之间的差距将被缩小，而且他们之间的合作将会更容易，这也会使得开发的bug、问题和开发时间都会变少。 一些人说React能做的事情，如果用Vue来代替会有更好的结果。如果你的JavaScript经验不足，或者你过去几年主要在用jQuery工作，那么你可以考虑用Vue。学习React的范式转移将会更明显。Vue更像是简单的JavaScript，不过也引入了一些新的概念：组件、事件驱动模型、单向数据流绑定。而且它占用资源少。 同时Angular和React都有它们特有的使用方式，而这种方式可能给你造成麻烦，因为你得调整你的习惯，来适应它们的方式。这对学习者来说是不友好的，因为这样你的灵活性会受到限制，而且学习曲线也先对更陡峭。不过你也可以从中获益，因为当你学习这门技术的时候，你不得不学习正确的理念，这样也不会走弯路。如果学习Vue，你可以用你已有的JavaScript风格来进行学习。对刚入门的开发者来说，这会更加容易，但是如果刚开始没有做正确，那么对长期的学习而言，将会是一个问题。 在代码调试方面，有一个有利因素就是，React和Vue的迷惑性更少。bug的排查会更容易，因为你需要检查的地方更少，而且它们对你自己的代码和库所包含的代码的堆栈跟踪做了更好的区分。用React的开发者说它们从来都不用读库里面的源代码。然而，当你调试Angular开发的应用的时候，你经常得调试Angular内部的代码，这样你才能理解里面潜在的东西。好的一面是，从Angular4之后，调试的日志信息会变得更清晰，也会提供给开发者更多的信息。 Angular, React and Vue under the hoodDo you want to check the source code yourself? Do you want to see how things feel? You’ll probably want to check out the Github repositories first: React, Angular, and Vue How does the syntax look? ValueCoders compares the syntax for Angular, React and Vue. It is also good to see things in production — in conjunction with the underlying source code. TodoMVC lists dozens of the same Todo app, written with different Javascript frameworks — you can compare the Angular, React and Vue solutions. RealWorld creates a real-world-application (a Medium-clone), and they have solutions for Angular (4+) and React (with Redux) ready. Vue is a work-in-progress. There are also some real-world apps you could have a look at. Here are solutions for React: Do (a nice real-world notes management application built with React &amp; Redux) sound-redux (a Soundcloud client built with React &amp; Redux) Brainfock (a project &amp; team management solution built with React) react-hn &amp; react-news (Hacker news clones) react-native-whatsapp-ui + a tutorial (Whatsapp clone with react-native) phoenix-trello (Trello clone) slack-clone + another tutorial (Slack clones) There are some apps for Angular: angular2-hn &amp; hn-ng2 (Hacker News clones + a nice tutorial about creating another one by Ashwin Sureshkumar) Redux-and-angular-2 (a Twitter clone) There are also solutions for Vue: vue-hackernews-2.0 &amp; Loopa news (Hacker News clones) vue-soundcloud (a Soundcloud demo) Angular、React 、 Vue 底层你想看框架的源代码吗？你想知道里面到底是怎样的吗？ 你得先在Github上找到他们的源代码：React、Angular、Vue。 看了代码之后，你觉得它们的语法怎么样？ValueCoders比较了三者的语法特点和区别： compares the syntax for Angular, React and Vue. 也出现了一些与底层源代码相结合而成的成功的产品。TodoMVC列举了一系列用不同JavaScript框架写的Todo app——你能通过这来比较Angular、React、Vue三个框架解决方案的优劣。RealWorld创建了一个real-world-application，他们已经完成了Angular(4+)和React(使用了Redux)两种解决方案，Vue则还在完成的过程中。 这里还有一些real-world提供的APP，你可以看一看。以下是React的解决方案： Do (a nice real-world notes management application built with React &amp; Redux) sound-redux (a Soundcloud client built with React &amp; Redux) Brainfock (a project &amp; team management solution built with React) react-hn &amp; react-news (Hacker news clones) react-native-whatsapp-ui + a tutorial (Whatsapp clone with react-native) phoenix-trello (Trello clone) slack-clone + another tutorial (Slack clones) 以下是Angular相关的APP： angular2-hn &amp; hn-ng2 (Hacker News clones + a nice tutorial about creating another one by Ashwin Sureshkumar) Redux-and-angular-2 (a Twitter clone) 下面是Vue的解决方案： vue-hackernews-2.0 &amp; Loopa news (Hacker News clones) vue-soundcloud (a Soundcloud demo) ConclusionDecide on a framework now React, Angular and Vue are all pretty cool, and none of them stands clearly above the others. Trust your gut feeling. This last bit of entertaining cynicism might help your decision: The dirty little secret is that most “modern JavaScript development” is nothing to do with actually building websites — it’s building packages that can be used by people who build libraries that can be used by people who build frameworks that people who write tutorials and teach courses can teach.I’m not sure anyone is actually building anything for actual users to interact with. This is an exaggeration, of course, but there is probably a grain of truth to it. Yes, there is a lot of buzzing in the Javascript ecosystem. You’ll probably find a lot of other attractive alternatives during your search — try not to be blinded by the newest, shiniest framework. What should I choose? If you work at Google: Angular If you love TypeScript: Angular (or React) If you love object-orientated-programming (OOP): Angular If you need guidance, structure and a helping hand: Angular If you work at Facebook: React If you like flexibility: React If you love big ecosystems: React If you like choosing among dozens of packages: React If you love JS &amp; the “everything-is-Javascript-approach”: React If you like really clean code: Vue If you want the easiest learning curve: Vue If you want the most lightweight framework: Vue If you want separation of concerns in one file: Vue If you are working alone or have a small team: Vue (or React) If your app tends to get really large: Angular (or React) If you want to build an app with react-native: React If you want to have a lot of developers in the pool: Angular or React If you work with designers and need clean HTML files: Angular or Vue If you like Vue but are afraid of the limited ecosystem: React If you can’t decide, first learn React, then Vue, then Angular. So, have you made your decision?Well done! Read about how to start developing in either Angular, React or Vue (coming soon, follow me on Twitter for updates). 结论React、Angular、Vue三个框架都很强大，而且没有一个相比其他两个更特别突出。最后一段带有娱乐性质愤世嫉俗的话可能对你做决定有所帮助： 一个鲜为人知的小秘密就是：大部分的现代JavaScript框架都没有在真正意义上搭建网页——做开发包的会被做库的人利用，而做库的会被做框架的人利用，而这些做框架的人则忙着写入门demo和教程，并且教别人怎么用他们的框架。到底有没有人真的在，反正我是没搞清楚的。 当然，这是夸张了的说法，但是他说的可能也有一点道理。没错，JavaScript的生态系统有很多不一样的声音，在你搜寻的过程中，你可能会发现很多其他有吸引力，可供选择的框架，但是注意不要被最新潮的，最火热的框架蒙蔽了双眼。 如何做出选择： 如果你在Google工作：Angular 如果你喜欢TypeScript：Angular(或者React) 如果你喜欢面向对象编程(OOP)：Angular 如果你需要更多的指导、条理性和帮助：Angular 如果你在Facebook工作：React 如果你偏好灵活性：React 如果你喜欢大的生态圈：React 如果你不想引入太多的开发包：React 如果你热爱JavaScript，并且所有事情都想用JavaScript来做：React 如果你想拥有简洁的代码：Vue 如果看中学习曲线的难易程度：Vue 如果你想用最轻量级的框架：Vue 如果你关注文件的分离(模块化)：Vue 如果你是单兵作战或者是在小团队工作：Vue(或者React) 如果你的APP可能会变得非常庞大：Angular(或者React) 如果你想兼容移动端：React 如果你想招到大量的开发者：Angular或React 如果是与设计师共事而且想写纯净的HTML文件：Angular或Vue 如果你喜欢Vue，但是又怕它的生态圈不够繁荣：React 如果你还是无法作出决定：先学学React，然后是Vue，最后再学Angular。 所有, 你做出决定了吗? 干得漂亮，就知道你能行。试着开始用Angular、React、Vue来开始你的开发。 更多资源 React JS, Angular &amp; Vue JS — Quickstart &amp; Comparison (an 8-hour long introduction and comparison of the three frameworks) Angular vs. React (vs. Vue) — the DEAL breaker (a short but excellent comparison by Dominik T) Angular 2 vs. React — the ultimate dance off (a nice comparison by Eric Elliott) React vs. Angular vs. Ember vs. Vue.js (a comparison of the three frameworks in note form by Gökhan Sari) React vs. Angular (a clear comparison of the two frameworks) Can Vue fight for the Throne with React? (a nice comparison with a lot of code examples) 10 reasons, why I moved from Angular to React (another nice comparison by Robin Wieruch) All JavaScript frameworks are terrible (a great rant about all major frameworks by Matt Burgess)","categories":[],"tags":[{"name":"翻译","slug":"翻译","permalink":"http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"}]}],"categories":[],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"},{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"随想","slug":"随想","permalink":"http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"},{"name":"TypeScript","slug":"TypeScript","permalink":"http://yoursite.com/tags/TypeScript/"},{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/tags/Tool/"},{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"},{"name":"翻译","slug":"翻译","permalink":"http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"}]}